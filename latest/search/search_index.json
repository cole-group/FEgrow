{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FEgrow 2.0.0: Active Learning and acceleration","text":"<p>A new release of FEgrow that adds active learning together with acceleration powered by Dask (multi -cpu, -node, -cluster).</p> <p>To get started with the new functionality, see the tutorials folder, which contains examples of i) basic interactive molecular design, ii) an introduction to the chemspace functionality, and iii) an example of active learning for inhibitor design.</p> <p>These notebooks are based on the functionality described in:</p> <p>Cree B, Bieniek M, Amin S, Kawamura A, Cole D. Active learning driven prioritisation of compounds from on-demand libraries targeting the SARS-CoV-2 main protease. ChemRxiv (2024).</p> <p>Scripts used to create Figures 2-6 in the above paper can be accessed here.</p>"},{"location":"#fegrow-1","title":"FEgrow (1.*)","text":"<p>An interactive workflow for building user-defined congeneric series of ligands in protein binding pockets for input to free energy calculations.</p> <p></p> <p>Bieniek, Mateusz K., Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, and Daniel J. Cole. \"An open-source molecular builder and free energy preparation workflow.\" Communications Chemistry 5, no. 1 (2022): 136.</p> <p>https://doi.org/10.1038/s42004-022-00754-9</p>"},{"location":"#further-information","title":"Further Information","text":"<p>Please see cole-group.github.io/fegrow for full installation instructions, documentation and acknowledgements.</p>"},{"location":"acknowledgments/","title":"Acknowledgments","text":"<p>We are grateful to many open source software packages,  including but not limited to:</p> <ul> <li>RDKit (https://rdkit.org/)</li> <li>Constrained Embedding - Joshua Meyers' Notebook, Tim Dudgeon' example</li> <li>Grafting, Peter Schmidtke PeterSchmidtke</li> <li>OpenMM (https://openmm.org/)</li> <li>Open Force Field foundation packages (https://openforcefield.org/)</li> <li>mols2grid (https://mols2grid.readthedocs.io/)</li> <li>Prody (http://prody.csb.pitt.edu/)</li> <li>TeachOpenCADD (https://projects.volkamerlab.org/teachopencadd/)</li> <li>OpenChemistry (https://www.openchemistry.org/, molecules as R-groups)</li> <li>Py3Dmol (https://github.com/3dmol/3Dmol.js)</li> <li>PDBFixer (https://github.com/openmm/pdbfixer)</li> <li>PyTorch (https://pytorch.org/)</li> <li>openmmforcefields (https://github.com/openmm/openmmforcefields)</li> <li>openmm-torch (https://github.com/openmm/openmm-torch)</li> <li>parmed (https://www.parmed.com/)</li> <li>OpenBabel (https://openbabel.org/)</li> <li>torchani (https://aiqm.github.io/torchani/)</li> </ul> <p>Please cite the packages accordingly.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#linux-macos","title":"Linux / MacOS","text":"<p>Conda installation:</p> <pre><code>conda install fegrow -c conda-forge\n</code></pre> <p>We recommend using mambaforge which is a flavour of conda.  Conda struggles with resolving the environment.</p> <p>To use the latest git version, download the code  and use the provided environment file environment.yml</p> <pre><code>git clone https://github.com/cole-group/FEgrow.git\ncd FEgrow\nmamba env create -f environment.yml\nconda activate fegrow\npip install --no-deps . # the repository directory\n</code></pre> <p>In order to ensure that the environment is available  in your jupyter, you can then use</p> <pre><code>python -m ipykernel install --user --name=fegrow\n</code></pre> <p>Warning</p> <p>Gnina stage is not supported on MacOS because CUDA's  is not available on MacOS  (see issue)</p>"},{"location":"installation/#windows","title":"Windows","text":"<p>We have not verified whether this toolkit works on Windows and we expect issues with the dependancy openmm-torch.</p>"},{"location":"license/","title":"License","text":"<p>FEgrow is licensed with MIT license (see below). For a summary,  please see https://tldrlegal.com/license/mit-license.</p> <p>FEgrow was heavily inspired by other codes, specifically the following:</p> <ul> <li>Constrained Embedding:<ul> <li>Joshua Meyers' Notebook https://github.com/JoshuaMeyers/Snippets/blob/master/200405_constrained_conformers.ipynb</li> <li>Tim Dudgeon's example https://github.com/InformaticsMatters/pipelines/blob/master/src/python/pipelines/rdkit/constrained_conf_gen.py</li> </ul> </li> <li>Grafting:<ul> <li>Peter Schmidtke https://pschmidtke.github.io/blog/rdkit/3d-editor/2021/01/23/grafting-fragments.html</li> </ul> </li> </ul> <p>Which are licensed under Apache License (Version 2.0, January 2004), which can be found below the MIT license.</p> <p>The MIT License (MIT) Copyright \u00a9 2022 Daniel J Cole</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <pre><code>The above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n</code></pre> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>Constrained Embedding and Grafting, 3rd Party Licensing</p> <p>Apache License                            Version 2.0, January 2004                         http://www.apache.org/licenses/</p> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright 2020 onwards, fast.ai, Inc</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"api/al/","title":"Active Learning","text":""},{"location":"api/al/#fegrow.al","title":"al","text":"<p>Classes:</p> <ul> <li> <code>TanimotoKernel</code>           \u2013            <p>Custom Gaussian process kernel that computes Tanimoto similarity.</p> </li> <li> <code>Query</code>           \u2013            </li> </ul>"},{"location":"api/al/#fegrow.al.TanimotoKernel","title":"TanimotoKernel","text":"<pre><code>TanimotoKernel()\n</code></pre> <p>               Bases: <code>NormalizedKernelMixin</code>, <code>StationaryKernelMixin</code>, <code>Kernel</code></p> <p>Custom Gaussian process kernel that computes Tanimoto similarity.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Computes the pairwise Tanimoto similarity.</p> </li> </ul> Source code in <code>fegrow/al.py</code> <pre><code>def __init__(self):\n    \"\"\"Initializer.\"\"\"\n</code></pre>"},{"location":"api/al/#fegrow.al.TanimotoKernel.__call__","title":"__call__","text":"<pre><code>__call__(X, Y=None, eval_gradient=False)\n</code></pre> <p>Computes the pairwise Tanimoto similarity.</p> <p>Parameters:</p> <ul> <li> <code>X</code>           \u2013            <p>Numpy array with shape [batch_size_a, num_features].</p> </li> <li> <code>Y</code>           \u2013            <p>Numpy array with shape [batch_size_b, num_features]. If None, X is used.</p> </li> <li> <code>eval_gradient</code>           \u2013            <p>Whether to compute the gradient.</p> </li> </ul> <p>Returns:</p> <ul> <li>           \u2013            <p>Numpy array with shape [batch_size_a, batch_size_b].</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>If eval_gradient is True.</p> </li> </ul> Source code in <code>fegrow/al.py</code> <pre><code>def __call__(self, X, Y=None, eval_gradient=False):  # pylint: disable=invalid-name\n    \"\"\"Computes the pairwise Tanimoto similarity.\n\n    Args:\n      X: Numpy array with shape [batch_size_a, num_features].\n      Y: Numpy array with shape [batch_size_b, num_features]. If None, X is\n        used.\n      eval_gradient: Whether to compute the gradient.\n\n    Returns:\n      Numpy array with shape [batch_size_a, batch_size_b].\n\n    Raises:\n      NotImplementedError: If eval_gradient is True.\n    \"\"\"\n    if eval_gradient:\n        raise NotImplementedError\n    if Y is None:\n        Y = X\n    return _dask_tanimito_similarity(X, Y)\n</code></pre>"},{"location":"api/al/#fegrow.al.Query","title":"Query","text":"<p>Methods:</p> <ul> <li> <code>Greedy</code>             \u2013              <p>Takes the best instances by inference value sorted in ascending order.</p> </li> <li> <code>PI</code>             \u2013              <p>Maximum PI query strategy. Selects the instance with highest probability of improvement.</p> </li> <li> <code>EI</code>             \u2013              <p>Maximum EI query strategy. Selects the instance with highest expected improvement.</p> </li> <li> <code>UCB</code>             \u2013              <p>Maximum UCB query strategy. Selects the instance with highest upper confidence bound.</p> </li> </ul>"},{"location":"api/al/#fegrow.al.Query.Greedy","title":"Greedy  <code>staticmethod</code>","text":"<pre><code>Greedy() -&gt; Callable\n</code></pre> <p>Takes the best instances by inference value sorted in ascending order.</p> <p>Returns:</p> <ul> <li> <code>Callable</code>           \u2013            <p>The greedy function.</p> </li> </ul> Source code in <code>fegrow/al.py</code> <pre><code>@staticmethod\ndef Greedy() -&gt; Callable:\n    \"\"\"Takes the best instances by inference value sorted in ascending order.\n\n    Returns:\n      The greedy function.\n    \"\"\"\n\n    def greedy(optimizer, features, n_instances=1):\n        \"\"\"Takes the best instances by inference value sorted in ascending order.\n\n        Args:\n          optimizer: BaseLearner. Model to use to score instances.\n          features: modALinput. Featurization of the instances to choose from.\n          n_instances: Integer. The number of instances to select.\n\n        Returns:\n          Indices of the instances chosen.\n        \"\"\"\n        return np.argpartition(optimizer.predict(features), n_instances)[\n            :n_instances\n        ]\n\n    return functools.partial(greedy, fegrow_label=\"greedy\")\n</code></pre>"},{"location":"api/al/#fegrow.al.Query.PI","title":"PI  <code>staticmethod</code>","text":"<pre><code>PI(tradeoff: float = 0) -&gt; Callable\n</code></pre> <p>Maximum PI query strategy. Selects the instance with highest probability of improvement.</p> <p>Parameters:</p> <ul> <li> <code>tradeoff</code>               (<code>float</code>, default:                   <code>0</code> )           \u2013            <p>Value controlling the tradeoff parameter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>           \u2013            <p>The function with pre-populated parameters.</p> </li> </ul> Source code in <code>fegrow/al.py</code> <pre><code>@staticmethod\ndef PI(tradeoff: float = 0) -&gt; Callable:\n    \"\"\"\n    Maximum PI query strategy. Selects the instance with highest probability of improvement.\n\n    Args:\n        tradeoff: Value controlling the tradeoff parameter.\n\n    Returns:\n        The function with pre-populated parameters.\n    \"\"\"\n    return functools.partial(max_PI, tradeoff=tradeoff, fegrow_label=\"PI\")\n</code></pre>"},{"location":"api/al/#fegrow.al.Query.EI","title":"EI  <code>staticmethod</code>","text":"<pre><code>EI(tradeoff: float = 0) -&gt; Callable\n</code></pre> <p>Maximum EI query strategy. Selects the instance with highest expected improvement.</p> <p>Parameters:</p> <ul> <li> <code>tradeoff</code>               (<code>float</code>, default:                   <code>0</code> )           \u2013            <p>Value controlling the tradeoff parameter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>           \u2013            <p>The function with pre-populated parameters.</p> </li> </ul> Source code in <code>fegrow/al.py</code> <pre><code>@staticmethod\ndef EI(tradeoff: float = 0) -&gt; Callable:\n    \"\"\"\n    Maximum EI query strategy. Selects the instance with highest expected improvement.\n\n    Args:\n        tradeoff: Value controlling the tradeoff parameter.\n\n    Returns:\n        The function with pre-populated parameters.\n    \"\"\"\n    return functools.partial(max_EI, tradeoff=tradeoff, fegrow_label=\"EI\")\n</code></pre>"},{"location":"api/al/#fegrow.al.Query.UCB","title":"UCB  <code>staticmethod</code>","text":"<pre><code>UCB(beta: float = 1) -&gt; Callable\n</code></pre> <p>Maximum UCB query strategy. Selects the instance with highest upper confidence bound.</p> <p>Parameters:</p> <ul> <li> <code>beta</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>Value controlling the beta parameter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>           \u2013            <p>The function with pre-populated parameters.</p> </li> </ul> Source code in <code>fegrow/al.py</code> <pre><code>@staticmethod\ndef UCB(beta: float = 1) -&gt; Callable:\n    \"\"\"\n    Maximum UCB query strategy. Selects the instance with highest upper confidence bound.\n\n    Args:\n        beta: Value controlling the beta parameter.\n\n    Returns:\n        The function with pre-populated parameters.\n    \"\"\"\n    return functools.partial(max_UCB, beta=beta, fegrow_label=\"UCB\")\n</code></pre>"},{"location":"api/chemspace/","title":"ChemSpace","text":""},{"location":"api/chemspace/#fegrow.ChemSpace","title":"ChemSpace","text":"<pre><code>ChemSpace(data=None, data_indices=None, dask_cluster=None, dask_local_cluster_kwargs={})\n</code></pre> <p>Streamline working with many RMols or a specific chemical space by employing a pandas dataframe, in combination with Dask for parallellisation.</p> <p>Methods:</p> <ul> <li> <code>optimise_in_receptor</code>             \u2013              <p>Return lists of energies.</p> </li> <li> <code>discard_missing</code>             \u2013              <p>Remove from this list the molecules that have no conformers</p> </li> <li> <code>add_rgroups</code>             \u2013              <p>Note that if they are Smiles:</p> </li> <li> <code>add_data</code>             \u2013              <p>:param data: dictionary {\"Smiles\": [], \"h\": [], ... }</p> </li> <li> <code>add_smiles</code>             \u2013              <p>Add a list of Smiles into this ChemicalSpace</p> </li> <li> <code>evaluate</code>             \u2013              <p>:param indices:</p> </li> <li> <code>add_enamine_molecules</code>             \u2013              <p>For the best scoring molecules, find similar molecules in Enamine REAL database</p> </li> <li> <code>active_learning</code>             \u2013              <p>Model the data using the Training subset. Then use the active learning query method.</p> </li> <li> <code>compute_fps</code>             \u2013              <p>:param smiles_tuple: It has to be a tuple to be hashable (to work with caching).</p> </li> <li> <code>to_sdf</code>             \u2013              <p>Write every molecule and all its fields as properties, to an SDF file.</p> </li> </ul> Source code in <code>fegrow/package.py</code> <pre><code>def __init__(\n    self,\n    data=None,\n    data_indices=None,\n    dask_cluster=None,\n    dask_local_cluster_kwargs={},\n):\n    if data is None:\n        data = ChemSpace.DATAFRAME_DEFAULT_VALUES\n\n    self.df = pandas.DataFrame(data, index=data_indices)\n\n    ChemSpace._dask_cluster = dask_cluster\n\n    if ChemSpace._dask_cluster is None:\n        logger.info(\n            \"No Dask cluster configured. Creating a local cluster of threads. \"\n        )\n        warnings.warn(\n            \"ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. \"\n            \"Use a Dask cluster with processes as a work around \"\n            \"(see the documentation for an example of this workaround) .\"\n        )\n\n        kwargs = {\n            \"n_workers\": None,\n            \"processes\": False,  # turn off Nanny to avoid the problem\n            # with loading of the main file (ie executing it)\n            \"dashboard_address\": \":8989\",\n            **dask_local_cluster_kwargs,\n        }\n        ChemSpace._dask_cluster = LocalCluster(**kwargs)\n        # ChemSpace._dask_cluster = Scheduler()\n        # ChemSpace._dask_cluster = LocalCluster(preload_nanny=[\"print('Hi Nanny')\"],\n        #                                        preload=[\"pint\"], n_workers=1\n        #                                        ) #asynchronous=True)\n\n    ChemSpace._dask_client = Client(\n        ChemSpace._dask_cluster\n    )  # ChemSpace._dask_cluster, asynchronous=True)\n    print(f\"Dask can be watched on {ChemSpace._dask_client.dashboard_link}\")\n\n    self._scaffolds = []\n    self._model = None\n    self._query = None\n    self._query_label = None\n</code></pre>"},{"location":"api/chemspace/#fegrow.ChemSpace.optimise_in_receptor","title":"optimise_in_receptor","text":"<pre><code>optimise_in_receptor(*args, **kwargs)\n</code></pre> <p>Return lists of energies.</p> Source code in <code>fegrow/package.py</code> <pre><code>def optimise_in_receptor(self, *args, **kwargs):\n    \"\"\"\n    Return lists of energies.\n    \"\"\"\n\n    # daskify parameters\n    args = [dask.delayed(arg) for arg in args]\n    kwargs = {k: dask.delayed(v) for k, v in kwargs.items()}\n\n    # create the dask jobs\n    delayed_optimise_in_receptor = dask.delayed(optimise_in_receptor)\n    jobs = {}\n    for i, row in self.df.iterrows():\n        if row.Mol.GetNumConformers() == 0:\n            print(\n                f\"Warning: mol {i} has no conformers. Ignoring receptor optimisation.\"\n            )\n            continue\n\n        jobs[row.Mol] = delayed_optimise_in_receptor(row.Mol, *args, **kwargs)\n\n    # dask batch compute\n    results = dict(zip(jobs.keys(), self.dask_client.compute(list(jobs.values()))))\n\n    # extract results\n    dfs = []\n    for mol, result in results.items():\n        opt_mol, energies = result.result()\n        mol.RemoveAllConformers()\n        # replace the conformers with the optimised ones\n        [mol.AddConformer(c) for c in opt_mol.GetConformers()]\n\n        mol.SetProp(\"energies\", str(energies))\n        dfs.append(pandas.DataFrame({}))\n        mol._save_opt_energies(energies)\n</code></pre>"},{"location":"api/chemspace/#fegrow.ChemSpace.discard_missing","title":"discard_missing","text":"<pre><code>discard_missing()\n</code></pre> <p>Remove from this list the molecules that have no conformers</p> Source code in <code>fegrow/package.py</code> <pre><code>def discard_missing(self):\n    \"\"\"\n    Remove from this list the molecules that have no conformers\n    \"\"\"\n    ids_to_remove = []\n    for i, row in self.df.iterrows():\n        if row.Mol.GetNumConformers() == 0:\n            print(f\"Discarding a molecule (id {i}) due to the lack of conformers. \")\n            ids_to_remove.append(i)\n\n    self.df = self.df[~self.df.index.isin(ids_to_remove)]\n    return ids_to_remove\n</code></pre>"},{"location":"api/chemspace/#fegrow.ChemSpace.add_rgroups","title":"add_rgroups","text":"<pre><code>add_rgroups(rgroups_linkers, rgroups2=None, alltoall=False)\n</code></pre> Note that if they are Smiles <ul> <li>if they have an * atom (e.g. RDKit atom.SetAtomicNum(0)), this will be used for attachment to the scaffold</li> <li>if they don't have an * atom, the scaffold will be fitted as a substructure</li> </ul> <p>First link the linker to the scaffold. Then add the rgroups.</p> <p>:param rgroups2: A list of Smiles. Molecules will be accepted and converted to Smiles. :param linker: A molecule. Ideally it has 2 atatchement points. :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def add_rgroups(self, rgroups_linkers, rgroups2=None, alltoall=False):\n    \"\"\"\n    Note that if they are Smiles:\n     - if they have an * atom (e.g. RDKit atom.SetAtomicNum(0)), this will be used for attachment to the scaffold\n     - if they don't have an * atom, the scaffold will be fitted as a substructure\n\n    First link the linker to the scaffold. Then add the rgroups.\n\n    :param rgroups2: A list of Smiles. Molecules will be accepted and converted to Smiles.\n    :param linker: A molecule. Ideally it has 2 atatchement points.\n    :return:\n    \"\"\"\n    scaffold = dask.delayed(self._scaffolds[0])\n\n    if not isinstance(rgroups_linkers, typing.Iterable):\n        rgroups_linkers = [rgroups_linkers]\n\n    if rgroups2 is not None and not isinstance(rgroups2, typing.Iterable):\n        rgroups2 = [rgroups2]\n\n    # create the dask jobs\n    delayed_build_molecule = dask.delayed(build_molecule)\n\n    jobs = [delayed_build_molecule(scaffold, linker) for linker in rgroups_linkers]\n\n    # if linkers and rgroups are attached, add them in two iterations\n    if rgroups2 is not None and not alltoall:\n        # for each attached linker, attach an rgroup with the same position\n        jobs = [\n            delayed_build_molecule(scaffold_linked, rgroup)\n            for rgroup, scaffold_linked in itertools.zip_longest(\n                rgroups2, jobs, fillvalue=jobs[0]\n            )\n        ]\n    elif rgroups2 is not None and alltoall:\n        jobs = [\n            delayed_build_molecule(scaffold_linked, rgroup)\n            for rgroup, scaffold_linked in itertools.product(rgroups2, jobs)\n        ]\n\n    results = self.dask_client.compute(jobs)\n    built_mols = [r.result() for r in results]\n\n    # get Smiles\n    built_mols_smiles = [Chem.MolToSmiles(mol) for mol in built_mols]\n\n    # extract the H indices used for attaching the scaffold\n    hs = [mol.GetIntProp(\"attachment_point\") for mol in built_mols]\n\n    self.add_data({\"Smiles\": built_mols_smiles, \"Mol\": built_mols, \"h\": hs})\n</code></pre>"},{"location":"api/chemspace/#fegrow.ChemSpace.add_data","title":"add_data","text":"<pre><code>add_data(data)\n</code></pre> <p>:param data: dictionary {\"Smiles\": [], \"h\": [], ... } :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def add_data(self, data):\n    \"\"\"\n\n    :param data: dictionary {\"Smiles\": [], \"h\": [], ... }\n    :return:\n    \"\"\"\n\n    # ensure that the new indices start at the end\n    last_index = max([self.df.index.max() + 1])\n    if np.isnan(last_index):\n        last_index = 0\n\n    # ensure correct default values in the new rows\n    data_with_defaults = ChemSpace.DATAFRAME_DEFAULT_VALUES.copy()\n    data_with_defaults.update(data)\n\n    # update the internal dataframe\n    new_indices = range(last_index, last_index + len(data_with_defaults[\"Smiles\"]))\n    prepared_data = pandas.DataFrame(data_with_defaults, index=new_indices)\n    self.df = pandas.concat([self.df, prepared_data])\n    return prepared_data\n</code></pre>"},{"location":"api/chemspace/#fegrow.ChemSpace.add_smiles","title":"add_smiles","text":"<pre><code>add_smiles(smiles_list, h=NA, protonate=False)\n</code></pre> <p>Add a list of Smiles into this ChemicalSpace</p> <p>:param h: which h was used to connect to the :param protonate: use openbabel to protonate each smile :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def add_smiles(self, smiles_list, h=pandas.NA, protonate=False):\n    \"\"\"\n    Add a list of Smiles into this ChemicalSpace\n\n    :param h: which h was used to connect to the\n    :param protonate: use openbabel to protonate each smile\n    :return:\n    \"\"\"\n\n    if protonate:\n        delayed_protonations = [\n            DaskTasks.obabel_protonate(smi) for smi in smiles_list\n        ]\n        jobs = self.dask_client.compute(delayed_protonations)\n        smiles_list = [job.result() for job in jobs]\n\n    # convert the Smiles into molecules\n    params = Chem.SmilesParserParams()\n    params.removeHs = False\n    mols = [Chem.MolFromSmiles(smiles, params=params) for smiles in smiles_list]\n\n    self.add_data({\"Smiles\": smiles_list, \"Mol\": mols, \"h\": h})\n</code></pre>"},{"location":"api/chemspace/#fegrow.ChemSpace.evaluate","title":"evaluate","text":"<pre><code>evaluate(indices: Union[Sequence[int], DataFrame] = None, scoring_function=None, gnina_path=None, gnina_gpu=False, num_conf=50, minimum_conf_rms=0.5, penalty=NA, al_ignore_penalty=True, **kwargs)\n</code></pre> <p>:param indices: :param scoring_function: :param gnina_path: :param gnina_gpu: :param num_conf: :param minimum_conf_rms: :param penalty: :param al_ignore_penalty: :param kwargs: :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def evaluate(\n    self,\n    indices: Union[Sequence[int], pandas.DataFrame] = None,\n    scoring_function=None,\n    gnina_path=None,\n    gnina_gpu=False,\n    num_conf=50,\n    minimum_conf_rms=0.5,\n    penalty=pd.NA,\n    al_ignore_penalty=True,\n    **kwargs,\n):\n    \"\"\"\n\n    :param indices:\n    :param scoring_function:\n    :param gnina_path:\n    :param gnina_gpu:\n    :param num_conf:\n    :param minimum_conf_rms:\n    :param penalty:\n    :param al_ignore_penalty:\n    :param kwargs:\n    :return:\n    \"\"\"\n\n    # evaluate all molecules if no indices are picked\n    if indices is None:\n        indices = slice(None)\n\n    if isinstance(indices, pandas.DataFrame):\n        if len(indices) &lt;= 2:\n            raise ValueError(\"Please provide at least 3 items\")\n        indices = indices.index\n\n    selected_rows = self.df.loc[indices]\n\n    # discard computed rows\n    selected_rows = selected_rows[selected_rows.score.isna()]\n\n    if len(self._scaffolds) == 0:\n        print(\"Please add scaffolds to the system for the evaluation. \")\n    elif len(self._scaffolds) &gt; 1:\n        raise NotImplementedError(\n            \"For now we only allow working with one scaffold. \"\n        )\n\n    # should be enough to do it once, shared\n    ## GENERATE CONFORMERS\n\n    if gnina_path is not None:\n        # gnina_path = delayed(os.path.join(RMol.gnina_dir, 'gnina'))\n        RMol.set_gnina(os.path.join(RMol.gnina_dir, \"gnina\"))\n    RMol._check_download_gnina()\n\n    num_conf = dask.delayed(num_conf)\n    minimum_conf_rms = dask.delayed(minimum_conf_rms)\n    protein_file = dask.delayed(self._protein_filename)\n    RMol._check_download_gnina()\n\n    scaffold = dask.delayed(self._scaffolds[0])\n    # extract which hydrogen was used for the attachement\n    h_attachements = [\n        a.GetIdx() for a in self._scaffolds[0].GetAtoms() if a.GetAtomicNum() == 0\n    ]\n\n    h_attachement_index = None\n    if len(h_attachements) &gt; 0:\n        h_attachement_index = h_attachements[0]\n\n    # create dask jobs\n    delayed_evaluate = dask.delayed(_evaluate_atomic)\n    jobs = {}\n    for i, row in selected_rows.iterrows():\n        jobs[i] = delayed_evaluate(\n            scaffold,\n            row.Smiles,\n            protein_file,\n            h=h_attachement_index,\n            num_conf=num_conf,\n            minimum_conf_rms=minimum_conf_rms,\n            scoring_function=scoring_function,\n            gnina_gpu=gnina_gpu,\n            **kwargs,\n        )\n\n    # run all\n    results = dict(zip(jobs.keys(), self.dask_client.compute(list(jobs.values()))))\n\n    # gather the results\n    for i, result in results.items():\n        Training = True\n        build_succeeded = True\n\n        try:\n            mol, data = result.result()\n\n            # save all data generated\n            if mol is not None:\n                for k, v in data.items():\n                    mol.SetProp(k, str(v))\n\n                # replace the original molecule with the new one\n                self.df.at[i, \"Mol\"] = mol\n\n            # extract the score\n            score = data[\"score\"]\n        except subprocess.CalledProcessError as E:\n            logger.error(\"Failed Process\", E, E.cmd, E.output, E.stdout, E.stderr)\n            score = penalty\n            build_succeeded = False\n\n            if al_ignore_penalty:\n                Training = False\n        except Exception:\n            # failed to finish the protocol, set the penalty\n            score = penalty\n            build_succeeded = False\n\n            if al_ignore_penalty:\n                Training = False\n\n        self.df.loc[i, [\"score\", \"Training\", \"Success\"]] = (\n            score,\n            Training,\n            build_succeeded,\n        )\n\n    logger.info(f\"Evaluated {len(results)} cases\")\n    return self.df.loc[indices]\n</code></pre>"},{"location":"api/chemspace/#fegrow.ChemSpace.add_enamine_molecules","title":"add_enamine_molecules","text":"<pre><code>add_enamine_molecules(n_best=1, results_per_search=100, remove_scaffold_h=False)\n</code></pre> <p>For the best scoring molecules, find similar molecules in Enamine REAL database  and add them to the dataset.</p> <p>Make sure you have the permission/license to use https://sw.docking.org/search.html     this way.</p> <p>@scaffold: The scaffold molecule that has to be present in the found molecules.     If None, this requirement will be ignored. @molecules_per_smile: How many top results (molecules) per Smiles searched.</p> Source code in <code>fegrow/package.py</code> <pre><code>def add_enamine_molecules(\n    self, n_best=1, results_per_search=100, remove_scaffold_h=False\n):\n    \"\"\"\n    For the best scoring molecules, find similar molecules in Enamine REAL database\n     and add them to the dataset.\n\n    Make sure you have the permission/license to use https://sw.docking.org/search.html\n        this way.\n\n    @scaffold: The scaffold molecule that has to be present in the found molecules.\n        If None, this requirement will be ignored.\n    @molecules_per_smile: How many top results (molecules) per Smiles searched.\n    \"\"\"\n\n    from pydockingorg import Enamine\n\n    if len(self._scaffolds) &gt; 1:\n        raise NotImplementedError(\"Only one scaffold is supported atm.\")\n\n    scaffold = self._scaffolds[0]\n\n    # get the best performing molecules\n    vl = self.df.sort_values(by=\"score\", ascending=False)\n    best_vl_for_searching = vl[:n_best]\n\n    # nothing to search for yet\n    if len(best_vl_for_searching[~best_vl_for_searching.score.isna()]) == 0:\n        return\n\n    if len(set(best_vl_for_searching.h)) &gt; 1:\n        raise NotImplementedError(\"Multiple growth vectors are used. \")\n\n    # filter out previously queried molecules\n    new_searches = best_vl_for_searching[\n        best_vl_for_searching.enamine_searched == False  # noqa: E712\n    ]\n    smiles_to_search = list(new_searches.Smiles)\n\n    start = time.time()\n    print(f\"Querying Enamine REAL. Looking up {len(smiles_to_search)} smiles.\")\n    try:\n        with Enamine() as DB:\n            results: pandas.DataFrame = DB.search_smiles(\n                smiles_to_search,\n                remove_duplicates=True,\n                results_per_search=results_per_search,\n            )\n    except requests.exceptions.HTTPError as HTTPError:\n        print(\"Enamine API call failed. \", HTTPError)\n        return\n    print(\n        f\"Enamine returned with {len(results)} rows in {time.time() - start:.1f}s.\"\n    )\n\n    # update the database that this molecule has been searched\n    self.df.loc[new_searches.index, \"enamine_searched\"] = True\n\n    if len(results) == 0:\n        print(\"The server did not return a single Smiles!\")\n        return\n\n    # prepare the scaffold for testing its presence\n    # specifically, the hydrogen was replaced and has to be removed\n    # for now we assume we only are growing one vector at a time - fixme\n    if remove_scaffold_h:\n        scaffold_noh = Chem.EditableMol(scaffold)\n        scaffold_noh.RemoveAtom(int(best_vl_for_searching.iloc[0].h))\n        scaffold = scaffold_noh.GetMol()\n\n    dask_scaffold = dask.delayed(scaffold)\n\n    start = time.time()\n    # protonate and check for scaffold\n    delayed_protonations = [\n        DaskTasks.obabel_protonate(smi.rsplit(maxsplit=1)[0])\n        for smi in results.hitSmiles.values\n    ]\n    jobs = self.dask_client.compute(\n        [\n            DaskTasks.scaffold_check(smih, dask_scaffold)\n            for smih in delayed_protonations\n        ]\n    )\n    scaffold_test_results = [job.result() for job in jobs]\n    scaffold_mask = [r[0] for r in scaffold_test_results]\n    # smiles None means that the molecule did not have our scaffold\n    protonated_smiles = [r[1] for r in scaffold_test_results if r[1] is not None]\n    print(\n        f\"Dask obabel protonation + scaffold test finished in {time.time() - start:.2f}s.\"\n    )\n    print(\n        f\"Tested scaffold presence. Kept {sum(scaffold_mask)}/{len(scaffold_mask)}.\"\n    )\n\n    if len(scaffold_mask) &gt; 0:\n        similar = results[scaffold_mask]\n        similar.hitSmiles = protonated_smiles\n    else:\n        similar = pandas.DataFrame(columns=results.columns)\n\n    # filter out Enamine molecules which were previously added\n    new_enamines = similar[~similar.id.isin(vl.enamine_id)]\n\n    warnings.warn(\n        f\"Only one H vector is assumed and used. Picking {vl.h[0]} hydrogen on the scaffold. \"\n    )\n    new_data = {\n        \"Smiles\": list(new_enamines.hitSmiles.values),\n        \"h\": vl.h[0],  # fixme: for now assume that only one vector is used\n        \"enamine_id\": list(new_enamines.id.values),\n    }\n\n    print(\"Adding: \", len(new_enamines.hitSmiles.values))\n    return self.add_data(new_data)\n</code></pre>"},{"location":"api/chemspace/#fegrow.ChemSpace.active_learning","title":"active_learning","text":"<pre><code>active_learning(n=1, first_random=True, score_higher_better=True, model=None, query=None, learner_type=None)\n</code></pre> <p>Model the data using the Training subset. Then use the active learning query method.</p> <p>See properties \"model\" and \"query\" for finer control.</p> <p>It's better to save the FPs in the dataframe. Or in the underlying system. :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def active_learning(\n    self,\n    n=1,\n    first_random=True,\n    score_higher_better=True,\n    model=None,\n    query=None,\n    learner_type=None,\n):\n    \"\"\"\n    Model the data using the Training subset. Then use the active learning query method.\n\n    See properties \"model\" and \"query\" for finer control.\n\n    It's better to save the FPs in the dataframe. Or in the underlying system.\n    :return:\n    \"\"\"\n\n    training = self.df[self.df.Training]\n    selection = self.df[~self.df.Training]\n\n    if training.empty:\n        if first_random:\n            warnings.warn(\n                \"Selecting randomly the first samples to be studied (no score data yet). \"\n            )\n            return selection.sample(n)\n        else:\n            raise ValueError(\n                'There is no scores for active learning. Please use the \"first_random\" property. '\n            )\n\n    # get the scored subset\n    # fixme - multitarget?\n    train_targets = training[\"score\"].to_numpy(dtype=float)\n\n    library_features = self.compute_fps(tuple(self.df.Smiles))\n\n    train_features = library_features[training.index]\n\n    selection_features = library_features[selection.index]\n\n    import fegrow.al\n\n    if model is not None:\n        self.model = model\n    if self.model is None:\n        self.model = fegrow.al.Model.gaussian_process()\n\n    if query is not None:\n        self.query = query\n\n    # employ Greedy query by default\n    if self.query is None:\n        self.query = fegrow.al.Query.Greedy()\n\n    # update on how many to querry\n    query = functools.partial(self.query, n_instances=n)\n\n    target_multiplier = 1\n    if score_higher_better is True:\n        target_multiplier = -1\n\n    if self.query_label in [\"greedy\", \"thompson\", \"EI\", \"PI\"]:\n        target_multiplier *= 1\n    elif self.query_label == \"UCB\":\n        target_multiplier *= -1\n\n    train_targets = train_targets * target_multiplier\n\n    # only GP uses Bayesian Optimizer\n    if learner_type is not None:\n        learner = learner_type(\n            estimator=self.model,\n            X_training=train_features,\n            y_training=train_targets,\n            query_strategy=query,\n        )\n    elif isinstance(self.model, gaussian_process.GaussianProcessRegressor):\n        learner = modAL.models.BayesianOptimizer(\n            estimator=self.model,\n            X_training=train_features,\n            y_training=train_targets,\n            query_strategy=query,\n        )\n    else:\n        learner = modAL.models.ActiveLearner(\n            estimator=self.model,\n            X_training=train_features,\n            y_training=train_targets,\n            query_strategy=query,\n        )\n\n    inference = learner.predict(library_features) * target_multiplier\n\n    self.df[\"regression\"] = inference.T.tolist()\n\n    selection_idx, _ = learner.query(selection_features)\n\n    return selection.iloc[selection_idx]\n</code></pre>"},{"location":"api/chemspace/#fegrow.ChemSpace.compute_fps","title":"compute_fps  <code>cached</code>","text":"<pre><code>compute_fps(smiles_tuple)\n</code></pre> <p>:param smiles_tuple: It has to be a tuple to be hashable (to work with caching). :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>@functools.cache\ndef compute_fps(self, smiles_tuple):\n    \"\"\"\n    :param smiles_tuple: It has to be a tuple to be hashable (to work with caching).\n    :return:\n    \"\"\"\n    futures = self._dask_client.map(ChemSpace._compute_fp_from_smiles, smiles_tuple)\n    fps = np.array([r.result() for r in futures])\n\n    return fps\n</code></pre>"},{"location":"api/chemspace/#fegrow.ChemSpace.to_sdf","title":"to_sdf","text":"<pre><code>to_sdf(filename, failed=False, unbuilt=True)\n</code></pre> <p>Write every molecule and all its fields as properties, to an SDF file.</p> <p>:return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def to_sdf(self, filename, failed=False, unbuilt=True):\n    \"\"\"\n    Write every molecule and all its fields as properties, to an SDF file.\n\n    :return:\n    \"\"\"\n    with Chem.SDWriter(filename) as SD:\n        columns = self.df.columns.to_list()\n        columns.remove(\"Mol\")\n\n        for i, row in self.df.iterrows():\n            # ignore this molecule because it failed during the build\n            if failed is False and row.Success is False:\n                continue\n\n            # ignore this molecule because it was not built yet\n            if unbuilt is False and row.Success is pandas.NA:\n                continue\n\n            mol = row.Mol\n            mol.SetIntProp(\"index\", i)\n            for column in columns:\n                value = getattr(row, column)\n                mol.SetProp(column, str(value))\n\n            mol.ClearProp(\"attachement_point\")\n            SD.write(mol)\n</code></pre>"},{"location":"api/rmol/","title":"RMol","text":""},{"location":"api/rmol/#fegrow.RMol","title":"RMol","text":"<pre><code>RMol(*args, id=None, template=None, **kwargs)\n</code></pre> <p>               Bases: <code>RInterface</code>, <code>Mol</code></p> <p>RMol is essentially a wrapper around RDKit Mol with tailored functionalities for attaching R groups, etc.</p> <p>:param rmol: when provided, energies and additional metadata is preserved. :type rmol: RMol :param template: Provide the original molecule template     used for this RMol.</p> <p>Methods:</p> <ul> <li> <code>toxicity</code>             \u2013              <p>Assessed various ADMET properties, including</p> </li> <li> <code>generate_conformers</code>             \u2013              <p>Generate conformers using the RDKIT's ETKDG. The generated conformers</p> </li> <li> <code>optimise_in_receptor</code>             \u2013              <p>Enumerate the conformers inside of the receptor by employing</p> </li> <li> <code>sort_conformers</code>             \u2013              <p>For the given molecule and the conformer energies order the energies</p> </li> <li> <code>rep2D</code>             \u2013              <p>Use RDKit and get a 2D diagram.</p> </li> <li> <code>rep3D</code>             \u2013              <p>Use py3Dmol to obtain the 3D view of the molecule.</p> </li> <li> <code>remove_clashing_confs</code>             \u2013              <p>Removing conformations that class with the protein.</p> </li> <li> <code>set_gnina</code>             \u2013              <p>Set the location of the binary file gnina. This could be your own compiled directory,</p> </li> <li> <code>gnina</code>             \u2013              <p>Use GNINA to extract CNNaffinity, which we also recalculate to Kd (nM)</p> </li> <li> <code>to_file</code>             \u2013              <p>Write the molecule and all conformers to file.</p> </li> <li> <code>df</code>             \u2013              <p>Generate a pandas dataframe row for this molecule with SMILES.</p> </li> </ul> Source code in <code>fegrow/package.py</code> <pre><code>def __init__(self, *args, id=None, template=None, **kwargs):\n    super().__init__(*args, **kwargs)\n\n    if isinstance(args[0], RMol) or isinstance(args[0], rdkit.Chem.Mol):\n        self.template = args[0].template if hasattr(args[0], \"template\") else None\n        self.rgroup = args[0].rgroup if hasattr(args[0], \"rgroup\") else None\n        self.opt_energies = (\n            args[0].opt_energies if hasattr(args[0], \"opt_energies\") else None\n        )\n        self.id = args[0].id if hasattr(args[0], \"id\") else None\n    else:\n        self.template = template\n        self.rgroup = None\n        self.opt_energies = None\n        self.id = id\n</code></pre>"},{"location":"api/rmol/#fegrow.RMol.toxicity","title":"toxicity","text":"<pre><code>toxicity()\n</code></pre> <p>Assessed various ADMET properties, including  - Lipinksi rule of 5 properties,  - the presence of unwanted substructures  - problematic functional groups  - synthetic accessibility</p> <p>:return: a row of a dataframe with the descriptors  :rtype: dataframe</p> Source code in <code>fegrow/package.py</code> <pre><code>def toxicity(self):\n    \"\"\"\n    Assessed various ADMET properties, including\n     - Lipinksi rule of 5 properties,\n     - the presence of unwanted substructures\n     - problematic functional groups\n     - synthetic accessibility\n\n     :return: a row of a dataframe with the descriptors\n     :rtype: dataframe\n    \"\"\"\n    df = tox_props(self)\n    # add an index column to the front\n    df.insert(0, \"ID\", self.id)\n    df.set_index(\"ID\", inplace=True)\n\n    # add a column with smiles\n    df = df.assign(Smiles=[Chem.MolToSmiles(self)])\n\n    return df\n</code></pre>"},{"location":"api/rmol/#fegrow.RMol.generate_conformers","title":"generate_conformers","text":"<pre><code>generate_conformers(num_conf: int, minimum_conf_rms: float = 0.5, **kwargs)\n</code></pre> <p>Generate conformers using the RDKIT's ETKDG. The generated conformers are embedded into the template structure. In other words, any atoms that are common with the template structure, should have the same coordinates.</p> <p>:param num_conf: fixme :param minimum_conf_rms: The minimum acceptable difference in the RMS in any new generated conformer.     Conformers that are too similar are discarded. :type minimum_conf_rms: float :param flexible: A list of indices that are common with the template molecule     that should have new coordinates. :type flexible: List[int]</p> Source code in <code>fegrow/package.py</code> <pre><code>def generate_conformers(\n    self, num_conf: int, minimum_conf_rms: float = 0.5, **kwargs\n):\n    \"\"\"\n    Generate conformers using the RDKIT's ETKDG. The generated conformers\n    are embedded into the template structure. In other words,\n    any atoms that are common with the template structure,\n    should have the same coordinates.\n\n    :param num_conf: fixme\n    :param minimum_conf_rms: The minimum acceptable difference in the RMS in any new generated conformer.\n        Conformers that are too similar are discarded.\n    :type minimum_conf_rms: float\n    :param flexible: A list of indices that are common with the template molecule\n        that should have new coordinates.\n    :type flexible: List[int]\n    \"\"\"\n    cons = generate_conformers(self, num_conf, minimum_conf_rms, **kwargs)\n    self.RemoveAllConformers()\n    [self.AddConformer(con, assignId=True) for con in cons.GetConformers()]\n</code></pre>"},{"location":"api/rmol/#fegrow.RMol.optimise_in_receptor","title":"optimise_in_receptor","text":"<pre><code>optimise_in_receptor(*args, **kwargs)\n</code></pre> <p>Enumerate the conformers inside of the receptor by employing ANI2x, a hybrid machine learning / molecular mechanics (ML/MM) approach. ANI2x is neural nework potential for the ligand energetics but works only for the following atoms: H, C, N, O, F, S, Cl.</p> <p>Open Force Field Parsley force field is used for intermolecular interactions with the receptor.</p> <p>:param sigma_scale_factor: is used to scale the Lennard-Jones radii of the atoms. :param relative_permittivity: is used to scale the electrostatic interactions with the protein. :param water_model: can be used to set the force field for any water molecules present in the binding site.</p> Source code in <code>fegrow/package.py</code> <pre><code>def optimise_in_receptor(self, *args, **kwargs):\n    \"\"\"\n    Enumerate the conformers inside of the receptor by employing\n    ANI2x, a hybrid machine learning / molecular mechanics (ML/MM) approach.\n    ANI2x is neural nework potential for the ligand energetics\n    but works only for the following atoms: H, C, N, O, F, S, Cl.\n\n    Open Force Field Parsley force field is used for intermolecular interactions with the receptor.\n\n    :param sigma_scale_factor: is used to scale the Lennard-Jones radii of the atoms.\n    :param relative_permittivity: is used to scale the electrostatic interactions with the protein.\n    :param water_model: can be used to set the force field for any water molecules present in the binding site.\n    \"\"\"\n    if self.GetNumConformers() == 0:\n        print(\"Warning: no conformers so cannot optimise_in_receptor. Ignoring.\")\n        return\n\n    opt_mol, energies = optimise_in_receptor(self, *args, **kwargs)\n    # replace the conformers with the optimised ones\n    self.RemoveAllConformers()\n    [\n        self.AddConformer(conformer, assignId=True)\n        for conformer in opt_mol.GetConformers()\n    ]\n    # save the energies\n    self._save_opt_energies(energies)\n\n    # build a dataframe with the molecules\n    conformer_ids = [c.GetId() for c in self.GetConformers()]\n    df = pandas.DataFrame(\n        {\n            \"ID\": [self.id] * len(energies),\n            \"Conformer\": conformer_ids,\n            \"Energy\": energies,\n        }\n    )\n\n    return df\n</code></pre>"},{"location":"api/rmol/#fegrow.RMol.sort_conformers","title":"sort_conformers","text":"<pre><code>sort_conformers(energy_range=5)\n</code></pre> <p>For the given molecule and the conformer energies order the energies  and only keep any conformers with in the energy range of the  lowest energy conformer.</p> <p>:param energy_range: The energy range (kcal/mol),     above the minimum, for which conformers should be kept.</p> Source code in <code>fegrow/package.py</code> <pre><code>def sort_conformers(self, energy_range=5):\n    \"\"\"\n    For the given molecule and the conformer energies order the energies\n     and only keep any conformers with in the energy range of the\n     lowest energy conformer.\n\n    :param energy_range: The energy range (kcal/mol),\n        above the minimum, for which conformers should be kept.\n    \"\"\"\n    if self.GetNumConformers() == 0:\n        print(\"An rmol doesn't have any conformers. Ignoring.\")\n        return None\n    elif self.opt_energies is None:\n        raise AttributeError(\n            \"Please run the optimise_in_receptor in order to generate the energies first. \"\n        )\n\n    final_mol, final_energies = sort_conformers(\n        self, self.opt_energies, energy_range=energy_range\n    )\n    # overwrite the current confs\n    self.RemoveAllConformers()\n    [\n        self.AddConformer(conformer, assignId=True)\n        for conformer in final_mol.GetConformers()\n    ]\n    self._save_opt_energies(final_energies)\n\n    # build a dataframe with the molecules\n    conformer_ids = [c.GetId() for c in self.GetConformers()]\n    df = pandas.DataFrame(\n        {\n            \"ID\": [self.id] * len(final_energies),\n            \"Conformer\": conformer_ids,\n            \"Energy\": final_energies,\n        }\n    )\n\n    return df\n</code></pre>"},{"location":"api/rmol/#fegrow.RMol.rep2D","title":"rep2D","text":"<pre><code>rep2D(idx=-1, rdkit_mol=False, h=True, **kwargs)\n</code></pre> <p>Use RDKit and get a 2D diagram. Uses Compute2DCoords and Draw.MolToImage function</p> <p>Works with IPython Notebook.</p> <p>:param **kwargs: are passed further to Draw.MolToImage function.</p> Source code in <code>fegrow/package.py</code> <pre><code>def rep2D(self, idx=-1, rdkit_mol=False, h=True, **kwargs):\n    \"\"\"\n    Use RDKit and get a 2D diagram.\n    Uses Compute2DCoords and Draw.MolToImage function\n\n    Works with IPython Notebook.\n\n    :param **kwargs: are passed further to Draw.MolToImage function.\n    \"\"\"\n    numbered = copy.deepcopy(self)\n\n    if not h:\n        numbered = Chem.RemoveHs(numbered)\n\n    numbered.RemoveAllConformers()\n    if idx:\n        for atom in numbered.GetAtoms():\n            atom.SetAtomMapNum(atom.GetIdx())\n    Chem.AllChem.Compute2DCoords(numbered)\n\n    if rdkit_mol:\n        return numbered\n    else:\n        return Draw.MolToImage(numbered, **kwargs)\n</code></pre>"},{"location":"api/rmol/#fegrow.RMol.rep3D","title":"rep3D","text":"<pre><code>rep3D(view=None, prody=None, template=False, confIds: Optional[List[int]] = None)\n</code></pre> <p>Use py3Dmol to obtain the 3D view of the molecule.</p> <p>Works with IPython Notebook.</p> <p>:param view: a view to which add the visualisation. Useful if one wants to 3D view     multiple conformers in one view. :type view: py3Dmol view instance (None) :param prody: A prody protein around which a view 3D can be created :type prody: Prody instance (Default: None) :param template: Whether to visualise the original 3D template as well from which the molecule was made. :type template: bool (False) :param confIds: Select the conformations for display. :type confIds: List[int]</p> Source code in <code>fegrow/package.py</code> <pre><code>def rep3D(\n    self,\n    view=None,\n    prody=None,\n    template=False,\n    confIds: Optional[List[int]] = None,\n):\n    \"\"\"\n    Use py3Dmol to obtain the 3D view of the molecule.\n\n    Works with IPython Notebook.\n\n    :param view: a view to which add the visualisation. Useful if one wants to 3D view\n        multiple conformers in one view.\n    :type view: py3Dmol view instance (None)\n    :param prody: A prody protein around which a view 3D can be created\n    :type prody: Prody instance (Default: None)\n    :param template: Whether to visualise the original 3D template as well from which the molecule was made.\n    :type template: bool (False)\n    :param confIds: Select the conformations for display.\n    :type confIds: List[int]\n    \"\"\"\n    if prody is not None:\n        view = prody_package.proteins.functions.view3D(prody)\n\n    if view is None:\n        view = py3Dmol.view(width=400, height=400, viewergrid=(1, 1))\n\n    for conf in self.GetConformers():\n        # ignore the confIds we've not asked for\n        if confIds is not None and conf.GetId() not in confIds:\n            continue\n\n        mb = Chem.MolToMolBlock(self, confId=conf.GetId())\n        view.addModel(mb, \"lig\")\n\n        # use reverse indexing to reference the just added conformer\n        # http://3dmol.csb.pitt.edu/doc/types.html#AtomSelectionSpec\n        # cmap = plt.get_cmap(\"tab20c\")\n        # hex = to_hex(cmap.colors[i]).split('#')[-1]\n        view.setStyle({\"model\": -1}, {\"stick\": {}})\n\n    if template:\n        mb = Chem.MolToMolBlock(self.template)\n        view.addModel(mb, \"template\")\n        # show as sticks\n        view.setStyle({\"model\": -1}, {\"stick\": {\"color\": \"0xAF10AB\"}})\n\n    # zoom to the last added model\n    view.zoomTo({\"model\": -1})\n    return view\n</code></pre>"},{"location":"api/rmol/#fegrow.RMol.remove_clashing_confs","title":"remove_clashing_confs","text":"<pre><code>remove_clashing_confs(protein: Union[str, PDBFile], min_dst_allowed=1.0)\n</code></pre> <p>Removing conformations that class with the protein. Note that the original conformer should be well docked into the protein, ideally with some space between the area of growth and the protein, so that any growth on the template doesn't automatically cause clashes.</p> <p>:param protein: The protein against which the conformers should be tested. :type protein: filename or the openmm PDBFile instance or prody instance :param min_dst_allowed: If any atom is within this distance in a conformer, the  conformer will be deleted. :type min_dst_allowed: float in Angstroms</p> Source code in <code>fegrow/package.py</code> <pre><code>def remove_clashing_confs(\n    self, protein: Union[str, openmm.app.PDBFile], min_dst_allowed=1.0\n):\n    \"\"\"\n    Removing conformations that class with the protein.\n    Note that the original conformer should be well docked into the protein,\n    ideally with some space between the area of growth and the protein,\n    so that any growth on the template doesn't automatically cause\n    clashes.\n\n    :param protein: The protein against which the conformers should be tested.\n    :type protein: filename or the openmm PDBFile instance or prody instance\n    :param min_dst_allowed: If any atom is within this distance in a conformer, the\n     conformer will be deleted.\n    :type min_dst_allowed: float in Angstroms\n    \"\"\"\n    if type(protein) is str:\n        protein = openmm.app.PDBFile(protein)\n\n    if type(protein) is openmm.app.PDBFile:\n        protein_coords = (\n            protein.getPositions(asNumpy=True)\n            .in_units_of(openmm.unit.angstrom)\n            ._value\n        )\n    else:\n        protein_coords = protein.getCoords()\n\n    rm_counter = 0\n    for conf in list(self.GetConformers()):\n        # for each atom check how far it is from the protein atoms\n        min_dst = 999_999_999  # arbitrary large distance\n\n        for point in conf.GetPositions():\n            shortest = np.min(\n                np.sqrt(np.sum((point - protein_coords) ** 2, axis=1))\n            )\n            min_dst = min(min_dst, shortest)\n\n            if min_dst &lt; min_dst_allowed:\n                self.RemoveConformer(conf.GetId())\n                logger.debug(\n                    f\"Clash with the protein. Removing conformer id: {conf.GetId()}\"\n                )\n                rm_counter += 1\n                break\n    print(f\"Removed {rm_counter} conformers. \")\n\n    # return self for Dask\n    return self\n</code></pre>"},{"location":"api/rmol/#fegrow.RMol.set_gnina","title":"set_gnina  <code>staticmethod</code>","text":"<pre><code>set_gnina(loc)\n</code></pre> <p>Set the location of the binary file gnina. This could be your own compiled directory, or a directory where you'd like it to be downloaded.</p> <p>By default, gnina path is to the working directory (~500MB).</p> <p>:param loc: path to gnina binary file. E.g. /dir/path/gnina. Note that right now gnina should  be a binary file with that specific filename \"gnina\". :type loc: str</p> Source code in <code>fegrow/package.py</code> <pre><code>@staticmethod\ndef set_gnina(loc):\n    \"\"\"\n    Set the location of the binary file gnina. This could be your own compiled directory,\n    or a directory where you'd like it to be downloaded.\n\n    By default, gnina path is to the working directory (~500MB).\n\n    :param loc: path to gnina binary file. E.g. /dir/path/gnina. Note that right now gnina should\n     be a binary file with that specific filename \"gnina\".\n    :type loc: str\n    \"\"\"\n    # set gnina location\n    path = Path(loc)\n    if path.is_file():\n        assert path.name == \"gnina\", 'Please ensure gnina binary is named \"gnina\"'\n        RMol.gnina_dir = path.parent\n    else:\n        raise Exception(\"The path is not the binary file gnina\")\n</code></pre>"},{"location":"api/rmol/#fegrow.RMol.gnina","title":"gnina","text":"<pre><code>gnina(receptor_file, gnina_gpu=False)\n</code></pre> <p>Use GNINA to extract CNNaffinity, which we also recalculate to Kd (nM)</p> <p>LIMITATION: The GNINA binary does not support MAC/Windows.</p> <p>Please cite GNINA accordingly: McNutt, Andrew T., Paul Francoeur, Rishal Aggarwal, Tomohide Masuda, Rocco Meli, Matthew Ragoza, Jocelyn Sunseri, and David Ryan Koes. \"GNINA 1.0: molecular docking with deep learning.\" Journal of cheminformatics 13, no. 1 (2021): 1-20.</p> <p>:param receptor_file: Path to the receptor file. :type receptor_file: str</p> Source code in <code>fegrow/package.py</code> <pre><code>def gnina(self, receptor_file, gnina_gpu=False):\n    \"\"\"\n    Use GNINA to extract CNNaffinity, which we also recalculate to Kd (nM)\n\n    LIMITATION: The GNINA binary does not support MAC/Windows.\n\n    Please cite GNINA accordingly:\n    McNutt, Andrew T., Paul Francoeur, Rishal Aggarwal, Tomohide Masuda, Rocco Meli, Matthew Ragoza,\n    Jocelyn Sunseri, and David Ryan Koes. \"GNINA 1.0: molecular docking with deep learning.\"\n    Journal of cheminformatics 13, no. 1 (2021): 1-20.\n\n    :param receptor_file: Path to the receptor file.\n    :type receptor_file: str\n    \"\"\"\n    RMol._check_download_gnina()\n    gnina_path = os.path.join(RMol.gnina_dir, \"gnina\")\n\n    if not isinstance(receptor_file, str) and not isinstance(receptor_file, Path):\n        raise ValueError(\n            f\"gnina function requires a file path to the receptor. Instead, was given: {type(receptor_file)}\"\n        )\n\n    # get the absolute path\n    receptor = Path(receptor_file)\n    if not receptor.exists():\n        raise ValueError(f'Your receptor \"{receptor_file}\" does not seem to exist.')\n\n    _, CNNaffinities = gnina(self, receptor, gnina_path, gnina_gpu=gnina_gpu)\n\n    return RMol._parse_gnina_cnnaffinities(self, CNNaffinities)\n</code></pre>"},{"location":"api/rmol/#fegrow.RMol.to_file","title":"to_file","text":"<pre><code>to_file(filename: str)\n</code></pre> <p>Write the molecule and all conformers to file.</p> Note <p>The file type is worked out from the name extension by splitting on <code>.</code>.</p> Source code in <code>fegrow/package.py</code> <pre><code>def to_file(self, filename: str):\n    \"\"\"\n    Write the molecule and all conformers to file.\n\n    Note:\n        The file type is worked out from the name extension by splitting on `.`.\n    \"\"\"\n    file_type = Path(filename).suffix.lower()\n\n    writers = {\n        \".mol\": Chem.MolToMolFile,\n        \".sdf\": Chem.SDWriter,\n        \".pdb\": functools.partial(Chem.PDBWriter, flavor=1),\n        \".xyz\": Chem.MolToXYZFile,\n    }\n\n    func = writers.get(file_type, None)\n    if func is None:\n        raise RuntimeError(\n            f\"The file type {file_type} is not support please chose from {writers.keys()}\"\n        )\n\n    if file_type in [\".pdb\", \".sdf\"]:\n        # multi-frame writers\n\n        with writers[file_type](filename) as WRITER:\n            for conformer in self.GetConformers():\n                WRITER.write(self, confId=conformer.GetId())\n        return\n\n    writers[file_type](self, filename)\n</code></pre>"},{"location":"api/rmol/#fegrow.RMol.df","title":"df","text":"<pre><code>df()\n</code></pre> <p>Generate a pandas dataframe row for this molecule with SMILES.</p> <p>:returns: pandas dataframe row.</p> Source code in <code>fegrow/package.py</code> <pre><code>def df(self):\n    \"\"\"\n    Generate a pandas dataframe row for this molecule with SMILES.\n\n    :returns: pandas dataframe row.\n    \"\"\"\n    df = pandas.DataFrame(\n        {\n            \"ID\": [self.id],\n            \"Smiles\": [Chem.MolToSmiles(self)],\n        }\n    )\n    # attach energies if they're present\n    if self.opt_energies:\n        df = df.assign(\n            Energies=\", \".join([str(e) for e in sorted(self.opt_energies)])\n        )\n\n    df.set_index([\"ID\"], inplace=True)\n    return df\n</code></pre>"},{"location":"notebooks/notebook1-basic-tutorial-full/1_basic_tutorial_full/","title":"1: Basic Full Tutorial","text":"<p>Authors: Mateusz K Bieniek, Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, Daniel J. Cole</p> <ul> <li>Add chemical functional group (R-groups) in user-defined positions</li> <li>Output ADMET properties</li> <li>Perform constrained optimisation</li> <li>Score poses</li> <li>Output structures for free energy calculations</li> </ul>"},{"location":"notebooks/notebook1-basic-tutorial-full/1_basic_tutorial_full/#overview","title":"Overview","text":"<p>This notebook demonstrates the simplified <code>FEgrow</code> workflow for generating a new molecule with a common core for a specific binding site, via the addition of a user-defined R-group. </p> <p>This notebook introduces FEgrow conceptually but better tools are introduced in the later notebooks. </p> <p>These de novo ligand is then subjected to ADMET analysis. Valid conformers of the added R-group are enumerated, and optimised in the context of the receptor binding pocket, optionally using hybrid machine learning / molecular mechanics potentials (ML/MM).</p> <p>An ensemble of low energy conformers is generated for each ligand, and scored using the <code>gnina</code> convolutional neural network (CNN). Output structures are saved as <code>pdb</code> files ready for use in free energy calculations.</p> <p>The target for this tutorial is the main protease (Mpro) of SARS-CoV-2, and the core and receptor structures are taken from a recent study by Jorgensen &amp; co-workers.</p> <pre><code>import prody\nfrom rdkit import Chem\n\nimport fegrow\n</code></pre> <pre><code>The history saving thread hit an unexpected error (OperationalError('attempt to write a readonly database')).History will not be written to the database.\n\n\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n</code></pre>"},{"location":"notebooks/notebook1-basic-tutorial-full/1_basic_tutorial_full/#prepare-the-ligand-scaffold","title":"Prepare the ligand scaffold","text":"<pre><code>init_mol = Chem.SDMolSupplier('sarscov2/mini.sdf', removeHs=False)[0]\n\n# get the FEgrow representation of the rdkit Mol\nscaffold = fegrow.RMol(init_mol)\n</code></pre> <p>Show the 2D (with indices) representation of the core. This is used to select the desired growth vector.</p> <pre><code>scaffold.rep2D(idx=True, size=(500, 500))\n</code></pre> <p></p> <p>Using the 2D drawing, select an index for the growth vector. In this case, we are selecting the hydrogen atom labelled H:8</p> <pre><code>attachment_index = 8\n</code></pre>"},{"location":"notebooks/notebook1-basic-tutorial-full/1_basic_tutorial_full/#add-rgroup-to-your-scaffold","title":"Add RGroup to your scaffold","text":"<p>In this tutorial, we show how one can create an R-group from Smiles</p> <pre><code>R_group_methanol = Chem.AddHs(Chem.MolFromSmiles('*CO'))\nR_group_methanol\n</code></pre> <p></p>"},{"location":"notebooks/notebook1-basic-tutorial-full/1_basic_tutorial_full/#build-a-new-molecules","title":"Build a new molecules","text":"<pre><code># we have to specify where the R-group should be attached using the attachment index\nrmol = fegrow.build_molecule(scaffold, R_group_methanol, attachment_index)\n</code></pre> <pre><code>The R-Group lacks initial coordinates. Defaulting to Chem.rdDistGeom.EmbedMolecule.\n[11:23:06] UFFTYPER: Unrecognized atom type: *_ (0)\n</code></pre> <pre><code>rmol\n</code></pre> Smiles Molecule ID None [H]OC([H])([H])c1c([H])nc([H])c([H])c1[H] <pre><code>rmol.rep2D()\n</code></pre> <pre><code>rmol.rep3D()\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x78df756dbb10&gt;\n</code></pre> <p>Once the ligands have been generated, they can be assessed for various ADMET properties, including Lipinksi rule of 5 properties, the presence of unwanted substructures or problematic functional groups, and synthetic accessibility.</p> <pre><code>rmol.toxicity()\n</code></pre> <pre><code>[11:23:06] DEPRECATION WARNING: please use MorganGenerator\n</code></pre> MW HBA HBD LogP Pass_Ro5 has_pains has_unwanted_subs has_prob_fgs synthetic_accessibility Smiles ID None 109.128 2 1 0.574 True False False False 7.299 [H]OC([H])([H])c1c([H])nc([H])c([H])c1[H] <p>A specified number of conformers (<code>num_conf</code>) is generated by using the RDKit ETKDG algorithm. Conformers that are too similar to an existing structure are discarded. Empirically, we have found that <code>num_conf=200</code> gives an exhaustive search, and <code>num_conf=50</code> gives a reasonable, fast search, in most cases.</p> <p>If required, a third argument can be added <code>flexible=[0,1,...]</code>, which provides a list of additional atoms in the core that are allowed to be flexible. This is useful, for example, if growing from a methyl group and you would like the added R-group to freely rotate.</p> <pre><code>rmol.generate_conformers(num_conf=50, \n                          minimum_conf_rms=0.5, \n                          # flexible=[3, 18, 20])\n                        )\n</code></pre> <pre><code>Generated 2 conformers.\n</code></pre>"},{"location":"notebooks/notebook1-basic-tutorial-full/1_basic_tutorial_full/#prepare-the-protein","title":"Prepare the protein","text":"<p>The protein-ligand complex structure is downloaded, and PDBFixer is used to protonate the protein, and perform other simple repair:</p> <pre><code># get the protein-ligand complex structure\n!wget -nc https://files.rcsb.org/download/7L10.pdb\n\n# load the complex with the ligand\nsys = prody.parsePDB('7L10.pdb')\n\n# remove any unwanted molecules\nrec = sys.select('not (nucleic or hetatm or water)')\n\n# save the processed protein\nprody.writePDB('rec.pdb', rec)\n\n# fix the receptor file (missing residues, protonation, etc)\nfegrow.fix_receptor(\"rec.pdb\", \"rec_final.pdb\")\n\n# load back into prody\nrec_final = prody.parsePDB(\"rec_final.pdb\")\n</code></pre> <pre><code>File \u20187L10.pdb\u2019 already there; not retrieving.\n\n\n\n@&gt; 2609 atoms and 1 coordinate set(s) were parsed in 0.03s.\n@&gt; 4638 atoms and 1 coordinate set(s) were parsed in 0.03s.\n</code></pre> <p>View enumerated conformers in complex with protein:</p> <pre><code>rmol.rep3D(prody=rec_final)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x78df6fc1ffd0&gt;\n</code></pre> <p>Any conformers that clash with the protein (any atom-atom distance less than 1 Angstrom), are removed.</p> <pre><code>rmol.remove_clashing_confs(rec_final)\n</code></pre> <pre><code>Removed 0 conformers.\n</code></pre> Smiles Molecule ID None [H]OC([H])([H])c1c([H])nc([H])c([H])c1[H] <pre><code>rmol.rep3D(prody=rec_final)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x78df6fdb7810&gt;\n</code></pre>"},{"location":"notebooks/notebook1-basic-tutorial-full/1_basic_tutorial_full/#optimise-conformers-in-context-of-protein","title":"Optimise conformers in context of protein","text":"<p>The remaining conformers are optimised using hybrid machine learning / molecular mechanics (ML/MM), using the ANI2x neural nework potential for the ligand energetics (as long as it contains only the atoms H, C, N, O, F, S, Cl). Note that the Open Force Field Parsley force field is used for intermolecular interactions with the receptor.</p> <p><code>sigma_scale_factor</code>: is used to scale the Lennard-Jones radii of the atoms.</p> <p><code>relative_permittivity</code>: is used to scale the electrostatic interactions with the protein.</p> <p><code>water_model</code>: can be used to set the force field for any water molecules present in the binding site.</p> <pre><code># opt_mol, energies\nenergies = rmol.optimise_in_receptor(\n    receptor_file=\"rec_final.pdb\", \n    ligand_force_field=\"openff\", \n    use_ani=True,\n    sigma_scale_factor=0.8,\n    relative_permittivity=4,\n    water_model = None,\n    platform_name = 'CPU', # or e.g. 'CUDA'\n)\n</code></pre> <pre><code>/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nusing ani2x\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/aev.py:16: UserWarning: cuaev not installed\n  warnings.warn(\"cuaev not installed\")\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:02&lt;00:00,  1.11s/it]\n</code></pre> <p>The rmol might have no available conformers due to unresolvable steric clashes with the protein. This can be checked using the RDKit's function:</p> <pre><code>rmol.GetNumConformers()\n</code></pre> <pre><code>2\n</code></pre> <p>Optionally, display the final optimised conformers. Note that, unlike classical force fields, ANI allows bond breaking. You may occasionally see ligands with distorted structures and very long bonds, but in our experience these are rarely amongst the low energy structures and can be ignored.</p> <p>Conformers are now sorted by energy, only retaining those within 5 kcal/mol of the lowest energy structure:</p> <pre><code>final_energies = rmol.sort_conformers(energy_range=5)\n</code></pre> <pre><code>rmol.rep3D()\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x78df6a9f9d50&gt;\n</code></pre> <p>Save all of the lowest energy conformers to files and print the sorted energies in kcal/mol (shifted so that the lowest energy conformer is zero).</p> <pre><code>rmol.to_file(f\"1_mini_rmol_best_conformers.pdb\") \n</code></pre> <pre><code>print(final_energies)\n</code></pre> <pre><code>     ID  Conformer  Energy\n0  None          0   0.000\n1  None          1   0.628\n</code></pre> <p>The conformers are scored using the Gnina molecular docking program and convolutional neural network scoring function. [Note that this step is not supported on macOS]. If unavailable, the Gnina executable is downloaded during the first time it is used. The CNNscores may also be converted to predicted Kd (nM) (see column \"Kd\").</p> <pre><code>affinities = rmol.gnina(receptor_file=\"rec_final.pdb\") \naffinities\n</code></pre> ID Conformer CNNaffinity Kd 0 0 0 3.009 978768.5363404725 1 0 1 2.945 1133913.693489917 <p>Predicted binding affinities may be further refined using the structures output by <code>FEgrow</code>, using your favourite free energy calculation engine. See our paper for an example using SOMD to calculate the relative binding free energies of 13 Mpro inhibitors.</p> <pre><code># display units\naffinities.Kd\n</code></pre> <pre><code>0    978768.5363404725\n1    1133913.693489917\nName: Kd, dtype: pint[nanomolar][Float64]\n</code></pre> <pre><code>\n</code></pre>"},{"location":"notebooks/notebook2-mini-tutorial-grow-linker-and-r-group/2_mini_tutorial_grow_linker_rgroup/","title":"2: Mini - Grow Linker and R-Group","text":"<p>Authors: Mateusz K Bieniek, Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, Daniel J. Cole</p>"},{"location":"notebooks/notebook2-mini-tutorial-grow-linker-and-r-group/2_mini_tutorial_grow_linker_rgroup/#overview","title":"Overview","text":"<p>This is a variation of the first tutorial, where in addition to the R-group we also attach a linker. </p> <p>If you're ready to move on to the next stage, please proceed to learning about the fegrow.ChemSpace class. </p> <pre><code>from rdkit import Chem\nimport fegrow\n</code></pre> <pre><code>The history saving thread hit an unexpected error (OperationalError('attempt to write a readonly database')).History will not be written to the database.\n</code></pre>"},{"location":"notebooks/notebook2-mini-tutorial-grow-linker-and-r-group/2_mini_tutorial_grow_linker_rgroup/#prepare-the-ligand-scaffold","title":"Prepare the ligand scaffold","text":"<pre><code>rdkit_mol = Chem.AddHs(Chem.MolFromSmiles('CC1C=CN(CN1C)C'))\n# get the FEgrow representation of the rdkit Mol\nscaffold = fegrow.RMol(rdkit_mol)\nscaffold.rep2D(idx=False, h=False)\n</code></pre> <p>Show the 2D (with indices) representation of the core. This is used to select the desired growth vector.</p> <pre><code>scaffold.rep2D(idx=True, size=(500, 500))\n</code></pre> <p></p> <p>Using the 2D drawing, select an index for the growth vector. In this case, we are selecting the hydrogen atom labelled H:9</p> <pre><code># you can also embed the information in your scaffold to avoid passing around the index\nscaffold.GetAtomWithIdx(9).SetAtomicNum(0)\n</code></pre>"},{"location":"notebooks/notebook2-mini-tutorial-grow-linker-and-r-group/2_mini_tutorial_grow_linker_rgroup/#create-a-linker","title":"Create a linker","text":"<pre><code>linker_rcor = Chem.AddHs(Chem.MolFromSmiles('*CO*'))\n# note we do not clarify which connecting point * should be used first\nlinker_rcor\n</code></pre> <pre><code># let us use O as the first connecting point (lower digit)\nlinker_rcor = Chem.AddHs(Chem.MolFromSmiles('[*:1]CO[*:0]'))\nlinker_rcor\n</code></pre>"},{"location":"notebooks/notebook2-mini-tutorial-grow-linker-and-r-group/2_mini_tutorial_grow_linker_rgroup/#attach-the-linker","title":"Attach the linker","text":"<pre><code># linker behaves like any other \n# we have to specify where the R-group should be attached using the attachment index\nwith_linker = fegrow.build_molecule(scaffold, linker_rcor)\n</code></pre> <pre><code>The R-Group lacks initial coordinates. Defaulting to Chem.rdDistGeom.EmbedMolecule.\n[11:25:18] UFFTYPER: Unrecognized atom type: *_ (0)\n[11:25:18] UFFTYPER: Unrecognized atom type: *_ (3)\n</code></pre> <pre><code># note that the second connecting point * is left for the future R-group\nwith_linker\n</code></pre> Smiles Molecule ID None [H]C1=C([H])C([H])(C([H])([H])OC([H])([H])[*:1... <pre><code># prepare R-group\nR_group_cl = Chem.AddHs(Chem.MolFromSmiles('*CCl'))\nR_group_cl\n</code></pre> <pre><code># use the second connecting point now implicitly\nrmol = fegrow.build_molecule(with_linker, R_group_cl)\n</code></pre> <pre><code>The R-Group lacks initial coordinates. Defaulting to Chem.rdDistGeom.EmbedMolecule.\n[11:25:18] UFFTYPER: Unrecognized atom type: *_ (0)\n</code></pre> <pre><code>rmol\n</code></pre> Smiles Molecule ID None [H]C1=C([H])C([H])(C([H])([H])OC([H])([H])C([H... <p>You can now proceed to the rest of the stages, like the generation of conformers, optimisation, etc. However, please checkout ChemSpace for automatic all of it!</p>"},{"location":"notebooks/notebook2.1-tutorial-single-molecule/2_tutorial_single_mol/","title":"2.1: Single Molecule","text":"<p>Authors: Mateusz K Bieniek, Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, Daniel J. Cole</p> <ul> <li>Add chemical functional groups (R-groups) in user-defined positions</li> <li>Output ADMET properties</li> <li>Perform constrained optimisation</li> <li>Score poses</li> <li>Output structures for free energy calculations</li> </ul>"},{"location":"notebooks/notebook2.1-tutorial-single-molecule/2_tutorial_single_mol/#overview","title":"Overview","text":"<p>This notebook demonstrates the entire <code>FEgrow</code> workflow for generating a series of ligands with a common core for a specific binding site, via the addition of a user-defined set of R-groups. </p> <p>These de novo ligands are then subjected to ADMET analysis. Valid conformers of the added R-groups are enumerated, and optimised in the context of the receptor binding pocket, optionally using hybrid machine learning / molecular mechanics potentials (ML/MM).</p> <p>An ensemble of low energy conformers is generated for each ligand, and scored using the <code>gnina</code> convolutional neural network (CNN). Output structures are saved as <code>pdb</code> files ready for use in free energy calculations.</p> <p>The target for this tutorial is the main protease (Mpro) of SARS-CoV-2, and the core and receptor structures are taken from a recent study by Jorgensen &amp; co-workers.</p> <pre><code>import prody\nfrom rdkit import Chem\n\nimport fegrow\nfrom fegrow import RGroups, Linkers, ChemSpace\n\n# Initialise libraries\nrgroups = RGroups()\nlinkers = Linkers()\n</code></pre> <pre><code>&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n\n\n\nMolGridWidget(grid_id='m2')\n\n\n\nMolGridWidget(grid_id='m1')\n</code></pre>"},{"location":"notebooks/notebook2.1-tutorial-single-molecule/2_tutorial_single_mol/#prepare-the-ligand-template","title":"Prepare the ligand template","text":"<p>The provided core structure <code>lig.pdb</code> has been extracted from a crystal structure of Mpro in complex with compound 4 from the Jorgensen study (PDB: 7L10), and a Cl atom has been removed to allow growth into the S3/S4 pocket. The template structure of the ligand is protonated with Open Babel:</p> <pre><code>!obabel sarscov2/lig.pdb -O sarscov2/coreh.sdf -p 7\n</code></pre> <pre><code>1 molecule converted\n</code></pre> <p>Load the protonated ligand into FEgrow:</p> <pre><code>init_mol = Chem.SDMolSupplier('sarscov2/mini.sdf', removeHs=False)[0]\n\n# get the FEgrow representation of the rdkit Mol\nscaffold = fegrow.RMol(init_mol)\n</code></pre> <p>Show the 2D (with indices) representation of the core. This is used to select the desired growth vector.</p> <pre><code>scaffold.rep2D(idx=True, size=(500, 500))\n</code></pre> <p></p> <p>Using the 2D drawing, select an index for the growth vector. Note that it is currently only possible to grow from hydrogen atom positions. In this case, we are selecting the hydrogen atom labelled H:40 to enable growth into the S3/S4 pocket of Mpro.</p> <pre><code>attachment_index = 8\n</code></pre>"},{"location":"notebooks/notebook2.1-tutorial-single-molecule/2_tutorial_single_mol/#optional-insert-a-linker","title":"Optional: insert a linker","text":"<p>We have added a library of linkers suggested by Ertl et al. If you wish to extend your R groups selection via a linker, select them below. :1 is defined to be attached to the core (there exists a mirror image of each linker i.e. :1 &amp; *:2 swapped).</p> <p>Linkers combinatorially augment chosen R groups, so if you choose 2 linkers and 3 R groups, this will result in 6 molecules being built.</p>"},{"location":"notebooks/notebook2.1-tutorial-single-molecule/2_tutorial_single_mol/#note-if-you-want-to-use-linkers-make-sure-that-you-use-the-correct-function-below-in-cell-11","title":"Note : If you want to use linkers make sure that you use the correct function below, in cell [11].","text":"<pre><code>linkers\n</code></pre> <pre><code>l = linkers[linkers.Name == 'R1CR2'].Mol.item()\nl\n</code></pre> SmileIndex0 ID SMILES[H]C([H])([*:1])[*:2] display_smilesR1CR2 <pre><code># get linkers programmatically\nrcr_linker = linkers[linkers.Name == 'R1CR2'].Mol.item()\nrocr_linker = linkers.Mol[6], # use the linker table index directly, e.g. index 6 is \"R2COR1\"\n\n# or pick linkers from the grid\ngrid_linkers = linkers.get_selected()\n# select only one\n# grid_linker = grid_linkers.pop()\n\n# create one new molecule merged with a linker\nscaffold_with_linker = fegrow.build_molecule(scaffold, rcr_linker, attachment_index)\n\n# visualise:\n# note that the linker leaves the second attachement point prespecified (* character)\nscaffold_with_linker.rep2D(idx=True, size=(500, 500))\n</code></pre> <pre><code>scaffold_with_linker\n</code></pre> Smiles Molecule ID None *C([H])([H])c1c([H])nc([H])c([H])c1[H]"},{"location":"notebooks/notebook2.1-tutorial-single-molecule/2_tutorial_single_mol/#select-rgroups-for-your-template","title":"Select RGroups for your template","text":"<p>R-groups can be selected interactively or programmaticaly.</p> <p>We have provided a set of common R-groups (see <code>fegrow/data/rgroups/library</code>), which can be browsed and selected interactively below.</p> <p>Molecules from the library can alternatively be selected by name, as demonstrated below.</p> <p>Finally, user-defined R-groups may be provided as <code>.mol</code> files. In this case, the hydrogen atom selected for attachment should be replaced by the element symbol R. See the directory <code>manual_rgroups</code> for examples.</p> <pre><code>rgroups\n</code></pre> <pre><code># retrieve the first interactively selected group\ninteractive_rgroups = rgroups.get_selected()\n# interactive_rgroup = interactive_rgroups.pop()\n\n# you can also directly access the built-in dataframe programmatically\nR_group_ethanol = rgroups[rgroups.Name == '*CCO'].Mol.item()\n\n# select the R-group using the index\nR_group_cyclopropane = rgroups.Mol[69] \n\n# use SMILES\nR_group_methanol = Chem.AddHs(Chem.MolFromSmiles('*CO'))\n\n# add your R-groups from files\nR_group_propanol = Chem.MolFromMolFile('manual_rgroups/propan-1-ol-r.mol', removeHs=False)\n</code></pre>"},{"location":"notebooks/notebook2.1-tutorial-single-molecule/2_tutorial_single_mol/#build-a-congeneric-series","title":"Build a congeneric series","text":"<p>Now that the R-groups have been selected, we merge them with the ligand core:</p>"},{"location":"notebooks/notebook2.1-tutorial-single-molecule/2_tutorial_single_mol/#note-use-rmols-fegrowbuild_moleculestemplate_with_linker-selected_rgroups-if-using-a-linker-by-commenting-out-the-first-fegrowbuild_molecules-function","title":"Note : Use <code>rmols = fegrow.build_molecules(template_with_linker, selected_rgroups)</code> if using a linker, by commenting out the first <code>fegrow.build_molecules</code> function.","text":"<pre><code># we can either use the original template (so no linker)\n# in this case we have to specify the attachment index\n# rmol = fegrow.build_molecule(scaffold, R_group_methanol, attachment_index)\n\n# or we can use the template merged with the linker\n# in which case the attachement point is not needed (R* atom is used)\nrmol = fegrow.build_molecule(scaffold_with_linker, R_group_ethanol)\nrmol\n</code></pre> Smiles Molecule ID None [H]OC([H])([H])C([H])([H])C([H])([H])c1c([H])n... <pre><code>rmol\n</code></pre> Smiles Molecule ID None [H]OC([H])([H])C([H])([H])C([H])([H])c1c([H])n... <p>The R-group library can also be viewed as a 2D grid, or individual molecules can be selected for 3D view (note that the conformation of the R-group has not yet been optimised):</p> <pre><code>rmol.rep2D()\n</code></pre> <p></p> <pre><code>rmol.rep3D()\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x797251865b10&gt;\n</code></pre> <p>Once the ligands have been generated, they can be assessed for various ADMET properties, including Lipinksi rule of 5 properties, the presence of unwanted substructures or problematic functional groups, and synthetic accessibility.</p> <pre><code>rmol.toxicity()\n</code></pre> <pre><code>[11:28:55] DEPRECATION WARNING: please use MorganGenerator\n</code></pre> MW HBA HBD LogP Pass_Ro5 has_pains has_unwanted_subs has_prob_fgs synthetic_accessibility Smiles ID None 137.182 2 1 1.007 True False False False 7.71 [H]OC([H])([H])C([H])([H])C([H])([H])c1c([H])n... <p>For each ligand, a specified number of conformers (<code>num_conf</code>) is generated by using the RDKit ETKDG algorithm. Conformers that are too similar to an existing structure are discarded. Empirically, we have found that <code>num_conf=200</code> gives an exhaustive search, and <code>num_conf=50</code> gives a reasonable, fast search, in most cases.</p> <p>If required, a third argument can be added <code>flexible=[0,1,...]</code>, which provides a list of additional atoms in the core that are allowed to be flexible. This is useful, for example, if growing from a methyl group and you would like the added R-group to freely rotate.</p> <pre><code>rmol.generate_conformers(num_conf=50, \n                          minimum_conf_rms=0.5, \n                          # flexible=[3, 18, 20])\n                        )\n</code></pre> <pre><code>Generated 16 conformers.\n</code></pre>"},{"location":"notebooks/notebook2.1-tutorial-single-molecule/2_tutorial_single_mol/#prepare-the-protein","title":"Prepare the protein","text":"<p>The protein-ligand complex structure is downloaded, and PDBFixer is used to protonate the protein, and perform other simple repair:</p> <pre><code># get the protein-ligand complex structure\n!wget -nc https://files.rcsb.org/download/7L10.pdb\n\n# load the complex with the ligand\nsys = prody.parsePDB('7L10.pdb')\n\n# remove any unwanted molecules\nrec = sys.select('not (nucleic or hetatm or water)')\n\n# save the processed protein\nprody.writePDB('rec.pdb', rec)\n\n# fix the receptor file (missing residues, protonation, etc)\nfegrow.fix_receptor(\"rec.pdb\", \"rec_final.pdb\")\n\n# load back into prody\nrec_final = prody.parsePDB(\"rec_final.pdb\")\n</code></pre> <pre><code>File \u20187L10.pdb\u2019 already there; not retrieving.\n\n\n\n@&gt; 2609 atoms and 1 coordinate set(s) were parsed in 0.02s.\n@&gt; 4638 atoms and 1 coordinate set(s) were parsed in 0.03s.\n</code></pre> <p>View enumerated conformers in complex with protein:</p> <pre><code>rmol.rep3D(prody=rec_final)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x79724a4e0b10&gt;\n</code></pre> <p>Any conformers that clash with the protein (any atom-atom distance less than 1 Angstrom), are removed.</p> <pre><code>rmol.remove_clashing_confs(rec_final)\n</code></pre> <pre><code>Removed 7 conformers.\n</code></pre> Smiles Molecule ID None [H]OC([H])([H])C([H])([H])C([H])([H])c1c([H])n... <pre><code>rmol.rep3D(prody=rec_final)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x79724aed9690&gt;\n</code></pre>"},{"location":"notebooks/notebook2.1-tutorial-single-molecule/2_tutorial_single_mol/#optimise-conformers-in-context-of-protein","title":"Optimise conformers in context of protein","text":"<p>The remaining conformers are optimised using hybrid machine learning / molecular mechanics (ML/MM), using the ANI2x neural nework potential for the ligand energetics (as long as it contains only the atoms H, C, N, O, F, S, Cl). Note that the Open Force Field Parsley force field is used for intermolecular interactions with the receptor.</p> <p><code>sigma_scale_factor</code>: is used to scale the Lennard-Jones radii of the atoms.</p> <p><code>relative_permittivity</code>: is used to scale the electrostatic interactions with the protein.</p> <p><code>water_model</code>: can be used to set the force field for any water molecules present in the binding site.</p> <pre><code># opt_mol, energies\nenergies = rmol.optimise_in_receptor(\n    receptor_file=\"rec_final.pdb\", \n    ligand_force_field=\"openff\", \n    use_ani=True,\n    sigma_scale_factor=0.8,\n    relative_permittivity=4,\n    water_model = None,\n    platform_name = 'CPU', # or e.g. 'CUDA'\n)\n</code></pre> <pre><code>/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nusing ani2x\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/aev.py:16: UserWarning: cuaev not installed\n  warnings.warn(\"cuaev not installed\")\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9/9 [00:28&lt;00:00,  3.13s/it]\n</code></pre> <p>The rmol might have no available conformers due to unresolvable steric clashes with the protein. This can be checked using the RDKit's function:</p> <pre><code>rmol.GetNumConformers()\n</code></pre> <pre><code>7\n</code></pre> <p>Optionally, display the final optimised conformers. Note that, unlike classical force fields, ANI allows bond breaking. You may occasionally see ligands with distorted structures and very long bonds, but in our experience these are rarely amongst the low energy structures and can be ignored.</p> <p>Conformers are now sorted by energy, only retaining those within 5 kcal/mol of the lowest energy structure:</p> <pre><code>final_energies = rmol.sort_conformers(energy_range=5)\n</code></pre> <pre><code>rmol.rep3D()\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x797251879590&gt;\n</code></pre> <p>Save all of the lowest energy conformers to files and print the sorted energies in kcal/mol (shifted so that the lowest energy conformer is zero).</p> <pre><code>rmol.to_file(f\"rmol_best_conformers.pdb\") \n</code></pre> <pre><code>print(final_energies)\n</code></pre> <pre><code>     ID  Conformer  Energy\n0  None          0   0.000\n1  None          1   3.274\n2  None          2   4.162\n3  None          3   4.320\n</code></pre> <p>The conformers are scored using the Gnina molecular docking program and convolutional neural network scoring function. [Note that this step is not supported on macOS]. If unavailable, the Gnina executable is downloaded during the first time it is used. The CNNscores may also be converted to predicted Kd (nM) (see column \"Kd\").</p> <pre><code>affinities = rmol.gnina(receptor_file=\"rec_final.pdb\") \naffinities\n</code></pre> ID Conformer CNNaffinity Kd 0 0 0 3.190 645505.578769006 1 0 1 3.183 655918.6808887193 2 0 2 3.256 554549.0938767607 3 0 3 3.193 640722.5365758869 <p>Predicted binding affinities may be further refined using the structures output by <code>FEgrow</code>, using your favourite free energy calculation engine. See our paper for an example using SOMD to calculate the relative binding free energies of 13 Mpro inhibitors.</p> <pre><code># display units\naffinities.Kd\n</code></pre> <pre><code>0     645505.578769006\n1    655918.6808887193\n2    554549.0938767607\n3    640722.5365758869\nName: Kd, dtype: pint[nanomolar][Float64]\n</code></pre> <pre><code>\n</code></pre>"},{"location":"notebooks/notebook3-mini-tutorial-replace-substructure/3_mini_tutorial_replace_substructure/","title":"3: Mini - replace substructure","text":"<p>Authors: Mateusz K Bieniek, Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, Daniel J. Cole</p>"},{"location":"notebooks/notebook3-mini-tutorial-replace-substructure/3_mini_tutorial_replace_substructure/#overview","title":"Overview","text":"<p>In this mini tutorial, we modify the molecule by replacing an -oxazine ring with our own a methyl group.</p> <p>If you're ready to use FEgrow as inteded, please proceed to learning about the fegrow.ChemSpace class. </p> <pre><code>from rdkit import Chem\nimport fegrow\n</code></pre> <pre><code>&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n</code></pre>"},{"location":"notebooks/notebook3-mini-tutorial-replace-substructure/3_mini_tutorial_replace_substructure/#prepare-the-ligand-scaffold","title":"Prepare the ligand scaffold","text":"<pre><code>rdkit_mol = Chem.AddHs(Chem.MolFromSmiles('CN1CC=CN(COC2CNCOC2)C1'))\n# get the FEgrow representation of the rdkit Mol\nmolecule = fegrow.RMol(rdkit_mol)\nmolecule.rep2D(idx=False, h=False)\n</code></pre> <p>2D representation of the core. We want the pyrimidine to stay, and the -oxazine including the oxygen on the chain. </p> <pre><code>molecule.rep2D(idx=True, size=(500, 500))\n</code></pre> <p></p> <p>Using the 2D drawing, select an index for the growth vector. In this case, we are selecting the hydrogen atom labelled O:7</p> <pre><code># you can also embed the information in your scaffold to avoid passing around the index\nmolecule.GetAtomWithIdx(7).SetAtomicNum(0)\n</code></pre> <pre><code># prepare R-group\nR_group_methanol = Chem.AddHs(Chem.MolFromSmiles('*CO'))\n\n# use the second connecting point now implicitly\nrmol = fegrow.build_molecule(molecule, R_group_methanol)\n</code></pre> <pre><code>/home/dresio/code/fegrow/fegrow/builder.py:238: UserWarning: The linking R atom (*) has two or more attachment points (bonds). The molecule might be modified. \n  warnings.warn(\nThe R-Group lacks initial coordinates. Defaulting to Chem.rdDistGeom.EmbedMolecule.\n[11:31:56] UFFTYPER: Unrecognized atom type: *_ (0)\n</code></pre> <pre><code>rmol\n</code></pre> Smiles Molecule ID None [H]OC([H])([H])C([H])([H])N1C([H])=C([H])C([H]... <p>You can now proceed to the rest of the stages, like the generation of conformers, optimisation, etc. However, please checkout ChemSpace for automatic all of it!</p>"},{"location":"notebooks/notebook4-introduce-chemspace/4_tutorial_introduce_chemspace/","title":"4: Introduce Chemspace","text":"<p>Authors: Mateusz K Bieniek, Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, Daniel J. Cole</p>"},{"location":"notebooks/notebook4-introduce-chemspace/4_tutorial_introduce_chemspace/#overview","title":"Overview","text":"<p>Here we introduce the ChemSpace class which:  - automates protocols and takes care of CPU/cluster processing with Dask  - stores data in a dataframe  - employs scikit for active learning</p> <pre><code>import prody\nfrom rdkit import Chem\n\nimport fegrow\nfrom fegrow import RGroups, Linkers, ChemSpace\n\n# initialise\nrgroups = RGroups()\nlinkers = Linkers()\n</code></pre> <pre><code>&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n\n\n\nMolGridWidget(grid_id='m2')\n\n\n\nMolGridWidget(grid_id='m1')\n</code></pre>"},{"location":"notebooks/notebook4-introduce-chemspace/4_tutorial_introduce_chemspace/#prepare-the-ligand-template","title":"Prepare the ligand template","text":"<p>The provided core structure <code>lig.pdb</code> has been extracted from a crystal structure of Mpro in complex with compound 4 from the Jorgensen study (PDB: 7L10), and a Cl atom has been removed to allow growth into the S3/S4 pocket. The template structure of the ligand is protonated with Open Babel:</p> <pre><code>!obabel sarscov2/lig.pdb -O sarscov2/coreh.sdf -p 7\n</code></pre> <pre><code>1 molecule converted\n</code></pre> <p>Load the protonated ligand into FEgrow:</p> <pre><code>init_mol = Chem.SDMolSupplier('sarscov2/mini.sdf', removeHs=False)[0]\n\n# get the FEgrow representation of the rdkit Mol\nscaffold = fegrow.RMol(init_mol)\n</code></pre> <p>Show the 2D (with indices) representation of the core. This is used to select the desired growth vector.</p> <pre><code>scaffold.rep2D(idx=True, size=(500, 500))\n</code></pre> <p></p> <p>Using the 2D drawing, select an index for the growth vector. Note that it is currently only possible to grow from hydrogen atom positions. In this case, we are selecting the hydrogen atom labelled H:8 to enable growth.</p> <pre><code># specify the connecting point\nscaffold.GetAtomWithIdx(8).SetAtomicNum(0)\n</code></pre> <pre><code># create the chemical space\ncs = ChemSpace()\n</code></pre> <pre><code>/home/dresio/code/fegrow/fegrow/package.py:595: UserWarning: ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. Use a Dask cluster with processes as a work around (see the documentation for an example of this workaround) .\n  warnings.warn(\"ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. \"\n\n\nDask can be watched on http://192.168.178.20:8989/status\n\n\nThe R-Group lacks initial coordinates. Defaulting to Chem.rdDistGeom.EmbedMolecule.\n[11:33:21] UFFTYPER: Unrecognized atom type: *_ (0)\n[11:33:21] UFFTYPER: Unrecognized atom type: *_ (3)\nThe R-Group lacks initial coordinates. Defaulting to Chem.rdDistGeom.EmbedMolecule.\n[11:33:21] UFFTYPER: Unrecognized atom type: *_ (0)\n\n\nGenerated 14 conformers. \nGenerated 6 conformers. \nGenerated 23 conformers. \nRemoved 3 conformers. \nRemoved 6 conformers. \nRemoved 15 conformers.\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nusing ani2x\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/aev.py:16: UserWarning: cuaev not installed\n  warnings.warn(\"cuaev not installed\")\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/3 [00:00&lt;?, ?it/s]\n\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  33%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b               | 1/3 [00:03&lt;00:07,  3.55s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:06&lt;00:00,  2.29s/it]\n\n\u001b[Aimising conformer:  12%|\u2588\u2588\u2589                    | 1/8 [00:05&lt;00:35,  5.05s/it]\n\u001b[Aimising conformer:  25%|\u2588\u2588\u2588\u2588\u2588\u258a                 | 2/8 [00:06&lt;00:16,  2.74s/it]\n\u001b[Aimising conformer:  38%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b              | 3/8 [00:06&lt;00:09,  1.85s/it]\n\u001b[Aimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c           | 4/8 [00:08&lt;00:06,  1.54s/it]\n\u001b[Aimising conformer:  62%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d        | 5/8 [00:08&lt;00:03,  1.33s/it]\n\u001b[Aimising conformer:  75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e     | 6/8 [00:10&lt;00:02,  1.34s/it]\n\u001b[Aimising conformer:  88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 7/8 [00:10&lt;00:01,  1.07s/it]\n\nusing ani2x\n\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:11&lt;00:00,  1.50s/it]\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:05&lt;00:00,  1.59it/s]\n</code></pre> <pre><code>cs.add_scaffold(scaffold)\n</code></pre> <pre><code># initially it is empty\ncs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D"},{"location":"notebooks/notebook4-introduce-chemspace/4_tutorial_introduce_chemspace/#select-rgroups-for-your-template","title":"Select RGroups for your template","text":"<p>R-groups can be selected interactively or programmaticaly.</p> <p>We have provided a set of common R-groups (see <code>fegrow/data/rgroups/library</code>), which can be browsed and selected interactively below.</p> <p>Molecules from the library can alternatively be selected by name, as demonstrated below.</p> <p>Finally, user-defined R-groups may be provided as <code>.mol</code> files. In this case, the hydrogen atom selected for attachment should be replaced by the element symbol R. See the directory <code>manual_rgroups</code> for examples.</p> <pre><code>rgroups\n</code></pre> <pre><code># retrieve the interactively selected groups\ninteractive_rgroups = rgroups.get_selected()\n\n# you can also directly access the built-in dataframe programmatically\nR_group_ethanol = rgroups[rgroups.Name == '*CCO'].Mol.item()\n\n# select the R-group using the index\nR_group_cyclopropane = rgroups.Mol[69] \n\n# use SMILES\nR_group_methanol = Chem.AddHs(Chem.MolFromSmiles('*CO'))\n\n# add your R-groups from files\nR_group_propanol = Chem.MolFromMolFile('manual_rgroups/propan-1-ol-r.mol', removeHs=False)\n</code></pre>"},{"location":"notebooks/notebook4-introduce-chemspace/4_tutorial_introduce_chemspace/#expand-your-chemical-space-by-building-on-top-off-your-scaffold","title":"Expand your chemical space by building on top off your scaffold.","text":"<pre><code># Adding R-groups implies that the scaffold should be used. \n# The previously scaffold will be attached automatically. \n\n# or we can use the template merged with the linker\n# in which case the attachement point is not needed (R* atom is used)\ncs.add_rgroups(R_group_ethanol)\ncs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D 0 [H]OC([H])([H])C([H])([H])c1c([H])nc([H])c([H]... &lt;NA&gt; 8 False NaN False NaN <pre><code>linkers\n</code></pre> <pre><code># get linkers programmatically from the library\nrcr_linker = linkers[linkers.Name == 'R1CR2'].Mol.item()\nrocr_linker = linkers.Mol[6], # use the linker table index directly, e.g. index 6 is \"R2COR1\"\n\n# pick linkers from the grid\ngrid_linkers = linkers.get_selected()\n\n# use Smiles\nrcor_linker = Chem.AddHs(Chem.MolFromSmiles('[*:0]CO[*:1]'))\n</code></pre>"},{"location":"notebooks/notebook4-introduce-chemspace/4_tutorial_introduce_chemspace/#_1","title":"4: Introduce Chemspace","text":""},{"location":"notebooks/notebook4-introduce-chemspace/4_tutorial_introduce_chemspace/#add-linkers-to-build-more-structures","title":"Add linkers to build more structures","text":"<pre><code># Adding R-groups implies that the scaffold should be used. \n# The previously scaffold will be attached automatically. \n\n# join a linker with the rgroups\ncs.add_rgroups(rcor_linker, [R_group_methanol, R_group_propanol])\ncs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D 0 [H]OC([H])([H])C([H])([H])c1c([H])nc([H])c([H]... &lt;NA&gt; 8 False NaN False NaN 1 [H]OC([H])([H])OC([H])([H])c1c([H])nc([H])c([H... &lt;NA&gt; 8 False NaN False NaN 2 [H]c1nc([H])c(C([H])([H])OOC([H])([H])C([H])([... &lt;NA&gt; 8 False NaN False NaN <p>The R-group library can also be viewed as a 2D grid, or individual molecules can be selected for 3D view (note that the conformation of the R-group has not yet been optimised):</p> <pre><code>mol = cs[0]\nmol.rep2D()\n</code></pre> <p></p> <pre><code>cs[0].rep3D()\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x785b64e3ce50&gt;\n</code></pre> <p>Once the ligands have been generated, they can be assessed for various ADMET properties, including Lipinksi rule of 5 properties, the presence of unwanted substructures or problematic functional groups, and synthetic accessibility.</p> <pre><code>cs.toxicity()\n</code></pre> <pre><code>[11:33:21] DEPRECATION WARNING: please use MorganGenerator\n[11:33:21] DEPRECATION WARNING: please use MorganGenerator\n[11:33:21] DEPRECATION WARNING: please use MorganGenerator\n</code></pre> MW HBA HBD LogP Pass_Ro5 has_pains has_unwanted_subs has_prob_fgs synthetic_accessibility Smiles 0 123.155 2 1 0.616 True False False False 7.522 [H]OC([H])([H])C([H])([H])c1c([H])nc([H])c([H]... 1 139.154 3 1 0.548 True False True True 7.369 [H]OC([H])([H])OC([H])([H])c1c([H])nc([H])c([H... 2 167.208 3 0 1.940 True False True True 7.715 [H]c1nc([H])c(C([H])([H])OOC([H])([H])C([H])([... <p>For each ligand, a specified number of conformers (<code>num_conf</code>) is generated by using the RDKit ETKDG algorithm. Conformers that are too similar to an existing structure are discarded. Empirically, we have found that <code>num_conf=200</code> gives an exhaustive search, and <code>num_conf=50</code> gives a reasonable, fast search, in most cases.</p> <p>If required, a third argument can be added <code>flexible=[0,1,...]</code>, which provides a list of additional atoms in the core that are allowed to be flexible. This is useful, for example, if growing from a methyl group and you would like the added R-group to freely rotate.</p> <pre><code>cs.generate_conformers(num_conf=50, \n                          minimum_conf_rms=0.5, \n                          # flexible=[3, 18, 20])\n                        )\n</code></pre>"},{"location":"notebooks/notebook4-introduce-chemspace/4_tutorial_introduce_chemspace/#prepare-the-protein","title":"Prepare the protein","text":"<p>The protein-ligand complex structure is downloaded, and PDBFixer is used to protonate the protein, and perform other simple repair:</p> <pre><code># get the protein-ligand complex structure\n!wget -nc https://files.rcsb.org/download/7L10.pdb\n\n# load the complex with the ligand\nsys = prody.parsePDB('7L10.pdb')\n\n# remove any unwanted molecules\nrec = sys.select('not (nucleic or hetatm or water)')\n\n# save the processed protein\nprody.writePDB('rec.pdb', rec)\n\n# fix the receptor file (missing residues, protonation, etc)\nfegrow.fix_receptor(\"rec.pdb\", \"rec_final.pdb\")\n\n# load back into prody\nrec_final = prody.parsePDB(\"rec_final.pdb\")\n</code></pre> <pre><code>File \u20187L10.pdb\u2019 already there; not retrieving.\n\n\n\n@&gt; 2609 atoms and 1 coordinate set(s) were parsed in 0.05s.\n@&gt; 4638 atoms and 1 coordinate set(s) were parsed in 0.03s.\n</code></pre> <p>View enumerated conformers in complex with protein:</p> <pre><code>cs[0].rep3D(prody=rec_final)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x785b42dc5110&gt;\n</code></pre> <p>Any conformers that clash with the protein (any atom-atom distance less than 1 Angstrom), are removed.</p> <pre><code>cs.remove_clashing_confs(rec_final)\n</code></pre> <pre><code>cs[0].rep3D(prody=rec_final)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x785b42d9a950&gt;\n</code></pre>"},{"location":"notebooks/notebook4-introduce-chemspace/4_tutorial_introduce_chemspace/#optimise-conformers-in-context-of-protein","title":"Optimise conformers in context of protein","text":"<p>The remaining conformers are optimised using hybrid machine learning / molecular mechanics (ML/MM), using the ANI2x neural nework potential for the ligand energetics (as long as it contains only the atoms H, C, N, O, F, S, Cl). Note that the Open Force Field Parsley force field is used for intermolecular interactions with the receptor.</p> <p><code>sigma_scale_factor</code>: is used to scale the Lennard-Jones radii of the atoms.</p> <p><code>relative_permittivity</code>: is used to scale the electrostatic interactions with the protein.</p> <p><code>water_model</code>: can be used to set the force field for any water molecules present in the binding site.</p> <pre><code># opt_mol, energies\nenergies = cs.optimise_in_receptor(\n    receptor_file=\"rec_final.pdb\", \n    ligand_force_field=\"openff\", \n    use_ani=True,\n    sigma_scale_factor=0.8,\n    relative_permittivity=4,\n    water_model = None,\n    platform_name = 'CPU', # or e.g. 'CUDA'\n)\n</code></pre> <p>Any of the rmols that have no available conformers (due to unresolvable steric clashes with the protein) can be discarded using the <code>.discard_missing()</code> function. This function also returns a list of the indices that were removed, which can be helpful when carrying out data analysis.</p> <pre><code>missing_ids = cs.discard_missing()\n</code></pre> <p>Optionally, display the final optimised conformers. Note that, unlike classical force fields, ANI allows bond breaking. You may occasionally see ligands with distorted structures and very long bonds, but in our experience these are rarely amongst the low energy structures and can be ignored.</p> <p>Conformers are now sorted by energy, only retaining those within 5 kcal/mol of the lowest energy structure:</p> <pre><code>final_energies = cs.sort_conformers(energy_range=5)\n</code></pre> <pre><code>RMol index 0\nRMol index 1\nRMol index 2\n</code></pre> <pre><code>cs[0].rep3D()\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x785b1f9ed390&gt;\n</code></pre> <p>Save all of the lowest energy conformers to files and print the sorted energies in kcal/mol (shifted so that the lowest energy conformer is zero).</p> <pre><code>cs.to_sdf(\"optimised_molecules.sdf\")\ncs[0].to_file(\"best_conformers0.pdb\") \n</code></pre> <pre><code>print(final_energies)\n</code></pre> <pre><code>               Energy\nID  Conformer        \nNaN 0           0.000\n    1           0.014\n    2           2.231\n    0           0.000\n    1           0.985\n    2           2.810\n    3           2.931\n    0           0.000\n    1           0.129\n    2           0.455\n    3           2.351\n    4           2.497\n    5           2.676\n    6           3.266\n</code></pre> <p>The conformers are scored using the Gnina molecular docking program and convolutional neural network scoring function. [Note that this step is not supported on macOS]. If unavailable, the Gnina executable is downloaded during the first time it is used. The CNNscores may also be converted to predicted Kd (nM) (see column \"Kd\").</p> <pre><code>affinities = cs.gnina(receptor_file=\"rec_final.pdb\") \naffinities\n</code></pre> CNNaffinity Kd ID Conformer 0 0 3.165 684258.1832942407 1 3.134 734243.3130889146 2 3.064 862740.1309222322 1 0 2.950 1121656.816578837 1 2.980 1047948.6439058614 2 3.063 865764.9506603737 3 2.944 1136920.2450490897 2 0 3.222 599777.2657145987 1 3.198 634278.5139306292 2 3.217 607351.3483774511 3 3.271 535685.634451859 4 3.285 519254.1784516523 5 3.293 509764.98369178106 6 3.335 462178.7780293703 <p>Predicted binding affinities may be further refined using the structures output by <code>FEgrow</code>, using your favourite free energy calculation engine. See our paper for an example using SOMD to calculate the relative binding free energies of 13 Mpro inhibitors.</p> <pre><code># display units\naffinities.Kd\n</code></pre> <pre><code>ID  Conformer\n0   0             684258.1832942407\n    1             734243.3130889146\n    2             862740.1309222322\n1   0             1121656.816578837\n    1            1047948.6439058614\n    2             865764.9506603737\n    3            1136920.2450490897\n2   0             599777.2657145987\n    1             634278.5139306292\n    2             607351.3483774511\n    3              535685.634451859\n    4             519254.1784516523\n    5            509764.98369178106\n    6             462178.7780293703\nName: Kd, dtype: pint[nanomolar][Float64]\n</code></pre> <pre><code>\n</code></pre>"},{"location":"notebooks/notebook5-chemspace-streamlined/5_tutorial_chemspace_streamlined/","title":"5: Chemspace streamlined","text":"<p>Authors: Mateusz K Bieniek, Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, Daniel J. Cole</p>"},{"location":"notebooks/notebook5-chemspace-streamlined/5_tutorial_chemspace_streamlined/#overview","title":"Overview","text":"<p>Building and scoring molecules can be further streamlined by employing our established protocol. Here we show how to quickly build a library and score the entire library. </p> <pre><code>import prody\nfrom rdkit import Chem\n\nimport fegrow\nfrom fegrow import ChemSpace, RGroups, Linkers\n\nrgroups = RGroups()\nlinkers = Linkers()\n</code></pre> <pre><code>&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n\n\n\nMolGridWidget(grid_id='m2')\n\n\n\nMolGridWidget(grid_id='m1')\n</code></pre>"},{"location":"notebooks/notebook5-chemspace-streamlined/5_tutorial_chemspace_streamlined/#prepare-the-ligand-template","title":"Prepare the ligand template","text":"<p>The provided core structure <code>lig.pdb</code> has been extracted from a crystal structure of Mpro in complex with compound 4 from the Jorgensen study (PDB: 7L10), and a Cl atom has been removed to allow growth into the S3/S4 pocket. The template structure of the ligand is protonated with Open Babel:</p> <pre><code>init_mol = Chem.SDMolSupplier('sarscov2/mini.sdf', removeHs=False)[0]\n\n# get the FEgrow representation of the rdkit Mol\nscaffold = fegrow.RMol(init_mol)\n</code></pre> <pre><code># Show the 2D (with indices) representation of the core. This is used to select the desired growth vector.\nscaffold.rep2D(idx=True, size=(500, 500))\n</code></pre> <p></p> <p>Using the 2D drawing, select an index for the growth vector. Note that it is currently only possible to grow from hydrogen atom positions. In this case, we are selecting the hydrogen atom labelled H:40 to enable growth into the S3/S4 pocket of Mpro.</p> <pre><code># specify the connecting point\nscaffold.GetAtomWithIdx(8).SetAtomicNum(0)\n</code></pre> <pre><code># create the chemical space\ncs = ChemSpace()\n</code></pre> <pre><code>/home/dresio/code/fegrow/fegrow/package.py:595: UserWarning: ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. Use a Dask cluster with processes as a work around (see the documentation for an example of this workaround) .\n  warnings.warn(\"ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. \"\n\n\nDask can be watched on http://192.168.178.20:8989/status\nGenerated 2 conformers. \nGenerated 1 conformers. \nGenerated 1 conformers. \nGenerated 8 conformers. \nGenerated 2 conformers. \nGenerated 4 conformers. \nRemoved 0 conformers. \nRemoved 0 conformers. \nRemoved 0 conformers. \nRemoved 1 conformers. \nRemoved 1 conformers. \nRemoved 3 conformers.\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nusing ani2x\nusing ani2x\nusing ani2x\nusing ani2x\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/aev.py:16: UserWarning: cuaev not installed\n  warnings.warn(\"cuaev not installed\")\n\n\nusing ani2x\nusing ani2x\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/1 [00:00&lt;?, ?it/s]\n\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:01&lt;00:00,  1.66s/it]\nOptimising conformer:   0%|                               | 0/5 [00:00&lt;?, ?it/s]\n\u001b[Aimising conformer:   0%|                               | 0/2 [00:00&lt;?, ?it/s]\n\n\n\u001b[A\u001b[A\u001b[Ag conformer:   0%|                               | 0/1 [00:00&lt;?, ?it/s]\n\n\u001b[A\u001b[Asing conformer:   0%|                               | 0/3 [00:00&lt;?, ?it/s]\n\n\n\nOptimising conformer:  20%|\u2588\u2588\u2588\u2588\u258c                  | 1/5 [00:05&lt;00:23,  5.84s/it]\n\u001b[Aimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c           | 1/2 [00:05&lt;00:05,  5.61s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:07&lt;00:00,  3.62s/it]\nOptimising conformer:  40%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f             | 2/5 [00:08&lt;00:12,  4.18s/it]\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:08&lt;00:00,  8.07s/it]\n\n\nOptimising conformer:  60%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a         | 3/5 [00:12&lt;00:08,  4.13s/it]\n\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:07&lt;00:00,  7.59s/it]\nOptimising conformer:  80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d    | 4/5 [00:14&lt;00:03,  3.31s/it]\n\n\u001b[A\u001b[Asing conformer:  67%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e       | 2/3 [00:11&lt;00:04,  4.93s/it]\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:12&lt;00:00,  4.18s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:16&lt;00:00,  3.37s/it]\n</code></pre> <pre><code>cs.add_scaffold(scaffold)\n</code></pre>"},{"location":"notebooks/notebook5-chemspace-streamlined/5_tutorial_chemspace_streamlined/#build-a-quick-library","title":"Build a quick library","text":"<pre><code># building molecules by attaching the most frequently used 5 R-groups\ncs.add_rgroups(rgroups.Mol[:3].to_list())\n\n# build more molecules by combining the linkers and R-groups\ncs.add_rgroups(linkers.Mol[:3].to_list(), \n               rgroups.Mol[:3].to_list())\ncs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D 0 [H]Oc1c([H])nc([H])c([H])c1[H] &lt;NA&gt; 8 False NaN False NaN 1 [H]c1nc([H])c(OC([H])([H])[H])c([H])c1[H] &lt;NA&gt; 8 False NaN False NaN 2 [H]c1nc([H])c(N([H])[H])c([H])c1[H] &lt;NA&gt; 8 False NaN False NaN 3 [H]OC([H])([H])c1c([H])nc([H])c([H])c1[H] &lt;NA&gt; 8 False NaN False NaN 4 [H]c1nc([H])c(C(=O)N([H])OC([H])([H])[H])c([H]... &lt;NA&gt; 8 False NaN False NaN 5 [H]c1nc([H])c(N([H])C(=O)N([H])[H])c([H])c1[H] &lt;NA&gt; 8 False NaN False NaN"},{"location":"notebooks/notebook5-chemspace-streamlined/5_tutorial_chemspace_streamlined/#prepare-the-protein","title":"Prepare the protein","text":"<p>The protein-ligand complex structure is downloaded, and PDBFixer is used to protonate the protein, and perform other simple repair:</p> <pre><code># get the protein-ligand complex structure\n!wget -nc https://files.rcsb.org/download/7L10.pdb\n\n# load the complex with the ligand\nsys = prody.parsePDB('7L10.pdb')\n\n# remove any unwanted molecules\nrec = sys.select('not (nucleic or hetatm or water)')\n\n# save the processed protein\nprody.writePDB('rec.pdb', rec)\n\n# fix the receptor file (missing residues, protonation, etc)\nfegrow.fix_receptor(\"rec.pdb\", \"rec_final.pdb\")\n\n# load back into prody\nrec_final = prody.parsePDB(\"rec_final.pdb\")\n</code></pre> <pre><code>File \u20187L10.pdb\u2019 already there; not retrieving.\n\n\n\n@&gt; 2609 atoms and 1 coordinate set(s) were parsed in 0.02s.\n@&gt; 4638 atoms and 1 coordinate set(s) were parsed in 0.03s.\n</code></pre> <pre><code># make your chemical space aware of your receptor (important for the next step! )\ncs.add_protein(\"rec_final.pdb\")\n</code></pre> <pre><code># build and score the entire chemical space\ncs.evaluate()\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id 0 [H]Oc1c([H])nc([H])c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e01704c8d60&gt; 3.215 8 True True False NaN 1 [H]c1nc([H])c(OC([H])([H])[H])c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e01704c9b70&gt; 3.231 8 True True False NaN 2 [H]c1nc([H])c(N([H])[H])c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e0170790ae0&gt; 3.188 8 True True False NaN 3 [H]OC([H])([H])c1c([H])nc([H])c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e01704cab10&gt; 3.225 8 True True False NaN 4 [H]c1nc([H])c(C(=O)N([H])OC([H])([H])[H])c([H]... &lt;fegrow.package.RMol object at 0x7e01707918f0&gt; 3.39 8 True True False NaN 5 [H]c1nc([H])c(N([H])C(=O)N([H])[H])c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e01cd52d800&gt; 3.551 8 True True False NaN <pre><code># verify that the score has been computed\ncs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D 0 [H]Oc1c([H])nc([H])c([H])c1[H] 3.215 8 True True False NaN 1 [H]c1nc([H])c(OC([H])([H])[H])c([H])c1[H] 3.231 8 True True False NaN 2 [H]c1nc([H])c(N([H])[H])c([H])c1[H] 3.188 8 True True False NaN 3 [H]OC([H])([H])c1c([H])nc([H])c([H])c1[H] 3.225 8 True True False NaN 4 [H]c1nc([H])c(C(=O)N([H])OC([H])([H])[H])c([H]... 3.39 8 True True False NaN 5 [H]c1nc([H])c(N([H])C(=O)N([H])[H])c([H])c1[H] 3.551 8 True True False NaN <pre><code># access the Pandas dataframe directly \ncs.df\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id 0 [H]Oc1c([H])nc([H])c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e01704c8d60&gt; 3.215 8 True True False NaN 1 [H]c1nc([H])c(OC([H])([H])[H])c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e01704c9b70&gt; 3.231 8 True True False NaN 2 [H]c1nc([H])c(N([H])[H])c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e0170790ae0&gt; 3.188 8 True True False NaN 3 [H]OC([H])([H])c1c([H])nc([H])c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e01704cab10&gt; 3.225 8 True True False NaN 4 [H]c1nc([H])c(C(=O)N([H])OC([H])([H])[H])c([H]... &lt;fegrow.package.RMol object at 0x7e01707918f0&gt; 3.39 8 True True False NaN 5 [H]c1nc([H])c(N([H])C(=O)N([H])[H])c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e01cd52d800&gt; 3.551 8 True True False NaN <pre><code># you can save the entire ChemSpace into an .SDF file, which can be used to recover ChemSpace\ncs.to_sdf(\"cs_optimised_molecules.sdf\")\n\n# or access the molecules directly\ncs[0].to_file(\"best_conformers0.pdb\") \n</code></pre> <pre><code># recreate the chemical space\ncs = ChemSpace.from_sdf(\"cs_optimised_molecules.sdf\")\n</code></pre> <pre><code>Dask can be watched on http://192.168.178.20:33405/status\n\n\n/home/dresio/code/fegrow/fegrow/package.py:595: UserWarning: ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. Use a Dask cluster with processes as a work around (see the documentation for an example of this workaround) .\n  warnings.warn(\"ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. \"\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/distributed/node.py:187: UserWarning: Port 8989 is already in use.\nPerhaps you already have a cluster running?\nHosting the HTTP server on port 33405 instead\n  warnings.warn(\n</code></pre> <pre><code># search the Enamine database for the best 3 scoring molecules in your chemical space \n# and enrich your chemical space by adding them to the chemical space\n# (relies on https://sw.docking.org/)\n# cs.add_enamine_molecules(3)\n</code></pre>"},{"location":"notebooks/notebook6-chemspace-smiles/6_chemspace_smiles/","title":"6: Chemspace with SMILES","text":"<p>Authors: Mateusz K Bieniek, Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, Daniel J. Cole</p>"},{"location":"notebooks/notebook6-chemspace-smiles/6_chemspace_smiles/#overview","title":"Overview","text":"<p>Building and scoring molecules can be further streamlined by employing our established protocol. Here we show how to quickly build a library and score the entire library. </p> <pre><code>import pandas as pd\nimport prody\nfrom rdkit import Chem\n\nimport fegrow\nfrom fegrow import ChemSpace\n\nfrom fegrow.testing import core_5R83_path, rec_5R83_path, data_5R83_path\n</code></pre> <pre><code>&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n</code></pre>"},{"location":"notebooks/notebook6-chemspace-smiles/6_chemspace_smiles/#prepare-the-ligand-template","title":"Prepare the ligand template","text":"<pre><code>scaffold = Chem.SDMolSupplier(core_5R83_path)[0]\n</code></pre> <p>As we are using already prepared Smiles that have the scaffold as a substructure, it is not needed to set any growing vector. </p>      Ensure that your code is in __name__ == \"__main__\" when creating a cluster in your scripts,     particularly when using processes=True. Although jupyter notebook works fine.        When using ANI=True for processing the Dask cluster has to use processes because ANI is currently not threadsafe. Thus we create here a LocalCluster and ask ChemSpace to use it.   <pre><code>from dask.distributed import LocalCluster\nlc = LocalCluster(processes=True, n_workers=None, threads_per_worker=1)\n</code></pre> <pre><code>2025-03-07 11:50:46,892 - distributed.nanny - WARNING - Restarting worker\n</code></pre> <pre><code># create the chemical space\ncs = ChemSpace(dask_cluster=lc)\n</code></pre> <pre><code>Dask can be watched on http://127.0.0.1:8787/status\n</code></pre> <pre><code># we're not growing the scaffold, we're superimposing bigger molecules on it\ncs.add_scaffold(scaffold)\ncs.add_protein(rec_5R83_path)\n</code></pre> <pre><code>/home/dresio/code/fegrow/fegrow/package.py:799: UserWarning: The template does not have an attachement (Atoms with index 0, or in case of Smiles the * character. )\n  warnings.warn(\"The template does not have an attachement (Atoms with index 0, \"\n</code></pre> <pre><code># load 50k smiles dataset from the study\nsmiles = pd.read_csv(data_5R83_path).Smiles.to_list()\n\n# for testing, sort by size and pick small\nsmiles.sort(key=len)\n# take 5 smallest smiles\nsmiles = smiles[:5]\n</code></pre> <pre><code># here we add Smiles which should already have been matched\n# to the scaffold (rdkit Mol.HasSubstructureMatch)\ncs.add_smiles(smiles, protonate=False)\ncs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D 0 [H]c1nc([H])c(SF)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN 1 [H]c1nc([H])c(SI)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN 2 [H]c1nc([H])c(SCl)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN 3 [H]c1nc([H])c(SBr)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN 4 [H]c1nc([H])c(C#CF)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN <pre><code>cs.evaluate()\n</code></pre> <pre><code>&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nGenerated 2 conformers. \nRemoved 0 conformers. \nUsing force field\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00&lt;00:00,  7.45it/s]\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/aev.py:16: UserWarning: cuaev not installed\n  warnings.warn(\"cuaev not installed\")\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/aev.py:16: UserWarning: cuaev not installed\n  warnings.warn(\"cuaev not installed\")\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/aev.py:16: UserWarning: cuaev not installed\n  warnings.warn(\"cuaev not installed\")\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\nGenerated 2 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/2 [00:00&lt;?, ?it/s]\n\nGenerated 2 conformers. \nRemoved 0 conformers. \nUsing force field\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00&lt;00:00,  9.99it/s]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:02&lt;00:00,  1.07s/it]\n\n\nGenerated 2 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:02&lt;00:00,  1.19s/it]\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/aev.py:16: UserWarning: cuaev not installed\n  warnings.warn(\"cuaev not installed\")\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\nGenerated 1 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:01&lt;00:00,  1.29s/it]\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id 0 [H]c1nc([H])c(SF)c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e17cc670f90&gt; 3.752 &lt;NA&gt; True True False NaN 1 [H]c1nc([H])c(SI)c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e17cc673a60&gt; 3.933 &lt;NA&gt; True True False NaN 2 [H]c1nc([H])c(SCl)c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e1798140860&gt; 3.708 &lt;NA&gt; True True False NaN 3 [H]c1nc([H])c(SBr)c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e1798140950&gt; 3.89 &lt;NA&gt; True True False NaN 4 [H]c1nc([H])c(C#CF)c([H])c1[H] &lt;fegrow.package.RMol object at 0x7e1798141210&gt; 3.478 &lt;NA&gt; True True False NaN <pre><code>cs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D 0 [H]c1nc([H])c(SF)c([H])c1[H] 3.752 &lt;NA&gt; True True False NaN 1 [H]c1nc([H])c(SI)c([H])c1[H] 3.933 &lt;NA&gt; True True False NaN 2 [H]c1nc([H])c(SCl)c([H])c1[H] 3.708 &lt;NA&gt; True True False NaN 3 [H]c1nc([H])c(SBr)c([H])c1[H] 3.89 &lt;NA&gt; True True False NaN 4 [H]c1nc([H])c(C#CF)c([H])c1[H] 3.478 &lt;NA&gt; True True False NaN <pre><code>\n</code></pre>"},{"location":"notebooks/notebook7-al-enamine/7_active_learning_enamine/","title":"7: Active Learning and Enamine","text":"<p>Authors: Mateusz K Bieniek, Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, Daniel J. Cole</p>"},{"location":"notebooks/notebook7-al-enamine/7_active_learning_enamine/#overview","title":"Overview","text":"<p>Configure the Active Learning</p> <pre><code>import pandas as pd\nimport prody\nfrom rdkit import Chem\n\nimport fegrow\nfrom fegrow import ChemSpace\n\nfrom fegrow.testing import core_5R83_path, smiles_5R83_path, rec_5R83_path\n</code></pre> <pre><code>&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterHierarchyMatcher&gt; already registered; second conversion method ignored.\n&lt;frozen importlib._bootstrap&gt;:241: RuntimeWarning: to-Python converter for boost::shared_ptr&lt;RDKit::FilterCatalogEntry&gt; already registered; second conversion method ignored.\n</code></pre> <pre><code># create the chemical space\ncs = ChemSpace()\n# we're not growing the scaffold, we're superimposing bigger molecules on it\ncs.add_scaffold(Chem.SDMolSupplier(core_5R83_path)[0])\ncs.add_protein(rec_5R83_path)\n</code></pre> <pre><code>/home/dresio/code/fegrow/fegrow/package.py:595: UserWarning: ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. Use a Dask cluster with processes as a work around (see the documentation for an example of this workaround) .\n  warnings.warn(\"ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. \"\n\n\nDask can be watched on http://192.168.178.20:8989/status\n\n\n/home/dresio/code/fegrow/fegrow/package.py:799: UserWarning: The template does not have an attachement (Atoms with index 0, or in case of Smiles the * character. )\n  warnings.warn(\"The template does not have an attachement (Atoms with index 0, \"\n\n\nGenerated 7 conformers. \nGenerated 5 conformers. \nGenerated 12 conformers. \nRemoved 0 conformers. \nRemoved 0 conformers. \nRemoved 0 conformers.\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nUsing force field\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7/7 [00:01&lt;00:00,  6.48it/s]\n\n\nUsing force field\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 10.19it/s]\n\n\nUsing force field\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 12/12 [00:02&lt;00:00,  5.38it/s]\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n[13:17:40] DEPRECATION WARNING: please use MorganGenerator\n\n\nGenerated 2 conformers. \nGenerated 5 conformers. \nGenerated 5 conformers. \nRemoved 0 conformers.\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nRemoved 0 conformers. \nRemoved 0 conformers.\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nUsing force field\n\n\nOptimising conformer:  20%|\u2588\u2588\u2588\u2588\u258c                  | 1/5 [00:00&lt;00:00,  5.66it/s]\n\nusing ani2x\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:01&lt;00:00,  3.49it/s]\n\n\nusing ani2x\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/aev.py:16: UserWarning: cuaev not installed\n  warnings.warn(\"cuaev not installed\")\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/5 [00:00&lt;?, ?it/s]\nOptimising conformer:  40%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f             | 2/5 [00:06&lt;00:08,  2.97s/it]\n\u001b[Aimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c           | 1/2 [00:04&lt;00:04,  4.56s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:05&lt;00:00,  2.95s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:10&lt;00:00,  2.06s/it]\n\n\nGenerated 2 conformers. \nGenerated 2 conformers. \nGenerated 2 conformers. \nRemoved 0 conformers. \nRemoved 0 conformers. \nRemoved 0 conformers.\n\n\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nUsing force field\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00&lt;00:00,  6.47it/s]\n\n\nUsing force field\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00&lt;00:00,  9.18it/s]\n\n\nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow-onechannel/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:02&lt;00:00,  1.06s/it]\n</code></pre> <pre><code># turn on the caching in RAM (optional)\ncs.set_dask_caching()\n</code></pre> <pre><code># load 50k Smiles\nsmiles = pd.read_csv(smiles_5R83_path).Smiles.to_list()\n\n# for testing, sort by size and pick small\nsmiles.sort(key=len)\n# take 200 smallest smiles\nsmiles = smiles[:200]\n\n# here we add Smiles which should already have been matched\n# to the scaffold (rdkit Mol.HasSubstructureMatch)\ncs.add_smiles(smiles)\n</code></pre> <pre><code>cs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D 0 [H]c1nc([H])c(SF)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN 1 [H]c1nc([H])c(SI)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN 2 [H]c1nc([H])c(SCl)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN 3 [H]c1nc([H])c(SBr)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN 4 [H]c1nc([H])c(C#CF)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN ... ... ... ... ... ... ... ... ... 195 [H]c1nc([H])c(-n2nnc(F)c2[H])c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN 196 [H]c1nc([H])c(-c2nnn(F)c2[H])c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN 197 [H]c1nc([H])c(C([H])([H])C#N)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN 198 [H]c1nc([H])c(C(=O)N([H])C#N)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN 199 [H]c1nc([H])c(N([H])C(=O)C#N)c([H])c1[H] &lt;NA&gt; &lt;NA&gt; False NaN False NaN <p>200 rows \u00d7 8 columns</p>"},{"location":"notebooks/notebook7-al-enamine/7_active_learning_enamine/#active-learning","title":"Active Learning","text":"<pre><code># There is nothing to train the model on, so initially \"first_random\" is used by default\nrandom1 = cs.active_learning(3, first_random=True)\nrandom2 = cs.active_learning(3, first_random=True)\n\n# note the different indices selected (unless you're lucky!)\nprint(random1.index.to_list(), random2.index.to_list())\n</code></pre> <pre><code>[149, 49, 151] [160, 112, 153]\n\n\n/home/dresio/code/fegrow/fegrow/package.py:1284: UserWarning: Selecting randomly the first samples to be studied (no score data yet). \n  warnings.warn(\"Selecting randomly the first samples to be studied (no score data yet). \")\n</code></pre> <pre><code># now evaluate the first selection\nrandom1_results = cs.evaluate(random1, ani=False)\n</code></pre> <pre><code># check the scores, note that they were updated in the master dataframe too\nrandom1_results\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id 149 [H]c1nc([H])c(OC([H])([H])F)c([H])c1[H] &lt;fegrow.package.RMol object at 0x72731d573f10&gt; 3.283 &lt;NA&gt; True True False NaN 49 [H]c1nc([H])c(OC(F)(F)F)c([H])c1[H] &lt;fegrow.package.RMol object at 0x72731d573600&gt; 3.291 &lt;NA&gt; True True False NaN 151 [H]c1nc([H])c(C([H])([H])SF)c([H])c1[H] &lt;fegrow.package.RMol object at 0x72731d54ee80&gt; 3.856 &lt;NA&gt; True True False NaN <pre><code># by default Gaussian Process with Greedy approach is used\n# note that this time \ngreedy1 = cs.active_learning(3)\ngreedy2 = cs.active_learning(3)\nprint(greedy1.index.to_list(), greedy2.index.to_list())\n</code></pre> <pre><code>[113, 168, 191] [113, 168, 191]\n</code></pre> <pre><code># learn in cycles\nfor cycle in range(2):\n    greedy = cs.active_learning(3)\n    greedy_results = cs.evaluate(greedy)\n\n    # save the new results\n    greedy_results.to_csv(f'notebook6_iteration{cycle}_results.csv')\n\n# save the entire chemical space with all the results\ncs.to_sdf('notebook6_chemspace.sdf')\n</code></pre> <pre><code>computed = cs.df[~cs.df.score.isna()]\nprint('Computed cases in total: ', len(computed))\n</code></pre> <pre><code>Computed cases in total:  9\n</code></pre> <pre><code>from fegrow.al import Model, Query\n</code></pre> <pre><code># This is the default configuration\ncs.model = Model.gaussian_process()\ncs.query = Query.Greedy()\n\ncs.active_learning(3)\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id regression 166 [H]c1nc([H])c(OC([H])([H])I)c([H])c1[H] &lt;rdkit.Chem.rdchem.Mol object at 0x72731c1db4c0&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 2.718 197 [H]c1nc([H])c(C([H])([H])C#N)c([H])c1[H] &lt;rdkit.Chem.rdchem.Mol object at 0x72731d552c70&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 2.633 189 [H]c1nc([H])c(OC([H])([H])Cl)c([H])c1[H] &lt;rdkit.Chem.rdchem.Mol object at 0x72731c1dbed0&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 2.704 <pre><code>cs.query = Query.UCB(beta=10)\ncs.active_learning(3)\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id regression 33 [H]C#CSc1c([H])nc([H])c([H])c1[H] &lt;rdkit.Chem.rdchem.Mol object at 0x72731d687920&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 2.137 7 [H]c1nc([H])c(SC#N)c([H])c1[H] &lt;rdkit.Chem.rdchem.Mol object at 0x72731d687a00&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 2.087 54 [H]C(=O)Sc1c([H])nc([H])c([H])c1[H] &lt;rdkit.Chem.rdchem.Mol object at 0x72731c1d87b0&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 2.087 <pre><code># The query methods available in modAL.acquisition are made available, these include\n# Query.greedy(), \n# Query.PI(tradeoff=0) - highest probability of improvement\n# Query.EI(tradeoff=0) - highest expected improvement\n# Query.UCB(beta=1) - highest upper confidence bound (employes modAL.models.BayesianOptimizer)\n\n# Models include the scikit:\n# Model.linear()\n# Model.elastic_net()\n# Model.random_forest()\n# Model.gradient_boosting_regressor()\n# Model.mlp_regressor()\n\n# Model.gaussian_process()  # uses a TanimotoKernel by default, meaning that it\n#                           # compares the fingerprints of all the training dataset\n#                           # with the cases not yet studied, which can be expensive\n#                           # computationally\n\ncs.model = Model.linear()\ncs.query = Query.Greedy()\ncs.active_learning()\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id regression 177 [H]c1nc([H])c(Sc2nnn([H])n2)c([H])c1[H] &lt;rdkit.Chem.rdchem.Mol object at 0x72731c1db990&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 1.8"},{"location":"notebooks/notebook7-al-enamine/7_active_learning_enamine/#search-the-enamine-database-usuing-the-swdockingorg-check-if-online","title":"Search the Enamine database usuing the sw.docking.org (check if online)","text":"<p>Please note that you should check whether you have the permission to use this interface.  Furthermore, you are going to need the pip package <code>pydockingorg</code></p> <pre><code># search only molecules similar to the best molecule score-wise (n_best)\n# and return up to 5\nnew_enamines = cs.add_enamine_molecules(n_best=1, results_per_search=10)\n</code></pre> <pre><code>Querying Enamine REAL. Looking up 1 smiles.\nFound 10 in 6.407189130783081\nEnamine returned with 10 rows in 6.4s.\nDask obabel protonation + scaffold test finished in 0.06s.\nTested scaffold presence. Kept 10/10.\nAdding:  10\n\n\n/home/dresio/code/fegrow/fegrow/package.py:1229: UserWarning: Only one H vector is assumed and used. Picking &lt;NA&gt; hydrogen on the scaffold. \n  warnings.warn(f\"Only one H vector is assumed and used. Picking {vl.h[0]} hydrogen on the scaffold. \")\n</code></pre> <pre><code>new_enamines\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id 200 C(SC(c1c(c(c(nc1[H])[H])[H])[H])([H])[H])([H])... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-002558062946 201 C(SC(c1c(c(c(Br)nc1[H])[H])[H])([H])[H])([H])(... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False Z3340872668 202 C(SC(c1c(c(c(C([H])([H])[H])nc1[H])[H])[H])([H... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-002903174203 203 C(SC(c1c(c(c(Cl)nc1[H])[H])[H])([H])[H])([H])(... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-004253211555 204 C(SC(c1c(c(c(F)nc1[H])[H])[H])([H])[H])([H])([... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-005723429185 205 C(SC(c1c(c(c(nc1Br)[H])[H])[H])([H])[H])([H])(... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False Z2832853555 206 C(SC(c1c(c(c(nc1C([H])([H])[H])[H])[H])[H])([H... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-003024225282 207 C(SC(c1c(c(c(nc1Cl)[H])[H])[H])([H])[H])([H])(... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-004696925594 208 C(SC(c1c(c(c(nc1F)[H])[H])[H])([H])[H])([H])([... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-005922678029 209 C(SC(c1c(nc(c(c1Cl)[H])[H])[H])([H])[H])([H])(... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-002978169168 <pre><code># we marked the molecules to avoid searching for them again\n# for that we use the column \"enamine_searched\"\ncs.df[cs.df.enamine_searched == True]\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id regression 168 [H]c1nc([H])c(C([H])([H])SI)c([H])c1[H] &lt;fegrow.package.RMol object at 0x7272ea02c720&gt; 3.858 &lt;NA&gt; True True True NaN 3.858"},{"location":"notebooks/notebook8-more-al/8_active_learning_details/","title":"8: Active Learning - Details","text":"<p>Authors: Mateusz K Bieniek, Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, Daniel J. Cole</p>"},{"location":"notebooks/notebook8-more-al/8_active_learning_details/#overview","title":"Overview","text":"<p>Configure the Active Learning</p> <pre><code>import pandas as pd\nimport prody\nfrom rdkit import Chem\n\nimport fegrow\nfrom fegrow import ChemSpace\n\nfrom fegrow.testing import core_5R83_path, smiles_5R83_path, rec_5R83_path\n</code></pre> <pre><code># create the chemical space\ncs = ChemSpace()\n# we're not growing the scaffold, we're superimposing bigger molecules on it\ncs.add_scaffold(Chem.SDMolSupplier(core_5R83_path)[0])\ncs.add_protein(rec_5R83_path)\n</code></pre> <pre><code>/home/dresio/code/fegrow/fegrow/package.py:595: UserWarning: ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. Use a Dask cluster with processes as a work around (see the documentation for an example of this workaround) .\n  warnings.warn(\"ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. \"\n\n\nDask can be watched on http://192.168.178.20:8989/status\n\n\n/home/dresio/code/fegrow/fegrow/package.py:799: UserWarning: The template does not have an attachement (Atoms with index 0, or in case of Smiles the * character. )\n  warnings.warn(\"The template does not have an attachement (Atoms with index 0, \"\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n[13:43:23] DEPRECATION WARNING: please use MorganGenerator\n</code></pre> <pre><code># switch on the caching\ncs.set_dask_caching()\n</code></pre> <pre><code># load 50k Smiles\ndata = pd.read_csv(smiles_5R83_path)\n\n# take only 100\nsmiles = data.Smiles.to_list()[:200]\n\n# here we add Smiles which should already have been matched\n# to the scaffold (rdkit Mol.HasSubstructureMatch)\ncs.add_smiles(smiles)\n</code></pre> <pre><code># configure manually 5 cases\ncs.df.loc[0, (\"score\", \"Training\")] = 3.248, True\ncs.df.loc[1, (\"score\", \"Training\")] = 3.572, True\ncs.df.loc[2, (\"score\", \"Training\")] = 3.687, True\ncs.df.loc[3, (\"score\", \"Training\")] = 3.492, True\ncs.df.loc[4, (\"score\", \"Training\")] = 3.208, True\n</code></pre>"},{"location":"notebooks/notebook8-more-al/8_active_learning_details/#active-learning","title":"Active Learning","text":""},{"location":"notebooks/notebook8-more-al/8_active_learning_details/#warning-please-change-the-logger-in-order-to-see-what-is-happening-inside-of-chemspaceevaluate-there-is-too-much-info-to-output-it-into-the-screen","title":"Warning! Please change the logger in order to see what is happening inside of ChemSpace.evaluate. There is too much info to output it into the screen .","text":"<pre><code>from fegrow.al import Model, Query\n</code></pre> <pre><code># This is the default configuration\ncs.model = Model.gaussian_process()\ncs.query = Query.Greedy()\n\ncs.active_learning(3)\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id 18 [H]ON([H])C(=O)N([H])c1c([H])nc([H])c([H])c1[H] &lt;rdkit.Chem.rdchem.Mol object at 0x76de7d5bff40&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 67 [H]OC(=S)N([H])c1c([H])nc([H])c([H])c1[H] &lt;rdkit.Chem.rdchem.Mol object at 0x76de7d5dd540&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 16 [H]OC([H])([H])C(=O)N([H])c1c([H])nc([H])c([H]... &lt;rdkit.Chem.rdchem.Mol object at 0x76de7d5bfe60&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN <pre><code>cs.query = Query.UCB(beta=10)\ncs.active_learning(3)\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id regression 162 [H]c1nc([H])c(OC(=O)N([H])OC([H])([H])[H])c([H... &lt;rdkit.Chem.rdchem.Mol object at 0x76de7d5dfed0&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 2.01 170 [H]c1nc([H])c(S(=O)(=O)N([H])C(=O)OC([H])([H])... &lt;rdkit.Chem.rdchem.Mol object at 0x76de7d5e02e0&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 2.01 182 [H]c1nc([H])c([C@@]([H])(C(=O)N([H])OC([H])([H... &lt;rdkit.Chem.rdchem.Mol object at 0x76de7d5e0820&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 1.93 <pre><code># The query methods available in modAL.acquisition are made available, these include\n# Query.greedy(), \n# Query.PI(tradeoff=0) - highest probability of improvement\n# Query.EI(tradeoff=0) - highest expected improvement\n# Query.UCB(beta=1) - highest upper confidence bound (employes modAL.models.BayesianOptimizer)\n\n# Models include the scikit:\n# Model.linear()\n# Model.elastic_net()\n# Model.random_forest()\n# Model.gradient_boosting_regressor()\n# Model.mlp_regressor()\n\n# Model.gaussian_process()  # uses a TanimotoKernel by default, meaning that it\n#                           # compares the fingerprints of all the training dataset\n#                           # with the cases not yet studied, which can be expensive\n#                           # computationally\n\ncs.model = Model.linear()\ncs.query = Query.Greedy()\ncs.active_learning()\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id regression 18 [H]ON([H])C(=O)N([H])c1c([H])nc([H])c([H])c1[H] &lt;rdkit.Chem.rdchem.Mol object at 0x76de7d5bff40&gt; &lt;NA&gt; &lt;NA&gt; False NaN False NaN 2.99"},{"location":"notebooks/notebook8-more-al/8_active_learning_details/#search-the-enamine-database-usuing-the-swdockingorg-check-if-online","title":"Search the Enamine database usuing the sw.docking.org (check if online)","text":"<p>Please note that you should check whether you have the permission to use this interface.  Furthermore, you are going to need the pip package <code>pydockingorg</code></p> <pre><code># search only molecules similar to the best molecule score-wise (n_best)\n# and return up to 5\nnew_enamines = cs.add_enamine_molecules(n_best=1, results_per_search=10)\n</code></pre> <pre><code>Querying Enamine REAL. Looking up 1 smiles.\nFound 10 in 6.730192184448242\nEnamine returned with 10 rows in 6.7s.\nDask obabel protonation + scaffold test finished in 0.05s.\nTested scaffold presence. Kept 10/10.\nAdding:  10\n\n\n/home/dresio/code/fegrow/fegrow/package.py:1229: UserWarning: Only one H vector is assumed and used. Picking &lt;NA&gt; hydrogen on the scaffold. \n  warnings.warn(f\"Only one H vector is assumed and used. Picking {vl.h[0]} hydrogen on the scaffold. \")\n</code></pre> <pre><code>new_enamines\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id 200 O=C(C(O[H])([H])[H])N(c1c(c(c(nc1[H])[H])[H])[... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-002350579485 201 C(C(=O)N(c1c(c(c(nc1[H])[H])[H])[H])[H])([H])(... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-002362554605 202 N(C(=O)N(c1c(c(c(nc1[H])[H])[H])[H])[H])([H])[H] &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-002540479822 203 C(OC(=O)N(C(c1c(c(c(nc1[H])[H])[H])[H])([H])[H... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-002472056239 204 O=C([O-])C(N(c1c(nc(c(Br)c1[H])[H])[H])[H])([H... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False Z2060314917 205 O=C(C(O[H])([H])[H])N(C(c1c(c(c(nc1[H])[H])[H]... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False Z1551688424 206 C(C(=O)N(c1c(c(c(Br)nc1[H])[H])[H])[H])([H])([... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False Z1442921413 207 C(C(=O)N(c1c(c(c(C([H])([H])[H])nc1[H])[H])[H]... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-002273680800 208 C(C(=O)N(c1c(c(c(Cl)nc1[H])[H])[H])[H])([H])([... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-002441695625 209 C(C(=O)N(c1c(c(c(N([H])[H])nc1[H])[H])[H])[H])... &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; False &lt;NA&gt; False PV-003001152073"},{"location":"notebooks/notebook9-previous-study50k/9_cs50k_study/","title":"9: Pre-evaluated CS50K with Active Learning","text":"<p>Authors: Mateusz K Bieniek, Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, Daniel J. Cole</p>"},{"location":"notebooks/notebook9-previous-study50k/9_cs50k_study/#overview","title":"Overview","text":"<p>An AL study using precomputed Gnina scores. </p> <pre><code>import pandas as pd\nimport prody\nfrom rdkit import Chem\n\nimport fegrow\nfrom fegrow import ChemSpace\n\nfrom fegrow.testing import core_5R83_path, smiles_5R83_path\n</code></pre> <pre><code># create the chemical space\ncs = ChemSpace()\n# we're not growing the scaffold, we're superimposing bigger molecules on it\ncs.add_scaffold(Chem.SDMolSupplier(core_5R83_path)[0])\n# we can ignore the protein as the values have been pre-computed\ncs.add_protein(None)\n</code></pre> <pre><code>/home/dresio/code/fegrow/fegrow/package.py:597: UserWarning: ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. Use a Dask cluster with processes as a work around (see the documentation for an example of this workaround) .\n  warnings.warn(\"ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. \"\n\n\nDask can be watched on http://192.168.178.20:8989/status\n\n\n/home/dresio/code/fegrow/fegrow/package.py:801: UserWarning: The template does not have an attachement (Atoms with index 0, or in case of Smiles the * character. )\n  warnings.warn(\"The template does not have an attachement (Atoms with index 0, \"\n</code></pre> <pre><code># switch on the caching\n# I set it here to 6GB of RAM\ncs.set_dask_caching(6e9)\n</code></pre> <pre><code># load 50k Smiles\noracle = pd.read_csv(smiles_5R83_path)\n\n# remove .score == 0, which was used to signal structures that were too big\noracle = oracle[oracle.cnnaffinity!=0]\n\n# here we add Smiles which should already have been matched\n# to the scaffold (rdkit Mol.HasSubstructureMatch)\nsmiles = oracle.Smiles.to_list()\ncs.add_smiles(smiles)\n</code></pre>"},{"location":"notebooks/notebook9-previous-study50k/9_cs50k_study/#active-learning","title":"Active Learning","text":""},{"location":"notebooks/notebook9-previous-study50k/9_cs50k_study/#warning-please-change-the-logger-in-order-to-see-what-is-happening-inside-of-chemspaceevaluate-there-is-too-much-info-to-output-it-into-the-screen","title":"Warning! Please change the logger in order to see what is happening inside of ChemSpace.evaluate. There is too much info to output it into the screen .","text":"<pre><code>import logging\nlogging.basicConfig(encoding='utf-8', level=logging.DEBUG)\n</code></pre> <pre><code>from fegrow.al import Model, Query\n</code></pre> <pre><code># This is the default configuration\n# cs.model = Model.gaussian_process()\ncs.model = Model.linear()\ncs.query = Query.Greedy()\n</code></pre> <pre><code># we will use the preivously computed scores for this AL study\n# we're going to look up the values instead\ndef oracle_look_up(scaffold, h, smiles, *args, **kwargs):\n    # mol, data\n    return None, {\"score\": oracle[oracle.Smiles == smiles].iloc[0].cnnaffinity}\n</code></pre> <pre><code># the first cycle will take more time\nfor cycle in range(20):\n    # select 2 hundred\n    selections = cs.active_learning(200)\n    res = cs.evaluate(selections, full_evaluation=oracle_look_up)\n\n    print(f\"AL{cycle:2d}. \"\n      f\"Mean: {res.score.mean():.2f}, \"\n      f\"Max: {res.score.max():.2f}, \"\n      f\"&gt;4.8: {sum(res.score &gt; 4.8):3d}, \"\n      f\"&gt;5.0: {sum(res.score &gt; 5.0):3d}, \"\n      f\"&gt;5.2: {sum(res.score &gt; 5.2):3d}, \"\n      f\"&gt;5.4: {sum(res.score &gt; 5.4):3d}, \"\n      )\n</code></pre> <pre><code>/home/dresio/code/fegrow/fegrow/package.py:1287: UserWarning: Selecting randomly the first samples to be studied (no score data yet). \n  warnings.warn(\"Selecting randomly the first samples to be studied (no score data yet). \")\n\n\nAL 0. Mean: 4.50, Max: 5.50, &gt;4.8:  46, &gt;5.0:  23, &gt;5.2:   7, &gt;5.4:   1, \nAL 1. Mean: 5.17, Max: 6.11, &gt;4.8: 187, &gt;5.0: 151, &gt;5.2:  90, &gt;5.4:  33, \nAL 2. Mean: 5.16, Max: 5.73, &gt;4.8: 177, &gt;5.0: 146, &gt;5.2:  90, &gt;5.4:  36, \nAL 3. Mean: 4.93, Max: 5.73, &gt;4.8: 132, &gt;5.0:  85, &gt;5.2:  42, &gt;5.4:  20, \nAL 4. Mean: 4.95, Max: 6.16, &gt;4.8: 130, &gt;5.0:  95, &gt;5.2:  54, &gt;5.4:  19, \nAL 5. Mean: 4.93, Max: 5.89, &gt;4.8: 128, &gt;5.0:  75, &gt;5.2:  37, &gt;5.4:  21, \nAL 6. Mean: 4.85, Max: 5.69, &gt;4.8: 114, &gt;5.0:  75, &gt;5.2:  38, &gt;5.4:  14, \nAL 7. Mean: 4.76, Max: 5.59, &gt;4.8: 101, &gt;5.0:  60, &gt;5.2:  20, &gt;5.4:   2, \nAL 8. Mean: 4.77, Max: 5.77, &gt;4.8: 100, &gt;5.0:  57, &gt;5.2:  30, &gt;5.4:  11, \nAL 9. Mean: 4.67, Max: 5.65, &gt;4.8:  76, &gt;5.0:  39, &gt;5.2:  16, &gt;5.4:   7, \nAL10. Mean: 4.59, Max: 5.62, &gt;4.8:  63, &gt;5.0:  33, &gt;5.2:  18, &gt;5.4:   7, \nAL11. Mean: 4.60, Max: 6.06, &gt;4.8:  63, &gt;5.0:  36, &gt;5.2:  10, &gt;5.4:   2, \nAL12. Mean: 4.92, Max: 5.78, &gt;4.8: 138, &gt;5.0:  89, &gt;5.2:  45, &gt;5.4:  15, \nAL13. Mean: 5.03, Max: 5.88, &gt;4.8: 155, &gt;5.0: 110, &gt;5.2:  61, &gt;5.4:  26, \nAL14. Mean: 5.12, Max: 6.24, &gt;4.8: 174, &gt;5.0: 125, &gt;5.2:  77, &gt;5.4:  32, \nAL15. Mean: 5.10, Max: 6.20, &gt;4.8: 165, &gt;5.0: 126, &gt;5.2:  78, &gt;5.4:  38, \nAL16. Mean: 5.12, Max: 5.98, &gt;4.8: 177, &gt;5.0: 144, &gt;5.2:  75, &gt;5.4:  31, \nAL17. Mean: 5.10, Max: 5.96, &gt;4.8: 169, &gt;5.0: 130, &gt;5.2:  71, &gt;5.4:  25, \nAL18. Mean: 5.09, Max: 5.83, &gt;4.8: 176, &gt;5.0: 136, &gt;5.2:  67, &gt;5.4:  20, \nAL19. Mean: 5.08, Max: 6.02, &gt;4.8: 173, &gt;5.0: 129, &gt;5.2:  64, &gt;5.4:  22,\n</code></pre> <pre><code>\n</code></pre>"},{"location":"reference/","title":"Index","text":""},{"location":"reference/#fegrow","title":"fegrow","text":"<p>Modules:</p> <ul> <li> <code>al</code>           \u2013            </li> <li> <code>builder</code>           \u2013            </li> <li> <code>cli</code>           \u2013            </li> <li> <code>conformers</code>           \u2013            </li> <li> <code>package</code>           \u2013            </li> <li> <code>receptor</code>           \u2013            </li> <li> <code>testing</code>           \u2013            </li> <li> <code>toxicity</code>           \u2013            </li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> fegrow<ul> <li> al</li> <li> builder</li> <li> cli<ul> <li> cli</li> <li> scoring</li> <li> utils</li> </ul> </li> <li> conformers</li> <li> package</li> <li> receptor</li> <li> sascorer</li> <li> testing<ul> <li> conftest</li> <li> library_gen</li> <li> run_al</li> <li> test_chemspace</li> <li> test_general</li> <li> test_receptor</li> </ul> </li> <li> toxicity</li> </ul> </li> </ul>"},{"location":"reference/al/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> al","text":""},{"location":"reference/al/#fegrow.al","title":"al","text":"<p>Classes:</p> <ul> <li> <code>TanimotoKernel</code>           \u2013            <p>Custom Gaussian process kernel that computes Tanimoto similarity.</p> </li> <li> <code>Query</code>           \u2013            </li> </ul>"},{"location":"reference/al/#fegrow.al.TanimotoKernel","title":"TanimotoKernel","text":"<pre><code>TanimotoKernel()\n</code></pre> <p>               Bases: <code>NormalizedKernelMixin</code>, <code>StationaryKernelMixin</code>, <code>Kernel</code></p> <p>Custom Gaussian process kernel that computes Tanimoto similarity.</p> <p>Methods:</p> <ul> <li> <code>__call__</code>             \u2013              <p>Computes the pairwise Tanimoto similarity.</p> </li> </ul> Source code in <code>fegrow/al.py</code> <pre><code>def __init__(self):\n    \"\"\"Initializer.\"\"\"\n</code></pre>"},{"location":"reference/al/#fegrow.al.TanimotoKernel.__call__","title":"__call__","text":"<pre><code>__call__(X, Y=None, eval_gradient=False)\n</code></pre> <p>Computes the pairwise Tanimoto similarity.</p> <p>Parameters:</p> <ul> <li> <code>X</code>           \u2013            <p>Numpy array with shape [batch_size_a, num_features].</p> </li> <li> <code>Y</code>           \u2013            <p>Numpy array with shape [batch_size_b, num_features]. If None, X is used.</p> </li> <li> <code>eval_gradient</code>           \u2013            <p>Whether to compute the gradient.</p> </li> </ul> <p>Returns:</p> <ul> <li>           \u2013            <p>Numpy array with shape [batch_size_a, batch_size_b].</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>If eval_gradient is True.</p> </li> </ul> Source code in <code>fegrow/al.py</code> <pre><code>def __call__(self, X, Y=None, eval_gradient=False):  # pylint: disable=invalid-name\n    \"\"\"Computes the pairwise Tanimoto similarity.\n\n    Args:\n      X: Numpy array with shape [batch_size_a, num_features].\n      Y: Numpy array with shape [batch_size_b, num_features]. If None, X is\n        used.\n      eval_gradient: Whether to compute the gradient.\n\n    Returns:\n      Numpy array with shape [batch_size_a, batch_size_b].\n\n    Raises:\n      NotImplementedError: If eval_gradient is True.\n    \"\"\"\n    if eval_gradient:\n        raise NotImplementedError\n    if Y is None:\n        Y = X\n    return _dask_tanimito_similarity(X, Y)\n</code></pre>"},{"location":"reference/al/#fegrow.al.Query","title":"Query","text":"<p>Methods:</p> <ul> <li> <code>Greedy</code>             \u2013              <p>Takes the best instances by inference value sorted in ascending order.</p> </li> <li> <code>PI</code>             \u2013              <p>Maximum PI query strategy. Selects the instance with highest probability of improvement.</p> </li> <li> <code>EI</code>             \u2013              <p>Maximum EI query strategy. Selects the instance with highest expected improvement.</p> </li> <li> <code>UCB</code>             \u2013              <p>Maximum UCB query strategy. Selects the instance with highest upper confidence bound.</p> </li> </ul>"},{"location":"reference/al/#fegrow.al.Query.Greedy","title":"Greedy  <code>staticmethod</code>","text":"<pre><code>Greedy() -&gt; Callable\n</code></pre> <p>Takes the best instances by inference value sorted in ascending order.</p> <p>Returns:</p> <ul> <li> <code>Callable</code>           \u2013            <p>The greedy function.</p> </li> </ul> Source code in <code>fegrow/al.py</code> <pre><code>@staticmethod\ndef Greedy() -&gt; Callable:\n    \"\"\"Takes the best instances by inference value sorted in ascending order.\n\n    Returns:\n      The greedy function.\n    \"\"\"\n\n    def greedy(optimizer, features, n_instances=1):\n        \"\"\"Takes the best instances by inference value sorted in ascending order.\n\n        Args:\n          optimizer: BaseLearner. Model to use to score instances.\n          features: modALinput. Featurization of the instances to choose from.\n          n_instances: Integer. The number of instances to select.\n\n        Returns:\n          Indices of the instances chosen.\n        \"\"\"\n        return np.argpartition(optimizer.predict(features), n_instances)[\n            :n_instances\n        ]\n\n    return functools.partial(greedy, fegrow_label=\"greedy\")\n</code></pre>"},{"location":"reference/al/#fegrow.al.Query.PI","title":"PI  <code>staticmethod</code>","text":"<pre><code>PI(tradeoff: float = 0) -&gt; Callable\n</code></pre> <p>Maximum PI query strategy. Selects the instance with highest probability of improvement.</p> <p>Parameters:</p> <ul> <li> <code>tradeoff</code>               (<code>float</code>, default:                   <code>0</code> )           \u2013            <p>Value controlling the tradeoff parameter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>           \u2013            <p>The function with pre-populated parameters.</p> </li> </ul> Source code in <code>fegrow/al.py</code> <pre><code>@staticmethod\ndef PI(tradeoff: float = 0) -&gt; Callable:\n    \"\"\"\n    Maximum PI query strategy. Selects the instance with highest probability of improvement.\n\n    Args:\n        tradeoff: Value controlling the tradeoff parameter.\n\n    Returns:\n        The function with pre-populated parameters.\n    \"\"\"\n    return functools.partial(max_PI, tradeoff=tradeoff, fegrow_label=\"PI\")\n</code></pre>"},{"location":"reference/al/#fegrow.al.Query.EI","title":"EI  <code>staticmethod</code>","text":"<pre><code>EI(tradeoff: float = 0) -&gt; Callable\n</code></pre> <p>Maximum EI query strategy. Selects the instance with highest expected improvement.</p> <p>Parameters:</p> <ul> <li> <code>tradeoff</code>               (<code>float</code>, default:                   <code>0</code> )           \u2013            <p>Value controlling the tradeoff parameter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>           \u2013            <p>The function with pre-populated parameters.</p> </li> </ul> Source code in <code>fegrow/al.py</code> <pre><code>@staticmethod\ndef EI(tradeoff: float = 0) -&gt; Callable:\n    \"\"\"\n    Maximum EI query strategy. Selects the instance with highest expected improvement.\n\n    Args:\n        tradeoff: Value controlling the tradeoff parameter.\n\n    Returns:\n        The function with pre-populated parameters.\n    \"\"\"\n    return functools.partial(max_EI, tradeoff=tradeoff, fegrow_label=\"EI\")\n</code></pre>"},{"location":"reference/al/#fegrow.al.Query.UCB","title":"UCB  <code>staticmethod</code>","text":"<pre><code>UCB(beta: float = 1) -&gt; Callable\n</code></pre> <p>Maximum UCB query strategy. Selects the instance with highest upper confidence bound.</p> <p>Parameters:</p> <ul> <li> <code>beta</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>Value controlling the beta parameter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable</code>           \u2013            <p>The function with pre-populated parameters.</p> </li> </ul> Source code in <code>fegrow/al.py</code> <pre><code>@staticmethod\ndef UCB(beta: float = 1) -&gt; Callable:\n    \"\"\"\n    Maximum UCB query strategy. Selects the instance with highest upper confidence bound.\n\n    Args:\n        beta: Value controlling the beta parameter.\n\n    Returns:\n        The function with pre-populated parameters.\n    \"\"\"\n    return functools.partial(max_UCB, beta=beta, fegrow_label=\"UCB\")\n</code></pre>"},{"location":"reference/builder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> builder","text":""},{"location":"reference/builder/#fegrow.builder","title":"builder","text":"<p>Functions:</p> <ul> <li> <code>build_molecules_with_rdkit</code>             \u2013              <p>For the given core molecule and list of attachment points</p> </li> <li> <code>split</code>             \u2013              <p>Return the smaller part of the molecule or one that that contains the prespecified atom.</p> </li> <li> <code>merge_R_group</code>             \u2013              <p>function originally copied from</p> </li> <li> <code>get_attachment_atom</code>             \u2013              <p>In the R-group or a linker, search for the position of the attachment point (R atom)</p> </li> <li> <code>is_linker</code>             \u2013              <p>Check if the molecule is a linker by checking if it has 2 R-group points</p> </li> </ul>"},{"location":"reference/builder/#fegrow.builder.build_molecules_with_rdkit","title":"build_molecules_with_rdkit","text":"<pre><code>build_molecules_with_rdkit(scaffold: Mol, r_group: Mol, attachment_point: int = None, keep_components: int = None)\n</code></pre> <p>For the given core molecule and list of attachment points  and r groups enumerate the possible molecules and  return a list of them.</p> <p>:param scaffold: The core scaffold molecule to attach the r groups to, or a list of them. :param r_group: The list of rdkit molecules which should be considered   r groups or the RGroup Grid with highlighted molecules. :param attachment_point: The list of atom index in the core ligand   that the r groups should be attached to. If it is empty, connecting points are sought out and matched.</p> Source code in <code>fegrow/builder.py</code> <pre><code>def build_molecules_with_rdkit(\n    scaffold: Chem.Mol,\n    r_group: Chem.Mol,\n    attachment_point: int = None,\n    keep_components: int = None,\n):\n    \"\"\"\n    For the given core molecule and list of attachment points\n     and r groups enumerate the possible molecules and\n     return a list of them.\n\n    :param scaffold: The core scaffold molecule to attach the r groups to, or a list of them.\n    :param r_group: The list of rdkit molecules which should be considered\n      r groups or the RGroup Grid with highlighted molecules.\n    :param attachment_point: The list of atom index in the core ligand\n      that the r groups should be attached to. If it is empty, connecting points are sought out and matched.\n    \"\"\"\n    # make a deep copy of r_groups/linkers to ensure we don't modify the library\n    scaffold = copy.deepcopy(scaffold)\n    r_group = copy.deepcopy(r_group)\n\n    # get attachment points for each template\n    if attachment_point is None:\n        # attempt to generate the attachment points by picking the joining molecule\n        # case: a list of templates previously joined with linkers requires iterating over them\n        atom, neighbours = get_attachment_atom(scaffold)\n        attachment_point = atom.GetIdx()\n\n    if attachment_point is None:\n        raise Exception(\n            \"Could not find attachement points. Either the atom index has to be specified,\"\n            \"or an atom needs to be marked rdkit.atom.SetAtomicNum(0). \"\n        )\n\n    # for atom_idx, scaffold_ligand, keep_submolecule_cue in itertools.zip_longest(\n    #     attachment_points, template, keep_components, fillvalue=None\n    # ):\n    #     for r_mol in r_groups:\n    merged_mol, scaffold_no_attachement = merge_R_group(\n        scaffold=scaffold,\n        RGroup=r_group,\n        replace_index=attachment_point,\n        keep_cue_idx=keep_components,\n    )\n\n    # in case where multiple mergings take place (e.g. two mergings: (scaffold + linker) + rgroups)\n    # in this case, the attachment point from the original scaffold should be carried forward\n    # (as opposed to the attachment point on the linker)\n    if not merged_mol.HasProp(\"attachment_point\"):\n        merged_mol.SetIntProp(\"attachment_point\", attachment_point)\n\n    return merged_mol, scaffold, scaffold_no_attachement\n</code></pre>"},{"location":"reference/builder/#fegrow.builder.split","title":"split","text":"<pre><code>split(molecule, splitting_atom, keep_neighbour_idx=None)\n</code></pre> <p>Return the smaller part of the molecule or one that that contains the prespecified atom.</p> <p>:param molecule: RDKit Molecule :param splitting_atom: RDKit Atom, the growing vector used to divide the molecule into submolecules. :param splitting_atom: The index of the neighbouring atom on the side of the molecule that should be kept     as the scaffold. :return:</p> Source code in <code>fegrow/builder.py</code> <pre><code>def split(molecule, splitting_atom, keep_neighbour_idx=None):\n    \"\"\"\n    Return the smaller part of the molecule or one that that contains the prespecified atom.\n\n    :param molecule: RDKit Molecule\n    :param splitting_atom: RDKit Atom, the growing vector used to divide the molecule into submolecules.\n    :param splitting_atom: The index of the neighbouring atom on the side of the molecule that should be kept\n        as the scaffold.\n    :return:\n    \"\"\"\n    G = networkx.from_numpy_array(Chem.GetAdjacencyMatrix(molecule, useBO=False))\n    G.remove_node(splitting_atom.GetIdx())\n\n    connected_components = list(networkx.connected_components(G))\n    if len(connected_components) == 1:\n        raise ValueError(\n            f\"The molecule is not divided into two separate components \"\n            f\"with the Atom ID={splitting_atom.GetIdx()}, so we cannot decide which component to remove. \"\n        )\n\n    if keep_neighbour_idx:\n        # select the user specifid component\n        component_to_keep = [\n            c for c in connected_components if keep_neighbour_idx in c\n        ][0]\n    else:\n        # keep the largest component\n        largest_component_size = max(map(len, connected_components))\n        component_to_keep = [\n            c for c in connected_components if len(c) == largest_component_size\n        ][0]\n\n    atom_ids_for_removal = {\n        item for sublist in connected_components for item in sublist\n    } - component_to_keep\n\n    # remove the unwanted component\n    edit_scaffold = Chem.EditableMol(molecule)\n    for idx in sorted(list(atom_ids_for_removal), reverse=True):\n        edit_scaffold.RemoveAtom(idx)\n    scaffold = edit_scaffold.GetMol()\n\n    kept_atoms = [\n        a for a in molecule.GetAtoms() if a.GetIdx() not in atom_ids_for_removal\n    ]\n    scaffold_elements = [a for a in scaffold.GetAtoms()]\n\n    # removing atoms changes the IDs of the atoms that remain\n    if [a.GetAtomicNum() for a in kept_atoms] != [\n        a.GetAtomicNum() for a in scaffold_elements\n    ]:\n        raise Exception(\n            \"The assumption that the modified molecule will keep the atoms in the same order is false. \"\n            \"Please get in touch with the FEgrow maintainers. \"\n        )\n    idx_map = dict(\n        zip([a.GetIdx() for a in kept_atoms], [a.GetIdx() for a in scaffold_elements])\n    )\n    return scaffold, idx_map\n</code></pre>"},{"location":"reference/builder/#fegrow.builder.merge_R_group","title":"merge_R_group","text":"<pre><code>merge_R_group(scaffold, RGroup, replace_index, keep_cue_idx=None)\n</code></pre> <p>function originally copied from https://github.com/molecularsets/moses/blob/master/moses/baselines/combinatorial.py</p> Source code in <code>fegrow/builder.py</code> <pre><code>def merge_R_group(scaffold, RGroup, replace_index, keep_cue_idx=None):\n    \"\"\"function originally copied from\n    https://github.com/molecularsets/moses/blob/master/moses/baselines/combinatorial.py\n    \"\"\"\n\n    # the linking R atom on the R group\n    # fixme: attempt to do the same on the template if replace index is not provided\n    rgroup_R_atom, R_atom_neighbours = get_attachment_atom(RGroup)\n\n    # atom to be replaced in the scaffold\n    atom_to_replace = scaffold.GetAtomWithIdx(replace_index)\n    if len(atom_to_replace.GetNeighbors()) == 1:\n        hook = atom_to_replace.GetNeighbors()[0]\n    elif len(atom_to_replace.GetNeighbors()) != 1:\n        scaffold, idx_map = split(scaffold, atom_to_replace, keep_cue_idx)\n        replace_index = idx_map[replace_index]\n        atom_to_replace = scaffold.GetAtomWithIdx(replace_index)\n        hook = atom_to_replace.GetNeighbors()[0]\n\n    if RGroup.GetNumConformers() == 0:\n        logger.warning(\n            \"The R-Group lacks initial coordinates. Defaulting to Chem.rdDistGeom.EmbedMolecule.\"\n        )\n        Chem.rdDistGeom.EmbedMolecule(RGroup)\n\n    # align the R-group only if there are any conformers to work with\n    if scaffold.GetNumConformers() &gt; 0:\n        AlignMol(\n            RGroup,\n            scaffold,\n            atomMap=(\n                (R_atom_neighbours[0].GetIdx(), atom_to_replace.GetIdx()),\n                (rgroup_R_atom.GetIdx(), hook.GetIdx()),\n            ),\n        )\n\n    # merge\n    combined = Chem.CombineMols(scaffold, RGroup)\n    emol = Chem.EditableMol(combined)\n\n    # connect\n    bond_order = rgroup_R_atom.GetBonds()[0].GetBondType()\n    emol.AddBond(\n        hook.GetIdx(),\n        R_atom_neighbours[0].GetIdx() + scaffold.GetNumAtoms(),\n        order=bond_order,\n    )\n    # -1 accounts for the removed linking atom on the template\n    emol.RemoveAtom(rgroup_R_atom.GetIdx() + scaffold.GetNumAtoms())\n    # remove the linking atom on the template\n    emol.RemoveAtom(atom_to_replace.GetIdx())\n\n    merged = emol.GetMol()\n    Chem.SanitizeMol(merged)\n\n    # use only the best/first conformer\n    for c in list(merged.GetConformers())[1:]:\n        merged.RemoveConformer(c.GetId())\n\n    # bookkeeping about scaffolding\n    edit_scaffold = Chem.EditableMol(scaffold)\n    edit_scaffold.RemoveAtom(atom_to_replace.GetIdx())\n    scaffold_no_attachement = edit_scaffold.GetMol()\n\n    if is_linker(RGroup):\n        # update the linker so that there is an attachment point left for the future\n        # atom in the linker with a label=1 was used for the merging\n        # rename label=2 to 0 to turn it into a simple R-group\n        for atom in merged.GetAtoms():\n            if atom.GetAtomMapNum() == 2:\n                atom.SetAtomMapNum(0)\n\n    return merged, scaffold_no_attachement\n</code></pre>"},{"location":"reference/builder/#fegrow.builder.get_attachment_atom","title":"get_attachment_atom","text":"<pre><code>get_attachment_atom(R_group)\n</code></pre> <p>In the R-group or a linker, search for the position of the attachment point (R atom) and extract the atom (currently only single bond supported). In case of the linker, the R1 atom is selected. rgroup: fragment passed as rdkit molecule return: tuple (ratom, ratom_neighbour), where the ratom_neighbour is the surviving atom</p> Source code in <code>fegrow/builder.py</code> <pre><code>def get_attachment_atom(R_group):\n    \"\"\"In the R-group or a linker, search for the position of the attachment point (R atom)\n    and extract the atom (currently only single bond supported). In case of the linker,\n    the R1 atom is selected.\n    rgroup: fragment passed as rdkit molecule\n    return: tuple (ratom, ratom_neighbour), where the ratom_neighbour is the surviving atom\n    \"\"\"\n\n    # find the R groups in the molecule\n    r_atoms = [atom for atom in R_group.GetAtoms() if atom.GetAtomicNum() == 0]\n    if not len(r_atoms):\n        raise Exception(\n            \"The R-group does not have R-atoms (Atoms with index == 0, visualised with a '*' character)\"\n        )\n\n    # if it is a linker, it will have more than 1 R group, pick the one with index 1\n    if len(r_atoms) == 1:\n        atom = r_atoms[0]\n    elif is_linker(R_group):\n        \"\"\"\n        find the attachable points.\n        We use the first attachment to be .GetAtomMapNum() == 1\n        and second to be .GetAtomMapNum() == 2,\n        or whichever is smaller.\n        \"\"\"\n        map_nums = {atom.GetAtomMapNum() for atom in r_atoms}\n        if len(map_nums) == 1:\n            warnings.warn(\n                \"The linker has two conneting ends specified (* atom). However,\"\n                \"they're not given priorities. Choosing a random one.  \"\n            )\n        smallest_map_num = min(map_nums)\n        for r_atom in r_atoms:\n            if r_atom.GetAtomMapNum() == smallest_map_num:\n                atom = r_atom\n                break\n    else:\n        raise Exception(\n            \"Either missing R-atoms, or more than two R-atoms. \"\n            '\"Atom.GetAtomicNum\" should be 0 for the R-atoms, and in the case of the linker,  '\n            '\"Atom.GetAtomMapNum\" has to specify the order (1,2) '\n        )\n\n    neighbours = atom.GetNeighbors()\n    if len(neighbours) &gt; 1:\n        warnings.warn(\n            \"The linking R atom (*) has two or more attachment points (bonds). \"\n            \"The molecule might be modified. \"\n        )\n\n    return atom, neighbours\n</code></pre>"},{"location":"reference/builder/#fegrow.builder.is_linker","title":"is_linker","text":"<pre><code>is_linker(rmol)\n</code></pre> <p>Check if the molecule is a linker by checking if it has 2 R-group points</p> Source code in <code>fegrow/builder.py</code> <pre><code>def is_linker(rmol):\n    \"\"\"\n    Check if the molecule is a linker by checking if it has 2 R-group points\n    \"\"\"\n    if [a.GetAtomicNum() for a in rmol.GetAtoms()].count(0) == 2:\n        return True\n\n    if len([atom for atom in rmol.GetAtoms() if atom.GetAtomMapNum() in (1, 2)]) == 2:\n        return True\n\n    return False\n</code></pre>"},{"location":"reference/conformers/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> conformers","text":""},{"location":"reference/conformers/#fegrow.conformers","title":"conformers","text":"<p>Functions:</p> <ul> <li> <code>generate_conformers</code>             \u2013              <p>flexible:</p> </li> </ul>"},{"location":"reference/conformers/#fegrow.conformers.generate_conformers","title":"generate_conformers","text":"<pre><code>generate_conformers(rmol: Mol, num_conf: int, minimum_conf_rms: float = 0.5, flexible: Optional[List[int]] = [], scaffold_heavy_atoms=True, use_ties_mcs: bool = False, mapping: list[tuple[int, int]] = None) -&gt; List[Mol]\n</code></pre> flexible <p>The list of atomic indices on the @core_ligand that should not be constrained during the conformer generation</p> <p>:param scaffold_heavy_atoms: use only the heavy atoms in the scaffold     and in the molecule to generate the match.</p> Source code in <code>fegrow/conformers.py</code> <pre><code>def generate_conformers(\n    rmol: Chem.rdchem.Mol,\n    num_conf: int,\n    minimum_conf_rms: float = 0.5,\n    flexible: Optional[List[int]] = [],\n    scaffold_heavy_atoms=True,\n    use_ties_mcs: bool = False,\n    mapping: list[tuple[int, int]] = None,\n) -&gt; List[Chem.rdchem.Mol]:\n    \"\"\"\n    flexible:\n            The list of atomic indices on the @core_ligand that should not be constrained during the conformer generation\n    :param scaffold_heavy_atoms: use only the heavy atoms in the scaffold\n        and in the molecule to generate the match.\n    \"\"\"\n    scaffold_mol = deepcopy(rmol.template)\n\n    if scaffold_heavy_atoms:\n        scaffold_mol = Chem.RemoveHs(scaffold_mol)\n\n    scaffold_conformer = scaffold_mol.GetConformer(0)\n\n    # fixme - check if the conformer has H, it helps with conformer generation\n    rmol = deepcopy(rmol)\n\n    # map scaffold atoms to the new molecules with RDKit\n    if not mapping:\n        match = rmol.GetSubstructMatch(scaffold_mol)\n        # convert the RDKit match from (i1, i2, ..) to ((core_i1, i1), (core_i2, i2), ...) format\n        mapping = list(enumerate(match))\n\n    if mapping and not use_ties_mcs:\n        # extract the scaffold coordinates\n        coordinates_map = {}\n        manmap = []\n        for core_index, matched_index in mapping:\n            if matched_index in flexible:\n                continue\n\n            scaffold_atom = scaffold_mol.GetAtomWithIdx(core_index)\n\n            # ignore the R atom being matched\n            if scaffold_atom.GetAtomicNum() == 0:\n                continue\n\n            core_atom_coordinate = scaffold_conformer.GetAtomPosition(core_index)\n            coordinates_map[matched_index] = core_atom_coordinate\n            manmap.append((matched_index, core_index))\n    else:\n        try:\n            from ties.topology_superimposer import (\n                Atom,\n                superimpose_topologies,\n            )\n        except ModuleNotFoundError as NoTies:\n            raise WrongCoreForMolecule(\n                \"Molecule doesn't match the core. \"\n                \"This can be caused by the order of SMILES, for example. \"\n                \"You can install the python package 'ties' to use MCS instead. \",\n                match,\n            ) from NoTies\n\n        def to_ties_atoms(rdkit_mol):\n            ties_atoms = {}\n            for rdkit_atom in rdkit_mol.GetAtoms():\n                ties_atom = Atom(\n                    name=rdkit_atom.GetSymbol() + str(rdkit_atom.GetIdx()),\n                    atom_type=rdkit_atom.GetSymbol(),\n                )\n                ties_atom.id = rdkit_atom.GetIdx()\n                ties_atoms[rdkit_atom.GetIdx()] = ties_atom\n\n            for bond in rdkit_mol.GetBonds():\n                ties_atoms[bond.GetBeginAtomIdx()].bind_to(\n                    ties_atoms[bond.GetEndAtomIdx()], str(bond.GetBondType())\n                )\n            return list(ties_atoms.values())\n\n        rmol_ties = to_ties_atoms(rmol)\n        scaffold_ties = to_ties_atoms(scaffold_mol)\n        mapping = superimpose_topologies(\n            scaffold_ties, rmol_ties, ignore_coords=True, ignore_charges_completely=True\n        )\n\n        coordinates_map = {}\n        manmap = []\n        for core_index, matched_index in sorted(\n            mapping.matched_pairs, key=lambda p: p[0].id\n        ):\n            if matched_index.id in flexible:\n                continue\n\n            core_atom_coordinate = scaffold_conformer.GetAtomPosition(core_index.id)\n            coordinates_map[matched_index.id] = core_atom_coordinate\n            manmap.append((matched_index.id, core_index.id))\n        #\n        print(\"Used the TIES (Bieniek et al) package to get the mapping\")\n\n    # use a reproducible random seed\n    randomseed = 194715\n\n    # Generate conformers with constrained embed\n    mol_for_conformer_generation = deepcopy(rmol)\n    mol_nonh_indices = [a.GetIdx() for a in rmol.GetAtoms() if a.GetSymbol() != \"H\"]\n    dup_count = 0\n    for core_index in range(num_conf):\n        temp_mol = ConstrainedEmbedR2(\n            mol_for_conformer_generation,\n            scaffold_mol,\n            coordinates_map,\n            manmap,\n            randomseed=randomseed + core_index,\n        )\n\n        assert temp_mol.GetNumConformers() == 1\n        if conformer_exists(\n            rmol, temp_mol.GetConformer(), mol_nonh_indices, rms_limit=minimum_conf_rms\n        ):\n            dup_count += 1\n        else:\n            rmol.AddConformer(temp_mol.GetConformer(), assignId=True)\n\n    if dup_count:\n        logger.info(\n            f\"Removed {dup_count} duplicated conformations, leaving {rmol.GetNumConformers()} in total. \"\n        )\n\n    print(f\"Generated {rmol.GetNumConformers()} conformers. \")\n    return rmol\n</code></pre>"},{"location":"reference/package/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> package","text":""},{"location":"reference/package/#fegrow.package","title":"package","text":"<p>Classes:</p> <ul> <li> <code>RInterface</code>           \u2013            <p>This is a shared interface for a molecule and a list of molecules.</p> </li> <li> <code>RMol</code>           \u2013            <p>RMol is essentially a wrapper around RDKit Mol with</p> </li> <li> <code>DaskTasks</code>           \u2013            </li> <li> <code>ChemSpace</code>           \u2013            <p>Streamline working with many RMols or a specific chemical space by employing a pandas dataframe,</p> </li> <li> <code>RGroups</code>           \u2013            <p>The default R-Group library with visualisation (mols2grid).</p> </li> <li> <code>Linkers</code>           \u2013            <p>A linker library presented as a grid molecules using mols2grid library.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>build_molecule</code>             \u2013              <p>:param scaffolds:</p> </li> </ul>"},{"location":"reference/package/#fegrow.package.RInterface","title":"RInterface","text":"<p>This is a shared interface for a molecule and a list of molecules.</p> <p>The main purpose is to allow using the same functions on a single molecule and on a group of them.</p>"},{"location":"reference/package/#fegrow.package.RMol","title":"RMol","text":"<pre><code>RMol(*args, id=None, template=None, **kwargs)\n</code></pre> <p>               Bases: <code>RInterface</code>, <code>Mol</code></p> <p>RMol is essentially a wrapper around RDKit Mol with tailored functionalities for attaching R groups, etc.</p> <p>:param rmol: when provided, energies and additional metadata is preserved. :type rmol: RMol :param template: Provide the original molecule template     used for this RMol.</p> <p>Methods:</p> <ul> <li> <code>toxicity</code>             \u2013              <p>Assessed various ADMET properties, including</p> </li> <li> <code>generate_conformers</code>             \u2013              <p>Generate conformers using the RDKIT's ETKDG. The generated conformers</p> </li> <li> <code>optimise_in_receptor</code>             \u2013              <p>Enumerate the conformers inside of the receptor by employing</p> </li> <li> <code>sort_conformers</code>             \u2013              <p>For the given molecule and the conformer energies order the energies</p> </li> <li> <code>rep2D</code>             \u2013              <p>Use RDKit and get a 2D diagram.</p> </li> <li> <code>rep3D</code>             \u2013              <p>Use py3Dmol to obtain the 3D view of the molecule.</p> </li> <li> <code>remove_clashing_confs</code>             \u2013              <p>Removing conformations that class with the protein.</p> </li> <li> <code>set_gnina</code>             \u2013              <p>Set the location of the binary file gnina. This could be your own compiled directory,</p> </li> <li> <code>gnina</code>             \u2013              <p>Use GNINA to extract CNNaffinity, which we also recalculate to Kd (nM)</p> </li> <li> <code>to_file</code>             \u2013              <p>Write the molecule and all conformers to file.</p> </li> <li> <code>df</code>             \u2013              <p>Generate a pandas dataframe row for this molecule with SMILES.</p> </li> </ul> Source code in <code>fegrow/package.py</code> <pre><code>def __init__(self, *args, id=None, template=None, **kwargs):\n    super().__init__(*args, **kwargs)\n\n    if isinstance(args[0], RMol) or isinstance(args[0], rdkit.Chem.Mol):\n        self.template = args[0].template if hasattr(args[0], \"template\") else None\n        self.rgroup = args[0].rgroup if hasattr(args[0], \"rgroup\") else None\n        self.opt_energies = (\n            args[0].opt_energies if hasattr(args[0], \"opt_energies\") else None\n        )\n        self.id = args[0].id if hasattr(args[0], \"id\") else None\n    else:\n        self.template = template\n        self.rgroup = None\n        self.opt_energies = None\n        self.id = id\n</code></pre>"},{"location":"reference/package/#fegrow.package.RMol.toxicity","title":"toxicity","text":"<pre><code>toxicity()\n</code></pre> <p>Assessed various ADMET properties, including  - Lipinksi rule of 5 properties,  - the presence of unwanted substructures  - problematic functional groups  - synthetic accessibility</p> <p>:return: a row of a dataframe with the descriptors  :rtype: dataframe</p> Source code in <code>fegrow/package.py</code> <pre><code>def toxicity(self):\n    \"\"\"\n    Assessed various ADMET properties, including\n     - Lipinksi rule of 5 properties,\n     - the presence of unwanted substructures\n     - problematic functional groups\n     - synthetic accessibility\n\n     :return: a row of a dataframe with the descriptors\n     :rtype: dataframe\n    \"\"\"\n    df = tox_props(self)\n    # add an index column to the front\n    df.insert(0, \"ID\", self.id)\n    df.set_index(\"ID\", inplace=True)\n\n    # add a column with smiles\n    df = df.assign(Smiles=[Chem.MolToSmiles(self)])\n\n    return df\n</code></pre>"},{"location":"reference/package/#fegrow.package.RMol.generate_conformers","title":"generate_conformers","text":"<pre><code>generate_conformers(num_conf: int, minimum_conf_rms: float = 0.5, **kwargs)\n</code></pre> <p>Generate conformers using the RDKIT's ETKDG. The generated conformers are embedded into the template structure. In other words, any atoms that are common with the template structure, should have the same coordinates.</p> <p>:param num_conf: fixme :param minimum_conf_rms: The minimum acceptable difference in the RMS in any new generated conformer.     Conformers that are too similar are discarded. :type minimum_conf_rms: float :param flexible: A list of indices that are common with the template molecule     that should have new coordinates. :type flexible: List[int]</p> Source code in <code>fegrow/package.py</code> <pre><code>def generate_conformers(\n    self, num_conf: int, minimum_conf_rms: float = 0.5, **kwargs\n):\n    \"\"\"\n    Generate conformers using the RDKIT's ETKDG. The generated conformers\n    are embedded into the template structure. In other words,\n    any atoms that are common with the template structure,\n    should have the same coordinates.\n\n    :param num_conf: fixme\n    :param minimum_conf_rms: The minimum acceptable difference in the RMS in any new generated conformer.\n        Conformers that are too similar are discarded.\n    :type minimum_conf_rms: float\n    :param flexible: A list of indices that are common with the template molecule\n        that should have new coordinates.\n    :type flexible: List[int]\n    \"\"\"\n    cons = generate_conformers(self, num_conf, minimum_conf_rms, **kwargs)\n    self.RemoveAllConformers()\n    [self.AddConformer(con, assignId=True) for con in cons.GetConformers()]\n</code></pre>"},{"location":"reference/package/#fegrow.package.RMol.optimise_in_receptor","title":"optimise_in_receptor","text":"<pre><code>optimise_in_receptor(*args, **kwargs)\n</code></pre> <p>Enumerate the conformers inside of the receptor by employing ANI2x, a hybrid machine learning / molecular mechanics (ML/MM) approach. ANI2x is neural nework potential for the ligand energetics but works only for the following atoms: H, C, N, O, F, S, Cl.</p> <p>Open Force Field Parsley force field is used for intermolecular interactions with the receptor.</p> <p>:param sigma_scale_factor: is used to scale the Lennard-Jones radii of the atoms. :param relative_permittivity: is used to scale the electrostatic interactions with the protein. :param water_model: can be used to set the force field for any water molecules present in the binding site.</p> Source code in <code>fegrow/package.py</code> <pre><code>def optimise_in_receptor(self, *args, **kwargs):\n    \"\"\"\n    Enumerate the conformers inside of the receptor by employing\n    ANI2x, a hybrid machine learning / molecular mechanics (ML/MM) approach.\n    ANI2x is neural nework potential for the ligand energetics\n    but works only for the following atoms: H, C, N, O, F, S, Cl.\n\n    Open Force Field Parsley force field is used for intermolecular interactions with the receptor.\n\n    :param sigma_scale_factor: is used to scale the Lennard-Jones radii of the atoms.\n    :param relative_permittivity: is used to scale the electrostatic interactions with the protein.\n    :param water_model: can be used to set the force field for any water molecules present in the binding site.\n    \"\"\"\n    if self.GetNumConformers() == 0:\n        print(\"Warning: no conformers so cannot optimise_in_receptor. Ignoring.\")\n        return\n\n    opt_mol, energies = optimise_in_receptor(self, *args, **kwargs)\n    # replace the conformers with the optimised ones\n    self.RemoveAllConformers()\n    [\n        self.AddConformer(conformer, assignId=True)\n        for conformer in opt_mol.GetConformers()\n    ]\n    # save the energies\n    self._save_opt_energies(energies)\n\n    # build a dataframe with the molecules\n    conformer_ids = [c.GetId() for c in self.GetConformers()]\n    df = pandas.DataFrame(\n        {\n            \"ID\": [self.id] * len(energies),\n            \"Conformer\": conformer_ids,\n            \"Energy\": energies,\n        }\n    )\n\n    return df\n</code></pre>"},{"location":"reference/package/#fegrow.package.RMol.sort_conformers","title":"sort_conformers","text":"<pre><code>sort_conformers(energy_range=5)\n</code></pre> <p>For the given molecule and the conformer energies order the energies  and only keep any conformers with in the energy range of the  lowest energy conformer.</p> <p>:param energy_range: The energy range (kcal/mol),     above the minimum, for which conformers should be kept.</p> Source code in <code>fegrow/package.py</code> <pre><code>def sort_conformers(self, energy_range=5):\n    \"\"\"\n    For the given molecule and the conformer energies order the energies\n     and only keep any conformers with in the energy range of the\n     lowest energy conformer.\n\n    :param energy_range: The energy range (kcal/mol),\n        above the minimum, for which conformers should be kept.\n    \"\"\"\n    if self.GetNumConformers() == 0:\n        print(\"An rmol doesn't have any conformers. Ignoring.\")\n        return None\n    elif self.opt_energies is None:\n        raise AttributeError(\n            \"Please run the optimise_in_receptor in order to generate the energies first. \"\n        )\n\n    final_mol, final_energies = sort_conformers(\n        self, self.opt_energies, energy_range=energy_range\n    )\n    # overwrite the current confs\n    self.RemoveAllConformers()\n    [\n        self.AddConformer(conformer, assignId=True)\n        for conformer in final_mol.GetConformers()\n    ]\n    self._save_opt_energies(final_energies)\n\n    # build a dataframe with the molecules\n    conformer_ids = [c.GetId() for c in self.GetConformers()]\n    df = pandas.DataFrame(\n        {\n            \"ID\": [self.id] * len(final_energies),\n            \"Conformer\": conformer_ids,\n            \"Energy\": final_energies,\n        }\n    )\n\n    return df\n</code></pre>"},{"location":"reference/package/#fegrow.package.RMol.rep2D","title":"rep2D","text":"<pre><code>rep2D(idx=-1, rdkit_mol=False, h=True, **kwargs)\n</code></pre> <p>Use RDKit and get a 2D diagram. Uses Compute2DCoords and Draw.MolToImage function</p> <p>Works with IPython Notebook.</p> <p>:param **kwargs: are passed further to Draw.MolToImage function.</p> Source code in <code>fegrow/package.py</code> <pre><code>def rep2D(self, idx=-1, rdkit_mol=False, h=True, **kwargs):\n    \"\"\"\n    Use RDKit and get a 2D diagram.\n    Uses Compute2DCoords and Draw.MolToImage function\n\n    Works with IPython Notebook.\n\n    :param **kwargs: are passed further to Draw.MolToImage function.\n    \"\"\"\n    numbered = copy.deepcopy(self)\n\n    if not h:\n        numbered = Chem.RemoveHs(numbered)\n\n    numbered.RemoveAllConformers()\n    if idx:\n        for atom in numbered.GetAtoms():\n            atom.SetAtomMapNum(atom.GetIdx())\n    Chem.AllChem.Compute2DCoords(numbered)\n\n    if rdkit_mol:\n        return numbered\n    else:\n        return Draw.MolToImage(numbered, **kwargs)\n</code></pre>"},{"location":"reference/package/#fegrow.package.RMol.rep3D","title":"rep3D","text":"<pre><code>rep3D(view=None, prody=None, template=False, confIds: Optional[List[int]] = None)\n</code></pre> <p>Use py3Dmol to obtain the 3D view of the molecule.</p> <p>Works with IPython Notebook.</p> <p>:param view: a view to which add the visualisation. Useful if one wants to 3D view     multiple conformers in one view. :type view: py3Dmol view instance (None) :param prody: A prody protein around which a view 3D can be created :type prody: Prody instance (Default: None) :param template: Whether to visualise the original 3D template as well from which the molecule was made. :type template: bool (False) :param confIds: Select the conformations for display. :type confIds: List[int]</p> Source code in <code>fegrow/package.py</code> <pre><code>def rep3D(\n    self,\n    view=None,\n    prody=None,\n    template=False,\n    confIds: Optional[List[int]] = None,\n):\n    \"\"\"\n    Use py3Dmol to obtain the 3D view of the molecule.\n\n    Works with IPython Notebook.\n\n    :param view: a view to which add the visualisation. Useful if one wants to 3D view\n        multiple conformers in one view.\n    :type view: py3Dmol view instance (None)\n    :param prody: A prody protein around which a view 3D can be created\n    :type prody: Prody instance (Default: None)\n    :param template: Whether to visualise the original 3D template as well from which the molecule was made.\n    :type template: bool (False)\n    :param confIds: Select the conformations for display.\n    :type confIds: List[int]\n    \"\"\"\n    if prody is not None:\n        view = prody_package.proteins.functions.view3D(prody)\n\n    if view is None:\n        view = py3Dmol.view(width=400, height=400, viewergrid=(1, 1))\n\n    for conf in self.GetConformers():\n        # ignore the confIds we've not asked for\n        if confIds is not None and conf.GetId() not in confIds:\n            continue\n\n        mb = Chem.MolToMolBlock(self, confId=conf.GetId())\n        view.addModel(mb, \"lig\")\n\n        # use reverse indexing to reference the just added conformer\n        # http://3dmol.csb.pitt.edu/doc/types.html#AtomSelectionSpec\n        # cmap = plt.get_cmap(\"tab20c\")\n        # hex = to_hex(cmap.colors[i]).split('#')[-1]\n        view.setStyle({\"model\": -1}, {\"stick\": {}})\n\n    if template:\n        mb = Chem.MolToMolBlock(self.template)\n        view.addModel(mb, \"template\")\n        # show as sticks\n        view.setStyle({\"model\": -1}, {\"stick\": {\"color\": \"0xAF10AB\"}})\n\n    # zoom to the last added model\n    view.zoomTo({\"model\": -1})\n    return view\n</code></pre>"},{"location":"reference/package/#fegrow.package.RMol.remove_clashing_confs","title":"remove_clashing_confs","text":"<pre><code>remove_clashing_confs(protein: Union[str, PDBFile], min_dst_allowed=1.0)\n</code></pre> <p>Removing conformations that class with the protein. Note that the original conformer should be well docked into the protein, ideally with some space between the area of growth and the protein, so that any growth on the template doesn't automatically cause clashes.</p> <p>:param protein: The protein against which the conformers should be tested. :type protein: filename or the openmm PDBFile instance or prody instance :param min_dst_allowed: If any atom is within this distance in a conformer, the  conformer will be deleted. :type min_dst_allowed: float in Angstroms</p> Source code in <code>fegrow/package.py</code> <pre><code>def remove_clashing_confs(\n    self, protein: Union[str, openmm.app.PDBFile], min_dst_allowed=1.0\n):\n    \"\"\"\n    Removing conformations that class with the protein.\n    Note that the original conformer should be well docked into the protein,\n    ideally with some space between the area of growth and the protein,\n    so that any growth on the template doesn't automatically cause\n    clashes.\n\n    :param protein: The protein against which the conformers should be tested.\n    :type protein: filename or the openmm PDBFile instance or prody instance\n    :param min_dst_allowed: If any atom is within this distance in a conformer, the\n     conformer will be deleted.\n    :type min_dst_allowed: float in Angstroms\n    \"\"\"\n    if type(protein) is str:\n        protein = openmm.app.PDBFile(protein)\n\n    if type(protein) is openmm.app.PDBFile:\n        protein_coords = (\n            protein.getPositions(asNumpy=True)\n            .in_units_of(openmm.unit.angstrom)\n            ._value\n        )\n    else:\n        protein_coords = protein.getCoords()\n\n    rm_counter = 0\n    for conf in list(self.GetConformers()):\n        # for each atom check how far it is from the protein atoms\n        min_dst = 999_999_999  # arbitrary large distance\n\n        for point in conf.GetPositions():\n            shortest = np.min(\n                np.sqrt(np.sum((point - protein_coords) ** 2, axis=1))\n            )\n            min_dst = min(min_dst, shortest)\n\n            if min_dst &lt; min_dst_allowed:\n                self.RemoveConformer(conf.GetId())\n                logger.debug(\n                    f\"Clash with the protein. Removing conformer id: {conf.GetId()}\"\n                )\n                rm_counter += 1\n                break\n    print(f\"Removed {rm_counter} conformers. \")\n\n    # return self for Dask\n    return self\n</code></pre>"},{"location":"reference/package/#fegrow.package.RMol.set_gnina","title":"set_gnina  <code>staticmethod</code>","text":"<pre><code>set_gnina(loc)\n</code></pre> <p>Set the location of the binary file gnina. This could be your own compiled directory, or a directory where you'd like it to be downloaded.</p> <p>By default, gnina path is to the working directory (~500MB).</p> <p>:param loc: path to gnina binary file. E.g. /dir/path/gnina. Note that right now gnina should  be a binary file with that specific filename \"gnina\". :type loc: str</p> Source code in <code>fegrow/package.py</code> <pre><code>@staticmethod\ndef set_gnina(loc):\n    \"\"\"\n    Set the location of the binary file gnina. This could be your own compiled directory,\n    or a directory where you'd like it to be downloaded.\n\n    By default, gnina path is to the working directory (~500MB).\n\n    :param loc: path to gnina binary file. E.g. /dir/path/gnina. Note that right now gnina should\n     be a binary file with that specific filename \"gnina\".\n    :type loc: str\n    \"\"\"\n    # set gnina location\n    path = Path(loc)\n    if path.is_file():\n        assert path.name == \"gnina\", 'Please ensure gnina binary is named \"gnina\"'\n        RMol.gnina_dir = path.parent\n    else:\n        raise Exception(\"The path is not the binary file gnina\")\n</code></pre>"},{"location":"reference/package/#fegrow.package.RMol.gnina","title":"gnina","text":"<pre><code>gnina(receptor_file, gnina_gpu=False)\n</code></pre> <p>Use GNINA to extract CNNaffinity, which we also recalculate to Kd (nM)</p> <p>LIMITATION: The GNINA binary does not support MAC/Windows.</p> <p>Please cite GNINA accordingly: McNutt, Andrew T., Paul Francoeur, Rishal Aggarwal, Tomohide Masuda, Rocco Meli, Matthew Ragoza, Jocelyn Sunseri, and David Ryan Koes. \"GNINA 1.0: molecular docking with deep learning.\" Journal of cheminformatics 13, no. 1 (2021): 1-20.</p> <p>:param receptor_file: Path to the receptor file. :type receptor_file: str</p> Source code in <code>fegrow/package.py</code> <pre><code>def gnina(self, receptor_file, gnina_gpu=False):\n    \"\"\"\n    Use GNINA to extract CNNaffinity, which we also recalculate to Kd (nM)\n\n    LIMITATION: The GNINA binary does not support MAC/Windows.\n\n    Please cite GNINA accordingly:\n    McNutt, Andrew T., Paul Francoeur, Rishal Aggarwal, Tomohide Masuda, Rocco Meli, Matthew Ragoza,\n    Jocelyn Sunseri, and David Ryan Koes. \"GNINA 1.0: molecular docking with deep learning.\"\n    Journal of cheminformatics 13, no. 1 (2021): 1-20.\n\n    :param receptor_file: Path to the receptor file.\n    :type receptor_file: str\n    \"\"\"\n    RMol._check_download_gnina()\n    gnina_path = os.path.join(RMol.gnina_dir, \"gnina\")\n\n    if not isinstance(receptor_file, str) and not isinstance(receptor_file, Path):\n        raise ValueError(\n            f\"gnina function requires a file path to the receptor. Instead, was given: {type(receptor_file)}\"\n        )\n\n    # get the absolute path\n    receptor = Path(receptor_file)\n    if not receptor.exists():\n        raise ValueError(f'Your receptor \"{receptor_file}\" does not seem to exist.')\n\n    _, CNNaffinities = gnina(self, receptor, gnina_path, gnina_gpu=gnina_gpu)\n\n    return RMol._parse_gnina_cnnaffinities(self, CNNaffinities)\n</code></pre>"},{"location":"reference/package/#fegrow.package.RMol.to_file","title":"to_file","text":"<pre><code>to_file(filename: str)\n</code></pre> <p>Write the molecule and all conformers to file.</p> Note <p>The file type is worked out from the name extension by splitting on <code>.</code>.</p> Source code in <code>fegrow/package.py</code> <pre><code>def to_file(self, filename: str):\n    \"\"\"\n    Write the molecule and all conformers to file.\n\n    Note:\n        The file type is worked out from the name extension by splitting on `.`.\n    \"\"\"\n    file_type = Path(filename).suffix.lower()\n\n    writers = {\n        \".mol\": Chem.MolToMolFile,\n        \".sdf\": Chem.SDWriter,\n        \".pdb\": functools.partial(Chem.PDBWriter, flavor=1),\n        \".xyz\": Chem.MolToXYZFile,\n    }\n\n    func = writers.get(file_type, None)\n    if func is None:\n        raise RuntimeError(\n            f\"The file type {file_type} is not support please chose from {writers.keys()}\"\n        )\n\n    if file_type in [\".pdb\", \".sdf\"]:\n        # multi-frame writers\n\n        with writers[file_type](filename) as WRITER:\n            for conformer in self.GetConformers():\n                WRITER.write(self, confId=conformer.GetId())\n        return\n\n    writers[file_type](self, filename)\n</code></pre>"},{"location":"reference/package/#fegrow.package.RMol.df","title":"df","text":"<pre><code>df()\n</code></pre> <p>Generate a pandas dataframe row for this molecule with SMILES.</p> <p>:returns: pandas dataframe row.</p> Source code in <code>fegrow/package.py</code> <pre><code>def df(self):\n    \"\"\"\n    Generate a pandas dataframe row for this molecule with SMILES.\n\n    :returns: pandas dataframe row.\n    \"\"\"\n    df = pandas.DataFrame(\n        {\n            \"ID\": [self.id],\n            \"Smiles\": [Chem.MolToSmiles(self)],\n        }\n    )\n    # attach energies if they're present\n    if self.opt_energies:\n        df = df.assign(\n            Energies=\", \".join([str(e) for e in sorted(self.opt_energies)])\n        )\n\n    df.set_index([\"ID\"], inplace=True)\n    return df\n</code></pre>"},{"location":"reference/package/#fegrow.package.DaskTasks","title":"DaskTasks","text":"<p>Methods:</p> <ul> <li> <code>scaffold_check</code>             \u2013              <p>:param smih:</p> </li> </ul>"},{"location":"reference/package/#fegrow.package.DaskTasks.scaffold_check","title":"scaffold_check  <code>staticmethod</code>","text":"<pre><code>scaffold_check(smih, scaffold)\n</code></pre> <p>:param smih: :param scaffold: :return: [has_scaffold_bool, protonated_smiles]</p> Source code in <code>fegrow/package.py</code> <pre><code>@staticmethod\n@dask.delayed\ndef scaffold_check(smih, scaffold):\n    \"\"\"\n\n    :param smih:\n    :param scaffold:\n    :return: [has_scaffold_bool, protonated_smiles]\n    \"\"\"\n    params = Chem.SmilesParserParams()\n    params.removeHs = False\n\n    mol = Chem.MolFromSmiles(smih, params=params)\n    if mol is None:\n        return False, None\n\n    if mol.HasSubstructMatch(scaffold):\n        return True, smih\n\n    return False, None\n</code></pre>"},{"location":"reference/package/#fegrow.package.ChemSpace","title":"ChemSpace","text":"<pre><code>ChemSpace(data=None, data_indices=None, dask_cluster=None, dask_local_cluster_kwargs={})\n</code></pre> <p>Streamline working with many RMols or a specific chemical space by employing a pandas dataframe, in combination with Dask for parallellisation.</p> <p>Methods:</p> <ul> <li> <code>optimise_in_receptor</code>             \u2013              <p>Return lists of energies.</p> </li> <li> <code>discard_missing</code>             \u2013              <p>Remove from this list the molecules that have no conformers</p> </li> <li> <code>add_rgroups</code>             \u2013              <p>Note that if they are Smiles:</p> </li> <li> <code>add_data</code>             \u2013              <p>:param data: dictionary {\"Smiles\": [], \"h\": [], ... }</p> </li> <li> <code>add_smiles</code>             \u2013              <p>Add a list of Smiles into this ChemicalSpace</p> </li> <li> <code>evaluate</code>             \u2013              <p>:param indices:</p> </li> <li> <code>add_enamine_molecules</code>             \u2013              <p>For the best scoring molecules, find similar molecules in Enamine REAL database</p> </li> <li> <code>active_learning</code>             \u2013              <p>Model the data using the Training subset. Then use the active learning query method.</p> </li> <li> <code>compute_fps</code>             \u2013              <p>:param smiles_tuple: It has to be a tuple to be hashable (to work with caching).</p> </li> <li> <code>to_sdf</code>             \u2013              <p>Write every molecule and all its fields as properties, to an SDF file.</p> </li> </ul> Source code in <code>fegrow/package.py</code> <pre><code>def __init__(\n    self,\n    data=None,\n    data_indices=None,\n    dask_cluster=None,\n    dask_local_cluster_kwargs={},\n):\n    if data is None:\n        data = ChemSpace.DATAFRAME_DEFAULT_VALUES\n\n    self.df = pandas.DataFrame(data, index=data_indices)\n\n    ChemSpace._dask_cluster = dask_cluster\n\n    if ChemSpace._dask_cluster is None:\n        logger.info(\n            \"No Dask cluster configured. Creating a local cluster of threads. \"\n        )\n        warnings.warn(\n            \"ANI uses TORCHAni which is not threadsafe, leading to random SEGFAULTS. \"\n            \"Use a Dask cluster with processes as a work around \"\n            \"(see the documentation for an example of this workaround) .\"\n        )\n\n        kwargs = {\n            \"n_workers\": None,\n            \"processes\": False,  # turn off Nanny to avoid the problem\n            # with loading of the main file (ie executing it)\n            \"dashboard_address\": \":8989\",\n            **dask_local_cluster_kwargs,\n        }\n        ChemSpace._dask_cluster = LocalCluster(**kwargs)\n        # ChemSpace._dask_cluster = Scheduler()\n        # ChemSpace._dask_cluster = LocalCluster(preload_nanny=[\"print('Hi Nanny')\"],\n        #                                        preload=[\"pint\"], n_workers=1\n        #                                        ) #asynchronous=True)\n\n    ChemSpace._dask_client = Client(\n        ChemSpace._dask_cluster\n    )  # ChemSpace._dask_cluster, asynchronous=True)\n    print(f\"Dask can be watched on {ChemSpace._dask_client.dashboard_link}\")\n\n    self._scaffolds = []\n    self._model = None\n    self._query = None\n    self._query_label = None\n</code></pre>"},{"location":"reference/package/#fegrow.package.ChemSpace.optimise_in_receptor","title":"optimise_in_receptor","text":"<pre><code>optimise_in_receptor(*args, **kwargs)\n</code></pre> <p>Return lists of energies.</p> Source code in <code>fegrow/package.py</code> <pre><code>def optimise_in_receptor(self, *args, **kwargs):\n    \"\"\"\n    Return lists of energies.\n    \"\"\"\n\n    # daskify parameters\n    args = [dask.delayed(arg) for arg in args]\n    kwargs = {k: dask.delayed(v) for k, v in kwargs.items()}\n\n    # create the dask jobs\n    delayed_optimise_in_receptor = dask.delayed(optimise_in_receptor)\n    jobs = {}\n    for i, row in self.df.iterrows():\n        if row.Mol.GetNumConformers() == 0:\n            print(\n                f\"Warning: mol {i} has no conformers. Ignoring receptor optimisation.\"\n            )\n            continue\n\n        jobs[row.Mol] = delayed_optimise_in_receptor(row.Mol, *args, **kwargs)\n\n    # dask batch compute\n    results = dict(zip(jobs.keys(), self.dask_client.compute(list(jobs.values()))))\n\n    # extract results\n    dfs = []\n    for mol, result in results.items():\n        opt_mol, energies = result.result()\n        mol.RemoveAllConformers()\n        # replace the conformers with the optimised ones\n        [mol.AddConformer(c) for c in opt_mol.GetConformers()]\n\n        mol.SetProp(\"energies\", str(energies))\n        dfs.append(pandas.DataFrame({}))\n        mol._save_opt_energies(energies)\n</code></pre>"},{"location":"reference/package/#fegrow.package.ChemSpace.discard_missing","title":"discard_missing","text":"<pre><code>discard_missing()\n</code></pre> <p>Remove from this list the molecules that have no conformers</p> Source code in <code>fegrow/package.py</code> <pre><code>def discard_missing(self):\n    \"\"\"\n    Remove from this list the molecules that have no conformers\n    \"\"\"\n    ids_to_remove = []\n    for i, row in self.df.iterrows():\n        if row.Mol.GetNumConformers() == 0:\n            print(f\"Discarding a molecule (id {i}) due to the lack of conformers. \")\n            ids_to_remove.append(i)\n\n    self.df = self.df[~self.df.index.isin(ids_to_remove)]\n    return ids_to_remove\n</code></pre>"},{"location":"reference/package/#fegrow.package.ChemSpace.add_rgroups","title":"add_rgroups","text":"<pre><code>add_rgroups(rgroups_linkers, rgroups2=None, alltoall=False)\n</code></pre> Note that if they are Smiles <ul> <li>if they have an * atom (e.g. RDKit atom.SetAtomicNum(0)), this will be used for attachment to the scaffold</li> <li>if they don't have an * atom, the scaffold will be fitted as a substructure</li> </ul> <p>First link the linker to the scaffold. Then add the rgroups.</p> <p>:param rgroups2: A list of Smiles. Molecules will be accepted and converted to Smiles. :param linker: A molecule. Ideally it has 2 atatchement points. :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def add_rgroups(self, rgroups_linkers, rgroups2=None, alltoall=False):\n    \"\"\"\n    Note that if they are Smiles:\n     - if they have an * atom (e.g. RDKit atom.SetAtomicNum(0)), this will be used for attachment to the scaffold\n     - if they don't have an * atom, the scaffold will be fitted as a substructure\n\n    First link the linker to the scaffold. Then add the rgroups.\n\n    :param rgroups2: A list of Smiles. Molecules will be accepted and converted to Smiles.\n    :param linker: A molecule. Ideally it has 2 atatchement points.\n    :return:\n    \"\"\"\n    scaffold = dask.delayed(self._scaffolds[0])\n\n    if not isinstance(rgroups_linkers, typing.Iterable):\n        rgroups_linkers = [rgroups_linkers]\n\n    if rgroups2 is not None and not isinstance(rgroups2, typing.Iterable):\n        rgroups2 = [rgroups2]\n\n    # create the dask jobs\n    delayed_build_molecule = dask.delayed(build_molecule)\n\n    jobs = [delayed_build_molecule(scaffold, linker) for linker in rgroups_linkers]\n\n    # if linkers and rgroups are attached, add them in two iterations\n    if rgroups2 is not None and not alltoall:\n        # for each attached linker, attach an rgroup with the same position\n        jobs = [\n            delayed_build_molecule(scaffold_linked, rgroup)\n            for rgroup, scaffold_linked in itertools.zip_longest(\n                rgroups2, jobs, fillvalue=jobs[0]\n            )\n        ]\n    elif rgroups2 is not None and alltoall:\n        jobs = [\n            delayed_build_molecule(scaffold_linked, rgroup)\n            for rgroup, scaffold_linked in itertools.product(rgroups2, jobs)\n        ]\n\n    results = self.dask_client.compute(jobs)\n    built_mols = [r.result() for r in results]\n\n    # get Smiles\n    built_mols_smiles = [Chem.MolToSmiles(mol) for mol in built_mols]\n\n    # extract the H indices used for attaching the scaffold\n    hs = [mol.GetIntProp(\"attachment_point\") for mol in built_mols]\n\n    self.add_data({\"Smiles\": built_mols_smiles, \"Mol\": built_mols, \"h\": hs})\n</code></pre>"},{"location":"reference/package/#fegrow.package.ChemSpace.add_data","title":"add_data","text":"<pre><code>add_data(data)\n</code></pre> <p>:param data: dictionary {\"Smiles\": [], \"h\": [], ... } :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def add_data(self, data):\n    \"\"\"\n\n    :param data: dictionary {\"Smiles\": [], \"h\": [], ... }\n    :return:\n    \"\"\"\n\n    # ensure that the new indices start at the end\n    last_index = max([self.df.index.max() + 1])\n    if np.isnan(last_index):\n        last_index = 0\n\n    # ensure correct default values in the new rows\n    data_with_defaults = ChemSpace.DATAFRAME_DEFAULT_VALUES.copy()\n    data_with_defaults.update(data)\n\n    # update the internal dataframe\n    new_indices = range(last_index, last_index + len(data_with_defaults[\"Smiles\"]))\n    prepared_data = pandas.DataFrame(data_with_defaults, index=new_indices)\n    self.df = pandas.concat([self.df, prepared_data])\n    return prepared_data\n</code></pre>"},{"location":"reference/package/#fegrow.package.ChemSpace.add_smiles","title":"add_smiles","text":"<pre><code>add_smiles(smiles_list, h=NA, protonate=False)\n</code></pre> <p>Add a list of Smiles into this ChemicalSpace</p> <p>:param h: which h was used to connect to the :param protonate: use openbabel to protonate each smile :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def add_smiles(self, smiles_list, h=pandas.NA, protonate=False):\n    \"\"\"\n    Add a list of Smiles into this ChemicalSpace\n\n    :param h: which h was used to connect to the\n    :param protonate: use openbabel to protonate each smile\n    :return:\n    \"\"\"\n\n    if protonate:\n        delayed_protonations = [\n            DaskTasks.obabel_protonate(smi) for smi in smiles_list\n        ]\n        jobs = self.dask_client.compute(delayed_protonations)\n        smiles_list = [job.result() for job in jobs]\n\n    # convert the Smiles into molecules\n    params = Chem.SmilesParserParams()\n    params.removeHs = False\n    mols = [Chem.MolFromSmiles(smiles, params=params) for smiles in smiles_list]\n\n    self.add_data({\"Smiles\": smiles_list, \"Mol\": mols, \"h\": h})\n</code></pre>"},{"location":"reference/package/#fegrow.package.ChemSpace.evaluate","title":"evaluate","text":"<pre><code>evaluate(indices: Union[Sequence[int], DataFrame] = None, scoring_function=None, gnina_path=None, gnina_gpu=False, num_conf=50, minimum_conf_rms=0.5, penalty=NA, al_ignore_penalty=True, **kwargs)\n</code></pre> <p>:param indices: :param scoring_function: :param gnina_path: :param gnina_gpu: :param num_conf: :param minimum_conf_rms: :param penalty: :param al_ignore_penalty: :param kwargs: :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def evaluate(\n    self,\n    indices: Union[Sequence[int], pandas.DataFrame] = None,\n    scoring_function=None,\n    gnina_path=None,\n    gnina_gpu=False,\n    num_conf=50,\n    minimum_conf_rms=0.5,\n    penalty=pd.NA,\n    al_ignore_penalty=True,\n    **kwargs,\n):\n    \"\"\"\n\n    :param indices:\n    :param scoring_function:\n    :param gnina_path:\n    :param gnina_gpu:\n    :param num_conf:\n    :param minimum_conf_rms:\n    :param penalty:\n    :param al_ignore_penalty:\n    :param kwargs:\n    :return:\n    \"\"\"\n\n    # evaluate all molecules if no indices are picked\n    if indices is None:\n        indices = slice(None)\n\n    if isinstance(indices, pandas.DataFrame):\n        if len(indices) &lt;= 2:\n            raise ValueError(\"Please provide at least 3 items\")\n        indices = indices.index\n\n    selected_rows = self.df.loc[indices]\n\n    # discard computed rows\n    selected_rows = selected_rows[selected_rows.score.isna()]\n\n    if len(self._scaffolds) == 0:\n        print(\"Please add scaffolds to the system for the evaluation. \")\n    elif len(self._scaffolds) &gt; 1:\n        raise NotImplementedError(\n            \"For now we only allow working with one scaffold. \"\n        )\n\n    # should be enough to do it once, shared\n    ## GENERATE CONFORMERS\n\n    if gnina_path is not None:\n        # gnina_path = delayed(os.path.join(RMol.gnina_dir, 'gnina'))\n        RMol.set_gnina(os.path.join(RMol.gnina_dir, \"gnina\"))\n    RMol._check_download_gnina()\n\n    num_conf = dask.delayed(num_conf)\n    minimum_conf_rms = dask.delayed(minimum_conf_rms)\n    protein_file = dask.delayed(self._protein_filename)\n    RMol._check_download_gnina()\n\n    scaffold = dask.delayed(self._scaffolds[0])\n    # extract which hydrogen was used for the attachement\n    h_attachements = [\n        a.GetIdx() for a in self._scaffolds[0].GetAtoms() if a.GetAtomicNum() == 0\n    ]\n\n    h_attachement_index = None\n    if len(h_attachements) &gt; 0:\n        h_attachement_index = h_attachements[0]\n\n    # create dask jobs\n    delayed_evaluate = dask.delayed(_evaluate_atomic)\n    jobs = {}\n    for i, row in selected_rows.iterrows():\n        jobs[i] = delayed_evaluate(\n            scaffold,\n            row.Smiles,\n            protein_file,\n            h=h_attachement_index,\n            num_conf=num_conf,\n            minimum_conf_rms=minimum_conf_rms,\n            scoring_function=scoring_function,\n            gnina_gpu=gnina_gpu,\n            **kwargs,\n        )\n\n    # run all\n    results = dict(zip(jobs.keys(), self.dask_client.compute(list(jobs.values()))))\n\n    # gather the results\n    for i, result in results.items():\n        Training = True\n        build_succeeded = True\n\n        try:\n            mol, data = result.result()\n\n            # save all data generated\n            if mol is not None:\n                for k, v in data.items():\n                    mol.SetProp(k, str(v))\n\n                # replace the original molecule with the new one\n                self.df.at[i, \"Mol\"] = mol\n\n            # extract the score\n            score = data[\"score\"]\n        except subprocess.CalledProcessError as E:\n            logger.error(\"Failed Process\", E, E.cmd, E.output, E.stdout, E.stderr)\n            score = penalty\n            build_succeeded = False\n\n            if al_ignore_penalty:\n                Training = False\n        except Exception:\n            # failed to finish the protocol, set the penalty\n            score = penalty\n            build_succeeded = False\n\n            if al_ignore_penalty:\n                Training = False\n\n        self.df.loc[i, [\"score\", \"Training\", \"Success\"]] = (\n            score,\n            Training,\n            build_succeeded,\n        )\n\n    logger.info(f\"Evaluated {len(results)} cases\")\n    return self.df.loc[indices]\n</code></pre>"},{"location":"reference/package/#fegrow.package.ChemSpace.add_enamine_molecules","title":"add_enamine_molecules","text":"<pre><code>add_enamine_molecules(n_best=1, results_per_search=100, remove_scaffold_h=False)\n</code></pre> <p>For the best scoring molecules, find similar molecules in Enamine REAL database  and add them to the dataset.</p> <p>Make sure you have the permission/license to use https://sw.docking.org/search.html     this way.</p> <p>@scaffold: The scaffold molecule that has to be present in the found molecules.     If None, this requirement will be ignored. @molecules_per_smile: How many top results (molecules) per Smiles searched.</p> Source code in <code>fegrow/package.py</code> <pre><code>def add_enamine_molecules(\n    self, n_best=1, results_per_search=100, remove_scaffold_h=False\n):\n    \"\"\"\n    For the best scoring molecules, find similar molecules in Enamine REAL database\n     and add them to the dataset.\n\n    Make sure you have the permission/license to use https://sw.docking.org/search.html\n        this way.\n\n    @scaffold: The scaffold molecule that has to be present in the found molecules.\n        If None, this requirement will be ignored.\n    @molecules_per_smile: How many top results (molecules) per Smiles searched.\n    \"\"\"\n\n    from pydockingorg import Enamine\n\n    if len(self._scaffolds) &gt; 1:\n        raise NotImplementedError(\"Only one scaffold is supported atm.\")\n\n    scaffold = self._scaffolds[0]\n\n    # get the best performing molecules\n    vl = self.df.sort_values(by=\"score\", ascending=False)\n    best_vl_for_searching = vl[:n_best]\n\n    # nothing to search for yet\n    if len(best_vl_for_searching[~best_vl_for_searching.score.isna()]) == 0:\n        return\n\n    if len(set(best_vl_for_searching.h)) &gt; 1:\n        raise NotImplementedError(\"Multiple growth vectors are used. \")\n\n    # filter out previously queried molecules\n    new_searches = best_vl_for_searching[\n        best_vl_for_searching.enamine_searched == False  # noqa: E712\n    ]\n    smiles_to_search = list(new_searches.Smiles)\n\n    start = time.time()\n    print(f\"Querying Enamine REAL. Looking up {len(smiles_to_search)} smiles.\")\n    try:\n        with Enamine() as DB:\n            results: pandas.DataFrame = DB.search_smiles(\n                smiles_to_search,\n                remove_duplicates=True,\n                results_per_search=results_per_search,\n            )\n    except requests.exceptions.HTTPError as HTTPError:\n        print(\"Enamine API call failed. \", HTTPError)\n        return\n    print(\n        f\"Enamine returned with {len(results)} rows in {time.time() - start:.1f}s.\"\n    )\n\n    # update the database that this molecule has been searched\n    self.df.loc[new_searches.index, \"enamine_searched\"] = True\n\n    if len(results) == 0:\n        print(\"The server did not return a single Smiles!\")\n        return\n\n    # prepare the scaffold for testing its presence\n    # specifically, the hydrogen was replaced and has to be removed\n    # for now we assume we only are growing one vector at a time - fixme\n    if remove_scaffold_h:\n        scaffold_noh = Chem.EditableMol(scaffold)\n        scaffold_noh.RemoveAtom(int(best_vl_for_searching.iloc[0].h))\n        scaffold = scaffold_noh.GetMol()\n\n    dask_scaffold = dask.delayed(scaffold)\n\n    start = time.time()\n    # protonate and check for scaffold\n    delayed_protonations = [\n        DaskTasks.obabel_protonate(smi.rsplit(maxsplit=1)[0])\n        for smi in results.hitSmiles.values\n    ]\n    jobs = self.dask_client.compute(\n        [\n            DaskTasks.scaffold_check(smih, dask_scaffold)\n            for smih in delayed_protonations\n        ]\n    )\n    scaffold_test_results = [job.result() for job in jobs]\n    scaffold_mask = [r[0] for r in scaffold_test_results]\n    # smiles None means that the molecule did not have our scaffold\n    protonated_smiles = [r[1] for r in scaffold_test_results if r[1] is not None]\n    print(\n        f\"Dask obabel protonation + scaffold test finished in {time.time() - start:.2f}s.\"\n    )\n    print(\n        f\"Tested scaffold presence. Kept {sum(scaffold_mask)}/{len(scaffold_mask)}.\"\n    )\n\n    if len(scaffold_mask) &gt; 0:\n        similar = results[scaffold_mask]\n        similar.hitSmiles = protonated_smiles\n    else:\n        similar = pandas.DataFrame(columns=results.columns)\n\n    # filter out Enamine molecules which were previously added\n    new_enamines = similar[~similar.id.isin(vl.enamine_id)]\n\n    warnings.warn(\n        f\"Only one H vector is assumed and used. Picking {vl.h[0]} hydrogen on the scaffold. \"\n    )\n    new_data = {\n        \"Smiles\": list(new_enamines.hitSmiles.values),\n        \"h\": vl.h[0],  # fixme: for now assume that only one vector is used\n        \"enamine_id\": list(new_enamines.id.values),\n    }\n\n    print(\"Adding: \", len(new_enamines.hitSmiles.values))\n    return self.add_data(new_data)\n</code></pre>"},{"location":"reference/package/#fegrow.package.ChemSpace.active_learning","title":"active_learning","text":"<pre><code>active_learning(n=1, first_random=True, score_higher_better=True, model=None, query=None, learner_type=None)\n</code></pre> <p>Model the data using the Training subset. Then use the active learning query method.</p> <p>See properties \"model\" and \"query\" for finer control.</p> <p>It's better to save the FPs in the dataframe. Or in the underlying system. :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def active_learning(\n    self,\n    n=1,\n    first_random=True,\n    score_higher_better=True,\n    model=None,\n    query=None,\n    learner_type=None,\n):\n    \"\"\"\n    Model the data using the Training subset. Then use the active learning query method.\n\n    See properties \"model\" and \"query\" for finer control.\n\n    It's better to save the FPs in the dataframe. Or in the underlying system.\n    :return:\n    \"\"\"\n\n    training = self.df[self.df.Training]\n    selection = self.df[~self.df.Training]\n\n    if training.empty:\n        if first_random:\n            warnings.warn(\n                \"Selecting randomly the first samples to be studied (no score data yet). \"\n            )\n            return selection.sample(n)\n        else:\n            raise ValueError(\n                'There is no scores for active learning. Please use the \"first_random\" property. '\n            )\n\n    # get the scored subset\n    # fixme - multitarget?\n    train_targets = training[\"score\"].to_numpy(dtype=float)\n\n    library_features = self.compute_fps(tuple(self.df.Smiles))\n\n    train_features = library_features[training.index]\n\n    selection_features = library_features[selection.index]\n\n    import fegrow.al\n\n    if model is not None:\n        self.model = model\n    if self.model is None:\n        self.model = fegrow.al.Model.gaussian_process()\n\n    if query is not None:\n        self.query = query\n\n    # employ Greedy query by default\n    if self.query is None:\n        self.query = fegrow.al.Query.Greedy()\n\n    # update on how many to querry\n    query = functools.partial(self.query, n_instances=n)\n\n    target_multiplier = 1\n    if score_higher_better is True:\n        target_multiplier = -1\n\n    if self.query_label in [\"greedy\", \"thompson\", \"EI\", \"PI\"]:\n        target_multiplier *= 1\n    elif self.query_label == \"UCB\":\n        target_multiplier *= -1\n\n    train_targets = train_targets * target_multiplier\n\n    # only GP uses Bayesian Optimizer\n    if learner_type is not None:\n        learner = learner_type(\n            estimator=self.model,\n            X_training=train_features,\n            y_training=train_targets,\n            query_strategy=query,\n        )\n    elif isinstance(self.model, gaussian_process.GaussianProcessRegressor):\n        learner = modAL.models.BayesianOptimizer(\n            estimator=self.model,\n            X_training=train_features,\n            y_training=train_targets,\n            query_strategy=query,\n        )\n    else:\n        learner = modAL.models.ActiveLearner(\n            estimator=self.model,\n            X_training=train_features,\n            y_training=train_targets,\n            query_strategy=query,\n        )\n\n    inference = learner.predict(library_features) * target_multiplier\n\n    self.df[\"regression\"] = inference.T.tolist()\n\n    selection_idx, _ = learner.query(selection_features)\n\n    return selection.iloc[selection_idx]\n</code></pre>"},{"location":"reference/package/#fegrow.package.ChemSpace.compute_fps","title":"compute_fps  <code>cached</code>","text":"<pre><code>compute_fps(smiles_tuple)\n</code></pre> <p>:param smiles_tuple: It has to be a tuple to be hashable (to work with caching). :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>@functools.cache\ndef compute_fps(self, smiles_tuple):\n    \"\"\"\n    :param smiles_tuple: It has to be a tuple to be hashable (to work with caching).\n    :return:\n    \"\"\"\n    futures = self._dask_client.map(ChemSpace._compute_fp_from_smiles, smiles_tuple)\n    fps = np.array([r.result() for r in futures])\n\n    return fps\n</code></pre>"},{"location":"reference/package/#fegrow.package.ChemSpace.to_sdf","title":"to_sdf","text":"<pre><code>to_sdf(filename, failed=False, unbuilt=True)\n</code></pre> <p>Write every molecule and all its fields as properties, to an SDF file.</p> <p>:return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def to_sdf(self, filename, failed=False, unbuilt=True):\n    \"\"\"\n    Write every molecule and all its fields as properties, to an SDF file.\n\n    :return:\n    \"\"\"\n    with Chem.SDWriter(filename) as SD:\n        columns = self.df.columns.to_list()\n        columns.remove(\"Mol\")\n\n        for i, row in self.df.iterrows():\n            # ignore this molecule because it failed during the build\n            if failed is False and row.Success is False:\n                continue\n\n            # ignore this molecule because it was not built yet\n            if unbuilt is False and row.Success is pandas.NA:\n                continue\n\n            mol = row.Mol\n            mol.SetIntProp(\"index\", i)\n            for column in columns:\n                value = getattr(row, column)\n                mol.SetProp(column, str(value))\n\n            mol.ClearProp(\"attachement_point\")\n            SD.write(mol)\n</code></pre>"},{"location":"reference/package/#fegrow.package.RGroups","title":"RGroups","text":"<pre><code>RGroups()\n</code></pre> <p>               Bases: <code>DataFrame</code></p> <p>The default R-Group library with visualisation (mols2grid).</p> Source code in <code>fegrow/package.py</code> <pre><code>def __init__(self):\n    data = RGroups._load_data()\n    super().__init__(data)\n\n    self._fegrow_grid = mols2grid.MolGrid(\n        self, removeHs=True, mol_col=\"Mol\", use_coords=False, name=\"m2\"\n    )\n</code></pre>"},{"location":"reference/package/#fegrow.package.Linkers","title":"Linkers","text":"<pre><code>Linkers()\n</code></pre> <p>               Bases: <code>DataFrame</code></p> <p>A linker library presented as a grid molecules using mols2grid library.</p> Source code in <code>fegrow/package.py</code> <pre><code>def __init__(self):\n    # initialise self dataframe\n    data = Linkers._load_data()\n    super().__init__(data)\n\n    self._fegrow_grid = mols2grid.MolGrid(\n        self,\n        removeHs=True,\n        mol_col=\"Mol\",\n        use_coords=False,\n        name=\"m1\",\n        prerender=False,\n    )\n</code></pre>"},{"location":"reference/package/#fegrow.package.build_molecule","title":"build_molecule","text":"<pre><code>build_molecule(scaffolds: Mol, r_group: Union[Mol, str], scaffold_point: Optional[int] = None, rgroup_point: Optional[int] = None, keep: Optional[int] = None)\n</code></pre> <p>:param scaffolds: :param r_groups: :param scaffold_point: attachement point on the scaffold :param keep: When the scaffold is grown from an internal atom that divides the molecules into separate     submolecules, keep the submolecule with this atom index. :return:</p> Source code in <code>fegrow/package.py</code> <pre><code>def build_molecule(\n    scaffolds: Chem.Mol,\n    r_group: Union[Chem.Mol, str],\n    scaffold_point: Optional[int] = None,\n    rgroup_point: Optional[int] = None,\n    keep: Optional[int] = None,\n):\n    \"\"\"\n\n    :param scaffolds:\n    :param r_groups:\n    :param scaffold_point: attachement point on the scaffold\n    :param keep: When the scaffold is grown from an internal atom that divides the molecules into separate\n        submolecules, keep the submolecule with this atom index.\n    :return:\n    \"\"\"\n\n    if isinstance(r_group, list) and len(r_group) == 0:\n        raise ValueError(\"Empty list received. Please pass any R-groups or R-linkers. \")\n\n    if isinstance(scaffold_point, list) or isinstance(scaffolds, list):\n        raise ValueError(\"Only one scaffold and rgroup at at time is permitted. \")\n\n    # scaffolds were created earlier, they are most likely templates combined with linkers,\n    if isinstance(scaffolds, ChemSpace):\n        # fixme - these should become \"the cores\", it's simple with one mol, and tricky with more of them,\n        scaffolds = [mol for idx, mol in scaffolds.dataframe.Mol.items()]\n\n    # convert smiles into a molecule\n    if isinstance(r_group, str):\n        if \"*\" not in r_group and rgroup_point is None:\n            raise ValueError(\n                \"The SMILES used for the R-Group has to have an R-group atom. \"\n                \"That is the character * in Smiles, or you can use the RDKit function .SetAtomicNum(0) \"\n            )\n        params = Chem.SmilesParserParams()\n        params.removeHs = False\n        r_group = Chem.MolFromSmiles(r_group, params=params)\n\n        # set the attachement point on the R-group\n        if rgroup_point is not None:\n            r_group.GetAtomWithIdx(rgroup_point).SetAtomicNum(0)\n\n    built_mols = build_molecules_with_rdkit(scaffolds, r_group, scaffold_point, keep)\n\n    mol, scaffold, scaffold_no_attachement = built_mols\n    rmol = RMol(mol)\n\n    if hasattr(scaffold, \"template\") and isinstance(scaffold.template, rdkit.Chem.Mol):\n        # save the original scaffold (e.g. before the linker was added)\n        # this means that conformer generation will always have to regenerate the previously added R-groups/linkers\n        rmol._save_template(scaffold.template)\n    else:\n        rmol._save_template(scaffold_no_attachement)\n\n    return rmol\n</code></pre>"},{"location":"reference/receptor/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> receptor","text":""},{"location":"reference/receptor/#fegrow.receptor","title":"receptor","text":"<p>Classes:</p> <ul> <li> <code>NoPostMinimisationConformersError</code>           \u2013            <p>Raise if no conformers survive minimisation (due to e.g. simulation blowing up)</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>fix_receptor</code>             \u2013              <p>Use PDBFixer to correct the input and add hydrogens with the given pH.</p> </li> <li> <code>optimise_in_receptor</code>             \u2013              <p>For each of the input molecule conformers optimise the system using the chosen force field with the receptor held fixed.</p> </li> <li> <code>sort_conformers</code>             \u2013              <p>For the given molecule and the conformer energies order the energies and only keep any conformers with in the energy</p> </li> </ul>"},{"location":"reference/receptor/#fegrow.receptor.NoPostMinimisationConformersError","title":"NoPostMinimisationConformersError","text":"<p>               Bases: <code>Exception</code></p> <p>Raise if no conformers survive minimisation (due to e.g. simulation blowing up)</p>"},{"location":"reference/receptor/#fegrow.receptor.fix_receptor","title":"fix_receptor","text":"<pre><code>fix_receptor(input_file: str, output_file: str, pH: float = 7.0)\n</code></pre> <p>Use PDBFixer to correct the input and add hydrogens with the given pH.</p> <p>:param input_file: The name of the pdb file which contains the receptor. :param output_file: The name of the pdb file the fixed receptor should be wrote to. :param pH:The ph the pronation state should be fixed for.</p> Source code in <code>fegrow/receptor.py</code> <pre><code>def fix_receptor(input_file: str, output_file: str, pH: float = 7.0):\n    \"\"\"\n    Use PDBFixer to correct the input and add hydrogens with the given pH.\n\n    :param input_file: The name of the pdb file which contains the receptor.\n    :param output_file: The name of the pdb file the fixed receptor should be wrote to.\n    :param pH:The ph the pronation state should be fixed for.\n    \"\"\"\n    fixer = PDBFixer(filename=input_file)\n    fixer.findMissingResidues()\n    fixer.findMissingAtoms()\n    fixer.addMissingAtoms()\n    fixer.addMissingHydrogens(pH)\n    app.PDBFile.writeFile(fixer.topology, fixer.positions, open(output_file, \"w\"))\n</code></pre>"},{"location":"reference/receptor/#fegrow.receptor.optimise_in_receptor","title":"optimise_in_receptor","text":"<pre><code>optimise_in_receptor(ligand: Mol, receptor_file: Union[str, PDBFile], ligand_force_field: ForceField, use_ani: bool = True, sigma_scale_factor: float = 0.8, relative_permittivity: float = 4, water_model: str = 'tip3p.xml', platform_name: str = 'CPU', ligand_indices_to_freeze: Optional[list[int]] = None) -&gt; Tuple[Mol, List[float]]\n</code></pre> <p>For each of the input molecule conformers optimise the system using the chosen force field with the receptor held fixed.</p> <p>Parameters:</p> <ul> <li> <code>ligand</code>               (<code>Mol</code>)           \u2013            <p>The ligand with starting conformers already filtered for clashes with the receptor.</p> </li> <li> <code>receptor_file</code>               (<code>Union[str, PDBFile]</code>)           \u2013            <p>The pdb file of the fixed and pronated receptor.</p> </li> <li> <code>ligand_force_field</code>               (<code>ForceField</code>)           \u2013            <p>The base ligand force field that should be used.</p> </li> <li> <code>use_ani</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If we should try and use ani2x for the internal energy of the ligand.</p> </li> <li> <code>sigma_scale_factor</code>               (<code>float</code>, default:                   <code>0.8</code> )           \u2013            <p>The factor by which all sigma values should be scaled</p> </li> <li> <code>relative_permittivity</code>               (<code>float</code>, default:                   <code>4</code> )           \u2013            <p>The relativity permittivity which should be used to scale all charges 1/sqrt(permittivity)</p> </li> <li> <code>water_model</code>               (<code>str</code>, default:                   <code>'tip3p.xml'</code> )           \u2013            <p>If set to None, the water model is ignored. Acceptable can be found in the openmmforcefields package.</p> </li> <li> <code>platform_name</code>               (<code>str</code>, default:                   <code>'CPU'</code> )           \u2013            <p>The OpenMM platform name, 'cuda' if available, with the 'cpu' used by default. See the OpenMM documentation of Platform.</p> </li> <li> <code>ligand_indices_to_freeze</code>               (<code>Optional[list[int]]</code>, default:                   <code>None</code> )           \u2013            <p>The ligand indices to be frozen (relative to the ligand)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tuple[Mol, List[float]]</code>           \u2013            <p>A copy of the input molecule with the optimised positions.</p> </li> </ul> Source code in <code>fegrow/receptor.py</code> <pre><code>def optimise_in_receptor(\n    ligand: Chem.Mol,\n    receptor_file: Union[str, app.PDBFile],\n    ligand_force_field: ForceField,\n    use_ani: bool = True,\n    sigma_scale_factor: float = 0.8,\n    relative_permittivity: float = 4,\n    water_model: str = \"tip3p.xml\",\n    platform_name: str = \"CPU\",\n    ligand_indices_to_freeze: Optional[list[int]] = None,\n) -&gt; Tuple[Chem.Mol, List[float]]:\n    \"\"\"\n    For each of the input molecule conformers optimise the system using the chosen force field with the receptor held fixed.\n\n    Args:\n        ligand:\n            The ligand with starting conformers already filtered for clashes with the receptor.\n        receptor_file:\n            The pdb file of the fixed and pronated receptor.\n        ligand_force_field:\n            The base ligand force field that should be used.\n        use_ani:\n            If we should try and use ani2x for the internal energy of the ligand.\n        sigma_scale_factor:\n            The factor by which all sigma values should be scaled\n        relative_permittivity:\n            The relativity permittivity which should be used to scale all charges 1/sqrt(permittivity)\n        water_model:\n            If set to None, the water model is ignored. Acceptable can be found in the\n            openmmforcefields package.\n        platform_name:\n            The OpenMM platform name, 'cuda' if available, with the 'cpu' used by default.\n            See the OpenMM documentation of Platform.\n        ligand_indices_to_freeze:\n            The ligand indices to be frozen (relative to the ligand)\n\n    Returns:\n        A copy of the input molecule with the optimised positions.\n    \"\"\"\n\n    ligand_force_fields = {\n        \"openff\": \"openff_unconstrained-2.0.0.offxml\",\n        \"gaff\": \"gaff-2.11\",\n    }\n\n    platform = Platform.getPlatformByName(platform_name.upper())\n\n    # assume the receptor has already been fixed and hydrogens have been added.\n    if type(receptor_file) is str:\n        receptor_file = app.PDBFile(receptor_file)\n    # receptor forcefield\n    receptor_ff = \"amber14/protein.ff14SB.xml\"\n\n    # load the molecule into openff\n    openff_mol = OFFMolecule.from_rdkit(ligand, allow_undefined_stereo=True)\n\n    forcefields = [receptor_ff]\n    if water_model:\n        forcefields.append(water_model)\n\n    # now we need to make our parameterised system, make a system generator\n    system_generator = SystemGenerator(\n        forcefields=forcefields,\n        small_molecule_forcefield=ligand_force_fields[ligand_force_field],\n        cache=None,\n        molecules=openff_mol,\n    )\n    # now make a combined receptor and ligand topology\n    parmed_receptor = parmed.openmm.load_topology(\n        receptor_file.topology, xyz=receptor_file.positions\n    )\n    parmed_ligand = parmed.openmm.load_topology(\n        openff_mol.to_topology().to_openmm(), xyz=openff_mol.conformers[0]\n    )\n    complex_structure = parmed_receptor + parmed_ligand\n    # build the complex system\n    system = system_generator.create_system(complex_structure.topology)\n\n    # work out the index of the atoms in the ligand assuming they are the last residue?\n    # is this always true if we add the ligand to the receptor?\n    ligand_res = list(complex_structure.topology.residues())[-1]\n    ligand_idx = [atom.index for atom in ligand_res.atoms()]\n    # now set all atom mass to 0 if not in the ligand\n    for i in range(system.getNumParticles()):\n        if i not in ligand_idx:\n            system.setParticleMass(i, 0)\n\n    if ligand_indices_to_freeze is not None:\n        logger.info(\"Freezing ligand indices\")\n        for idx in ligand_indices_to_freeze:\n            system.setParticleMass(ligand_idx[idx], 0)\n\n    # if we want to use ani2x check we can and adapt the system\n    if use_ani and _can_use_ani2x(openff_mol):\n        print(\"using ani2x\")\n        potential = MLPotential(\"ani2x\", platform_name=platform_name)\n\n        # save the torch model animodel.pt to a temporary file to ensure this is thread safe\n        # note this file will be closed when garbage collected\n        tmpfile = tempfile.NamedTemporaryFile()\n\n        complex_system = potential.createMixedSystem(\n            complex_structure.topology, system, ligand_idx, filename=tmpfile.name\n        )\n    else:\n        print(\"Using force field\")\n        complex_system = system\n    # scale the charges and sigma values\n    _scale_system(\n        system=complex_system,\n        sigma_scale_factor=sigma_scale_factor,\n        relative_permittivity=relative_permittivity,\n    )\n\n    # propagate the System with Langevin dynamics note integrator note used.\n    time_step = 1 * unit.femtoseconds  # simulation timestep\n    temperature = 300 * unit.kelvin  # simulation temperature\n    friction = 1 / unit.picosecond  # collision rate\n    integrator_min = openmm.LangevinIntegrator(temperature, friction, time_step)\n\n    # set up an openmm simulation\n    simulation = app.Simulation(\n        complex_structure.topology, complex_system, integrator_min, platform=platform\n    )\n\n    # save the receptor coords as they should be consistent\n    receptor_coords = unit.Quantity(\n        parmed_receptor.coordinates.tolist(), unit=unit.angstrom\n    )\n\n    # loop over the conformers and energy minimise and store the final positions\n    final_mol = deepcopy(ligand)\n    final_mol.RemoveAllConformers()\n    energies = []\n    for i, conformer in enumerate(\n        tqdm(openff_mol.conformers, desc=\"Optimising conformer: \", ncols=80)\n    ):\n        # make the ligand coords\n        lig_vec = unit.Quantity([c.m.tolist() for c in conformer], unit=unit.angstrom)\n\n        complex_coords = receptor_coords + lig_vec\n        # set the initial positions\n        simulation.context.setPositions(complex_coords)\n\n        # minimize the energy\n        try:\n            simulation.minimizeEnergy()\n        except OpenMMException as E:\n            logger.warning(f\"Conformer (index: {i}) minimisation failed due to: {E}\")\n            continue\n\n        # write out the final coords\n        min_state = simulation.context.getState(getPositions=True, getEnergy=True)\n        positions = min_state.getPositions(asNumpy=True).value_in_unit(unit.angstrom)\n        final_conformer = Chem.Conformer()\n        for j, coord in enumerate(positions[ligand_idx[0] :]):\n            atom_position = Point3D(*coord)\n            final_conformer.SetAtomPosition(j, atom_position)\n\n        # ignore minimised conformers that have very long bonds\n        # this is a temporary fix to ANI generated\n        has_long_bonds = False\n        for bond in final_mol.GetBonds():\n            atom_from = final_conformer.GetAtomPosition(bond.GetBeginAtomIdx())\n            atom_to = final_conformer.GetAtomPosition(bond.GetEndAtomIdx())\n            if atom_from.Distance(atom_to) &gt; 3:\n                has_long_bonds = True\n                break\n        if has_long_bonds:\n            continue\n\n        energies.append(\n            min_state.getPotentialEnergy().value_in_unit(unit.kilocalories_per_mole)\n        )\n        final_mol.AddConformer(final_conformer, assignId=True)\n\n    if final_mol.GetNumConformers() == 0:\n        raise NoPostMinimisationConformersError()\n\n    return final_mol, energies\n</code></pre>"},{"location":"reference/receptor/#fegrow.receptor.sort_conformers","title":"sort_conformers","text":"<pre><code>sort_conformers(ligand: Mol, energies: List[float], energy_range: float = 5) -&gt; Tuple[Mol, List[float]]\n</code></pre> <p>For the given molecule and the conformer energies order the energies and only keep any conformers with in the energy range of the lowest energy conformer.</p> Note <p>This sorting is done on a copy of the molecule.</p> <p>Parameters:</p> <ul> <li> <code>ligand</code>               (<code>Mol</code>)           \u2013            <p>A molecule instance whose optimised conformers should be sorted.</p> </li> <li> <code>energies</code>               (<code>List[float]</code>)           \u2013            <p>The list of energies in the same order as the conformers.</p> </li> <li> <code>energy_range</code>               (<code>float</code>, default:                   <code>5</code> )           \u2013            <p>The energy range (kcal/mol), above the minimum, for which conformers should be kept.</p> </li> </ul> Source code in <code>fegrow/receptor.py</code> <pre><code>def sort_conformers(\n    ligand: Chem.Mol, energies: List[float], energy_range: float = 5\n) -&gt; Tuple[Chem.Mol, List[float]]:\n    \"\"\"\n    For the given molecule and the conformer energies order the energies and only keep any conformers with in the energy\n    range of the lowest energy conformer.\n\n    Note:\n        This sorting is done on a copy of the molecule.\n\n    Args:\n        ligand:\n            A molecule instance whose optimised conformers should be sorted.\n        energies:\n            The list of energies in the same order as the conformers.\n        energy_range:\n            The energy range (kcal/mol), above the minimum, for which conformers should be kept.\n    \"\"\"\n    copy_mol = deepcopy(ligand)\n    copy_mol.RemoveAllConformers()\n    energies = numpy.array(energies)\n    # normalise\n    energies -= energies.min()\n    # order by lowest energy\n    energy_and_conformers = []\n    for i, conformer in enumerate(ligand.GetConformers()):\n        energy_and_conformers.append((energies[i], conformer))\n    energy_and_conformers.sort(key=lambda x: x[0])\n    final_energies = []\n    for energy, conformer in energy_and_conformers:\n        if energy &lt;= energy_range:\n            copy_mol.AddConformer(conformer, assignId=True)\n            final_energies.append(energy)\n    return copy_mol, final_energies\n</code></pre>"},{"location":"reference/sascorer/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> sascorer","text":""},{"location":"reference/sascorer/#fegrow.sascorer","title":"sascorer","text":""},{"location":"reference/toxicity/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> toxicity","text":""},{"location":"reference/toxicity/#fegrow.toxicity","title":"toxicity","text":"<p>Functions:</p> <ul> <li> <code>rule_of_five</code>             \u2013              <p>Function to calculate the Ro5 properties for a molecule. Needs the new R group to be joined to form a single</p> </li> <li> <code>filter_mols</code>             \u2013              <p>Function to carry out a filter of a list of molecules dependent on the catalog supplied.</p> </li> <li> <code>tox_props</code>             \u2013              <p>Function to get properties of a list of molecules and return a dataframe of results.</p> </li> </ul>"},{"location":"reference/toxicity/#fegrow.toxicity.rule_of_five","title":"rule_of_five","text":"<pre><code>rule_of_five(mol)\n</code></pre> <p>Function to calculate the Ro5 properties for a molecule. Needs the new R group to be joined to form a single RDKit mol object as input. Returns a series containing the molecular weight, number of hydrogen bond donors and acceptors and the calculated LogP.</p> <p>A flag of True is returned if the molecule complies and False if it doesn't.</p> Source code in <code>fegrow/toxicity.py</code> <pre><code>def rule_of_five(mol):\n    \"\"\"\n    Function to calculate the Ro5 properties for a molecule. Needs the new R group to be joined to form a single\n    RDKit mol object as input. Returns a series containing the molecular weight, number of hydrogen bond donors and\n    acceptors and the calculated LogP.\n\n    A flag of True is returned if the molecule complies and False if it doesn't.\n    \"\"\"\n\n    # Ro5 descriptors\n    MW = Descriptors.MolWt(mol)\n    HBA = Lipinski.NOCount(mol)\n    HBD = Lipinski.NHOHCount(mol)\n    LogP = Descriptors.MolLogP(mol)\n\n    # Ro5 conditions\n    conditions = [MW &lt;= 500, HBA &lt;= 10, HBD &lt;= 5, LogP &lt;= 5]\n\n    # passes Ro5 if no more than one out of four conditions is violated\n    pass_ro5 = conditions.count(True) &gt;= 3\n\n    ro5 = {\n        \"MW\": MW,\n        \"HBA\": HBA,\n        \"HBD\": HBD,\n        \"LogP\": LogP,\n        \"Pass_Ro5\": pass_ro5,\n    }\n\n    return ro5\n</code></pre>"},{"location":"reference/toxicity/#fegrow.toxicity.filter_mols","title":"filter_mols","text":"<pre><code>filter_mols(mol, catalog, filter_type)\n</code></pre> <p>Function to carry out a filter of a list of molecules dependent on the catalog supplied. Returns a flag of True if unwanted features are detected and False if none are found</p> Source code in <code>fegrow/toxicity.py</code> <pre><code>def filter_mols(mol, catalog, filter_type):\n    \"\"\"\n    Function to carry out a filter of a list of molecules dependent on the catalog supplied.\n    Returns a flag of True if unwanted features are detected and False if none are found\n    \"\"\"\n\n    entry = catalog.GetFirstMatch(mol)  # Get the first matching PAINS\n    if entry is not None:\n        flag = True  # true if mol contains filter\n    else:\n        flag = False  # false if not\n\n    result = {filter_type: flag}  # return dict of values\n\n    return result\n</code></pre>"},{"location":"reference/toxicity/#fegrow.toxicity.tox_props","title":"tox_props","text":"<pre><code>tox_props(data)\n</code></pre> <p>Function to get properties of a list of molecules and return a dataframe of results.</p> Source code in <code>fegrow/toxicity.py</code> <pre><code>def tox_props(data):\n    \"\"\"\n    Function to get properties of a list of molecules and return a dataframe of results.\n    \"\"\"\n\n    # initialize pains filter\n    params_pains = FilterCatalogParams()\n    params_pains.AddCatalog(FilterCatalogParams.FilterCatalogs.PAINS)\n    catalog_pains = FilterCatalog(params_pains)\n\n    # initialize unwanted substructures filter\n    params_unwanted = FilterCatalogParams()\n    params_unwanted.AddCatalog(FilterCatalogParams.FilterCatalogs.BRENK)\n    catalog_unwanted = FilterCatalog(params_unwanted)\n\n    # initialise functional group filter\n    params_nih = FilterCatalogParams()\n    params_nih.AddCatalog(FilterCatalogParams.FilterCatalogs.NIH)\n    catalog_nih = FilterCatalog(params_nih)\n\n    # if a dataframe of mols is supplied\n    if isinstance(data, pd.DataFrame):\n        mols = list(data[\"ROMol\"])\n        ro5 = pd.DataFrame([rule_of_five(mol) for mol in mols])\n        pains = pd.DataFrame(\n            [filter_mols(mol, catalog_pains, \"has_pains\") for mol in mols]\n        )\n        unwanted_subs = pd.DataFrame(\n            [filter_mols(mol, catalog_unwanted, \"has_unwanted_subs\") for mol in mols]\n        )\n        nih = pd.DataFrame(\n            [filter_mols(mol, catalog_nih, \"has_prob_fgs\") for mol in mols]\n        )\n        sa_score = [calculateScore(mol) for mol in mols]\n\n        data = pd.concat(\n            [data, ro5, pains, unwanted_subs, nih], axis=1\n        )  # put results together\n        data[\"synthetic_accessibility\"] = sa_score\n\n        return data\n\n    # if a single molecule is supplied\n    else:\n        mol = data\n        ro5 = pd.DataFrame([rule_of_five(data)])\n        pains = pd.DataFrame([filter_mols(mol, catalog_pains, \"has_pains\")])\n        unwanted_subs = pd.DataFrame(\n            [filter_mols(mol, catalog_unwanted, \"has_unwanted_subs\")]\n        )\n        nih = pd.DataFrame([filter_mols(mol, catalog_nih, \"has_prob_fgs\")])\n        sa_score = [calculateScore(mol)]\n\n        data = pd.concat([ro5, pains, unwanted_subs, nih], axis=1)\n        data[\"synthetic_accessibility\"] = sa_score\n\n        return data\n</code></pre>"},{"location":"reference/cli/","title":"Index","text":""},{"location":"reference/cli/#fegrow.cli","title":"cli","text":"<p>Modules:</p> <ul> <li> <code>cli</code>           \u2013            </li> <li> <code>scoring</code>           \u2013            </li> <li> <code>utils</code>           \u2013            </li> </ul>"},{"location":"reference/cli/cli/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> cli","text":""},{"location":"reference/cli/cli/#fegrow.cli.cli","title":"cli","text":"<p>Functions:</p> <ul> <li> <code>settings</code>             \u2013              <p>Create a runtime settings object for scoring runs which can be configured.</p> </li> </ul>"},{"location":"reference/cli/cli/#fegrow.cli.cli.settings","title":"settings","text":"<pre><code>settings(gnina_path: Path)\n</code></pre> <p>Create a runtime settings object for scoring runs which can be configured.</p> Source code in <code>fegrow/cli/cli.py</code> <pre><code>@cli.command()\n@click.option(\n    \"-g\",\n    \"--gnina-path\",\n    type=click.Path(exists=True, file_okay=True, dir_okay=False, executable=True),\n    help=\"The path to the gnina executable which will override the settings.\",\n)\ndef settings(gnina_path: pathlib.Path):\n    \"\"\"\n    Create a runtime settings object for scoring runs which can be configured.\n    \"\"\"\n    config = Settings(gnina_path=gnina_path)\n    with open(\"settings.json\") as output:\n        output.write(config.json(indent=2))\n</code></pre>"},{"location":"reference/cli/scoring/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> scoring","text":""},{"location":"reference/cli/scoring/#fegrow.cli.scoring","title":"scoring","text":"<p>Functions:</p> <ul> <li> <code>score</code>             \u2013              <p>Score the list of input ligands using Gnina after optimising in the receptor.</p> </li> </ul>"},{"location":"reference/cli/scoring/#fegrow.cli.scoring.score","title":"score","text":"<pre><code>score(core_ligand: Path, ligands: Path, receptor: Path, output: Path, settings: Optional[Path] = None, gnina_path: Optional[Path] = None)\n</code></pre> <p>Score the list of input ligands using Gnina after optimising in the receptor.</p> Source code in <code>fegrow/cli/scoring.py</code> <pre><code>@click.command()\n@click.option(\n    \"-c\",\n    \"--core-ligand\",\n    type=click.Path(exists=True, file_okay=True, dir_okay=False),\n    help=\"The path to the SDF file of the core ligand which will be used to restrain the geometries of the scored ligands this should be a substructure of the ligands to be scored.\",\n)\n@click.option(\n    \"-l--ligands\",\n    type=click.Path(exists=True, file_okay=True, dir_okay=False),\n    help=\"The path to the ligands to be scored can be in any supported format by RDKit such as csv. smiles or SDF.\",\n)\n@click.option(\n    \"-r\",\n    \"--receptor\",\n    type=click.Path(exists=True, file_okay=True, dir_okay=False),\n    help=\"The path of the receptor PDB file, this should only contain the receptor and not the reference ligand.\",\n)\n@click.option(\n    \"-s\",\n    \"--settings\",\n    type=click.Path(exists=True, file_okay=True, dir_okay=False),\n    help=\"The path of the settings file which configures the scoring run.\",\n)\n@click.option(\n    \"-o\",\n    \"--output\",\n    type=click.Path(dir_okay=True),\n    help=\"The name of the output folder.\",\n)\n@click.option(\n    \"-g\",\n    \"--gnina-path\",\n    type=click.Path(exists=True, file_okay=True, dir_okay=False, executable=True),\n    help=\"The path to the gnina executable which will override the settings.\",\n)\ndef score(\n    core_ligand: pathlib.Path,\n    ligands: pathlib.Path,\n    receptor: pathlib.Path,\n    output: pathlib.Path,\n    settings: Optional[pathlib.Path] = None,\n    gnina_path: Optional[pathlib.Path] = None,\n):\n    \"\"\"\n    Score the list of input ligands using Gnina after optimising in the receptor.\n    \"\"\"\n    import traceback\n\n    import dask\n    import tqdm\n    from dask.distributed import Client\n    from rdkit import Chem\n\n    from fegrow.cli.utils import Settings, load_target_ligands, score_ligand\n\n    try:\n        from mycluster import create_cluster\n    except ImportError:\n\n        def create_cluster():\n            from dask.distributed import LocalCluster\n\n            return LocalCluster()\n\n    client = Client(create_cluster())\n    # create the cluster\n    click.echo(f\"Client created {client}\")\n\n    if settings is not None:\n        config = Settings.parse_file(settings)\n        if gnina_path is not None:\n            config.gnina_path = gnina_path\n    else:\n        # build the base settings object this needs the gnina path\n        config = Settings(gnina_path=gnina_path)\n\n    click.echo(f\"Loading core ligand from {core_ligand}\")\n    # we remove all Hs rather than specific ones at the attachment point\n    core = Chem.MolFromMolFile(core_ligand, removeHs=True)\n    core_dask = dask.delayed(core)\n\n    # load the target ligands\n    target_smiles = load_target_ligands(ligand_file=ligands)\n\n    # build a list of tasks to submit\n    for_submission = [\n        score_ligand(\n            core_ligand=core_dask,\n            target_smiles=smiles,\n            receptor=receptor,\n            settings=config,\n        )\n        for smiles in target_smiles\n    ]\n\n    submitted = client.compute(for_submission)\n    jobs = dict((job, i) for i, job in enumerate(submitted))\n\n    output_path = pathlib.Path(output)\n    output_path.mkdir(exist_ok=True)\n\n    molecule_output = Chem.SDWriter(output_path.joinpath(\"scored_molecules.sdf\"))\n    with tqdm.tqdm(total=len(submitted), desc=\"Scoring molecules...\", ncols=80) as pbar:\n        while len(jobs) &gt; 0:\n            for job, index in jobs.items():\n                if not job.done():\n                    continue\n\n                # remove the job\n                del jobs[job]\n                pbar.update(1)\n\n                try:\n                    mol_data = job.result()\n                    rmol = mol_data.pop(\"molecule\")\n                    # recover the properties (they are not passed with serialisation)\n                    [rmol.SetProp(k, str(v)) for k, v in mol_data.items()]\n                    # write the molecule out when they complete incase we crash\n                    molecule_output.write(rmol)\n                except Exception:\n                    print(\"error for index, \", index)\n                    traceback.print_exc()\n\n            time.sleep(5)\n\n    click.echo(\"All molecules scored\")\n</code></pre>"},{"location":"reference/cli/utils/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> utils","text":""},{"location":"reference/cli/utils/#fegrow.cli.utils","title":"utils","text":"<p>Classes:</p> <ul> <li> <code>Settings</code>           \u2013            <p>A class to configure the runtime settings of a high throughput scoring.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>score_ligand</code>             \u2013              <p>Score the ligand given by the target smiles using the core ligand to restrain the geometry.</p> </li> <li> <code>load_target_ligands</code>             \u2013              <p>Load a set of ligands from any RDKit supported file format.</p> </li> </ul>"},{"location":"reference/cli/utils/#fegrow.cli.utils.Settings","title":"Settings  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class to configure the runtime settings of a high throughput scoring.</p> <p>Fields:</p> <ul> <li> <code>num_confs</code>                 (<code>int</code>)             </li> <li> <code>conf_rms</code>                 (<code>float</code>)             </li> <li> <code>ligand_force_field</code>                 (<code>ForceField</code>)             </li> <li> <code>use_ani</code>                 (<code>bool</code>)             </li> <li> <code>sigma_scale_factor</code>                 (<code>float</code>)             </li> <li> <code>relative_permittivity</code>                 (<code>float</code>)             </li> <li> <code>water_model</code>                 (<code>Optional[str]</code>)             </li> <li> <code>platform_name</code>                 (<code>str</code>)             </li> <li> <code>gnina_path</code>                 (<code>str</code>)             </li> <li> <code>energy_filter</code>                 (<code>float</code>)             </li> </ul>"},{"location":"reference/cli/utils/#fegrow.cli.utils.Settings.num_confs","title":"num_confs  <code>pydantic-field</code>","text":"<pre><code>num_confs: int = 50\n</code></pre> <p>The number of initial conformers which should be generated using RDKit.</p>"},{"location":"reference/cli/utils/#fegrow.cli.utils.Settings.conf_rms","title":"conf_rms  <code>pydantic-field</code>","text":"<pre><code>conf_rms: float = 0.2\n</code></pre> <p>The rms cutoff in angstrom for which two conformers are considered the same. Used while generating the conformations.</p>"},{"location":"reference/cli/utils/#fegrow.cli.utils.Settings.ligand_force_field","title":"ligand_force_field  <code>pydantic-field</code>","text":"<pre><code>ligand_force_field: ForceField = 'openff'\n</code></pre> <p>The force field model to use for the small molecule during the restrained optimisation.</p>"},{"location":"reference/cli/utils/#fegrow.cli.utils.Settings.use_ani","title":"use_ani  <code>pydantic-field</code>","text":"<pre><code>use_ani: bool = True\n</code></pre> <p>If we should attempt to use ANI2x to model the internal energies of the ligand in an ML/MM optimisation.</p>"},{"location":"reference/cli/utils/#fegrow.cli.utils.Settings.sigma_scale_factor","title":"sigma_scale_factor  <code>pydantic-field</code>","text":"<pre><code>sigma_scale_factor: float = 0.8\n</code></pre> <p>The amount the sigma of the force field should be scaled by to compensate for the rigid recptor.</p>"},{"location":"reference/cli/utils/#fegrow.cli.utils.Settings.relative_permittivity","title":"relative_permittivity  <code>pydantic-field</code>","text":"<pre><code>relative_permittivity: float = 4\n</code></pre> <p>The relative permittivity which should be used to scale the charge interactions of the system to mimic a condensed phase environment.</p>"},{"location":"reference/cli/utils/#fegrow.cli.utils.Settings.water_model","title":"water_model  <code>pydantic-field</code>","text":"<pre><code>water_model: Optional[str] = None\n</code></pre> <p>The name of the water force field model from openmmforcefields which should be used, eg tip3p.xml</p>"},{"location":"reference/cli/utils/#fegrow.cli.utils.Settings.platform_name","title":"platform_name  <code>pydantic-field</code>","text":"<pre><code>platform_name: str = 'CPU'\n</code></pre> <p>The name of the OpenMM platform which should be used during the geometry optimisation</p>"},{"location":"reference/cli/utils/#fegrow.cli.utils.Settings.gnina_path","title":"gnina_path  <code>pydantic-field</code>","text":"<pre><code>gnina_path: str\n</code></pre> <p>The path to the gnina executable which should be used to score the ligands.</p>"},{"location":"reference/cli/utils/#fegrow.cli.utils.Settings.energy_filter","title":"energy_filter  <code>pydantic-field</code>","text":"<pre><code>energy_filter: float = 2\n</code></pre> <p>The relative energy cutoff in kcal/mol used to select the top conformers for scoring.</p>"},{"location":"reference/cli/utils/#fegrow.cli.utils.score_ligand","title":"score_ligand","text":"<pre><code>score_ligand(core_ligand: Mol, target_smiles: str, receptor: Path, settings: Settings) -&gt; dict\n</code></pre> <p>Score the ligand given by the target smiles using the core ligand to restrain the geometry.</p> Note <p>We assume the core does not need to be altered and is a substructure of the target ligand</p> Source code in <code>fegrow/cli/utils.py</code> <pre><code>@dask.delayed\ndef score_ligand(\n    core_ligand: Chem.Mol,\n    target_smiles: str,\n    receptor: pathlib.Path,\n    settings: Settings,\n) -&gt; dict:\n    \"\"\"\n    Score the ligand given by the target smiles using the core ligand to restrain the geometry.\n\n    Note:\n        We assume the core does not need to be altered and is a substructure of the target ligand\n    \"\"\"\n    # create the target ligand with Hs\n    candidate_mol = Chem.MolFromSmiles(target_smiles)\n    candidate_mol = Chem.AddHs(candidate_mol)\n    rmol = RMol(candidate_mol)\n    # set up the core as the template\n    rmol._save_template(core_ligand)\n\n    # conformer gen\n    rmol.generate_conformers(\n        num_conf=settings.num_confs, minimum_conf_rms=settings.conf_rms\n    )\n    # remove missing\n    rmol.remove_clashing_confs(protein=receptor.as_posix())\n\n    # optimise\n    rmol.optimise_in_receptor(\n        receptor_file=receptor,\n        ligand_force_field=settings.ligand_force_field,\n        use_ani=settings.use_ani,\n        sigma_scale_factor=settings.sigma_scale_factor,\n        relative_permittivity=settings.relative_permittivity,\n        water_model=settings.water_model,\n        platform_name=settings.platform_name,\n    )\n\n    if rmol.GetNumConformers() == 0:\n        # set a pentalty\n        cnnaffinity = 0\n        cnnaffinityIC50 = 0\n    else:\n        # score only the lowest energy conformer\n        rmol.sort_conformers(energy_range=settings.energy_filter)  # kcal/mol\n        # purge all but the lowest energy conformers\n        rmol = RMol(rmol, confId=0)\n        affinities = rmol.gnina(receptor_file=receptor.as_posix())\n        cnnaffinity = -affinities.CNNaffinity.values[0]\n        cnnaffinityIC50 = affinities[\"CNNaffinity-&gt;IC50s\"].values[0]\n\n    data = {\n        \"cnnaffinity\": cnnaffinity,\n        \"cnnaffinityIC50\": cnnaffinityIC50,\n        \"molecule\": rmol,\n    }\n\n    return data\n</code></pre>"},{"location":"reference/cli/utils/#fegrow.cli.utils.load_target_ligands","title":"load_target_ligands","text":"<pre><code>load_target_ligands(ligand_file: Path) -&gt; list[str]\n</code></pre> <p>Load a set of ligands from any RDKit supported file format.</p> Note <p>For CSV we assume that the smiles have the column name \"Smiles\"</p> Source code in <code>fegrow/cli/utils.py</code> <pre><code>def load_target_ligands(ligand_file: pathlib.Path) -&gt; list[str]:\n    \"\"\"\n    Load a set of ligands from any RDKit supported file format.\n\n    Note:\n        For CSV we assume that the smiles have the column name \"Smiles\"\n    \"\"\"\n    if ligand_file.stem.lower == \"csv\":\n        target_molecules = pd.read_csv(ligand_file)\n        return list(target_molecules.Smiles.values)\n\n    if ligand_file.stem.lower() in [\"sdf\", \"mol\"]:\n        ligands = list(Chem.SDMolSupplier(ligand_file, removeHs=False))\n    elif ligand_file.stem.lower() == \"smi\":\n        ligands = list(Chem.SmilesMolSupplier(ligand_file, remoeHs=False))\n    else:\n        raise RuntimeError(f\"Can extract smiles from input file {ligand_file}\")\n\n    smiles = [Chem.MolToSmiles(mol) for mol in ligands]\n    return smiles\n</code></pre>"},{"location":"reference/testing/","title":"Index","text":""},{"location":"reference/testing/#fegrow.testing","title":"testing","text":"<p>Modules:</p> <ul> <li> <code>test_chemspace</code>           \u2013            </li> <li> <code>test_general</code>           \u2013            </li> </ul>"},{"location":"reference/testing/conftest/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> conftest","text":""},{"location":"reference/testing/conftest/#fegrow.testing.conftest","title":"conftest","text":""},{"location":"reference/testing/library_gen/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> library_gen","text":""},{"location":"reference/testing/library_gen/#fegrow.testing.library_gen","title":"library_gen","text":""},{"location":"reference/testing/run_al/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> run_al","text":""},{"location":"reference/testing/run_al/#fegrow.testing.run_al","title":"run_al","text":""},{"location":"reference/testing/test_chemspace/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> test_chemspace","text":""},{"location":"reference/testing/test_chemspace/#fegrow.testing.test_chemspace","title":"test_chemspace","text":"<p>Functions:</p> <ul> <li> <code>test_pipeline_1linker_1rgroup_check_h_attachment</code>             \u2013              <p>During multiple mergings, we want to make sure that</p> </li> <li> <code>test_evaluate_scoring_function_works</code>             \u2013              <p>Ensure that the passed functional form is used.</p> </li> <li> <code>test_evaluate_scoring_function_saves_data</code>             \u2013              <p>Ensure that the passed functional form is used.</p> </li> <li> <code>test_evaluate_full_hijack</code>             \u2013              <p>Ensure that the passed functional form is used.</p> </li> <li> <code>test_al</code>             \u2013              <p>Ensure that the passed functional form is used.</p> </li> <li> <code>test_al_local</code>             \u2013              <p>Run a small active learning test.</p> </li> <li> <code>test_umap</code>             \u2013              <p>Make a map of chemistry</p> </li> <li> <code>test_al_full</code>             \u2013              <p>Run a small active learning test.</p> </li> <li> <code>test_al_manual_gp</code>             \u2013              </li> <li> <code>test_adding_enamines</code>             \u2013              <p>Ensure that the passed functional form is used.</p> </li> </ul>"},{"location":"reference/testing/test_chemspace/#fegrow.testing.test_chemspace.test_pipeline_1linker_1rgroup_check_h_attachment","title":"test_pipeline_1linker_1rgroup_check_h_attachment","text":"<pre><code>test_pipeline_1linker_1rgroup_check_h_attachment(sars_scaffold_chunk_sdf)\n</code></pre> <p>During multiple mergings, we want to make sure that it is the hydrogen on the scaffold that is returned back to the dataframe</p> <p>:param sars_scaffold_chunk_sdf: :return:</p> Source code in <code>fegrow/testing/test_chemspace.py</code> <pre><code>def test_pipeline_1linker_1rgroup_check_h_attachment(sars_scaffold_chunk_sdf):\n    \"\"\"\n    During multiple mergings, we want to make sure that\n    it is the hydrogen on the scaffold that is returned back to the dataframe\n\n    :param sars_scaffold_chunk_sdf:\n    :return:\n    \"\"\"\n    chemspace = ChemSpace()\n    hydrogen = 8\n    chemspace.add_scaffold(sars_scaffold_chunk_sdf, hydrogen)\n\n    r_methanol = Chem.MolFromSmiles(\"*CO\")\n    linker = Chem.MolFromSmiles(\"[*:0]NC[*:1]\")\n    chemspace.add_rgroups(linker, r_methanol)\n\n    assert chemspace.df.loc[0].h == hydrogen\n</code></pre>"},{"location":"reference/testing/test_chemspace/#fegrow.testing.test_chemspace.test_evaluate_scoring_function_works","title":"test_evaluate_scoring_function_works","text":"<pre><code>test_evaluate_scoring_function_works(RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path)\n</code></pre> <p>Ensure that the passed functional form is used.</p> <p>:param RGroups: :param sars_scaffold_chunk_sdf: :param rec_7l10_final_path: :return:</p> Source code in <code>fegrow/testing/test_chemspace.py</code> <pre><code>def test_evaluate_scoring_function_works(\n    RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path\n):\n    \"\"\"\n    Ensure that the passed functional form is used.\n\n    :param RGroups:\n    :param sars_scaffold_chunk_sdf:\n    :param rec_7l10_final_path:\n    :return:\n    \"\"\"\n\n    # check if two molecules were built with chemspace\n    chemspace = ChemSpace()\n\n    chemspace.add_scaffold(sars_scaffold_chunk_sdf, 8)\n    chemspace.add_smiles([\"[H]OC([H])([H])C([H])([H])c1c([H])nc([H])c([H])c1[H]\"])\n    chemspace.add_protein(rec_7l10_final_path)\n\n    random_score = random.random()\n\n    def scorer(rmol, pdb_filename, data):\n        return random_score\n\n    chemspace.evaluate([0], scoring_function=scorer, skip_optimisation=True)\n\n    assert chemspace.df.iloc[0].score == random_score\n</code></pre>"},{"location":"reference/testing/test_chemspace/#fegrow.testing.test_chemspace.test_evaluate_scoring_function_saves_data","title":"test_evaluate_scoring_function_saves_data","text":"<pre><code>test_evaluate_scoring_function_saves_data(RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path)\n</code></pre> <p>Ensure that the passed functional form is used.</p> <p>:param RGroups: :param sars_scaffold_chunk_sdf: :param rec_7l10_final_path: :return:</p> Source code in <code>fegrow/testing/test_chemspace.py</code> <pre><code>def test_evaluate_scoring_function_saves_data(\n    RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path\n):\n    \"\"\"\n    Ensure that the passed functional form is used.\n\n    :param RGroups:\n    :param sars_scaffold_chunk_sdf:\n    :param rec_7l10_final_path:\n    :return:\n    \"\"\"\n\n    # check if two molecules were built with chemspace\n    chemspace = ChemSpace()\n\n    chemspace.add_scaffold(sars_scaffold_chunk_sdf, 8)\n    chemspace.add_smiles([\"[H]OC([H])([H])C([H])([H])c1c([H])nc([H])c([H])c1[H]\"])\n    chemspace.add_protein(rec_7l10_final_path)\n\n    hello_world = \"Hi Frank!\"\n\n    def scorer(rmol, pdb_filename, data):\n        data[\"hello_world\"] = hello_world\n        return 5\n\n    chemspace.evaluate([0], scoring_function=scorer, skip_optimisation=True)\n\n    assert chemspace.df.iloc[0].Mol.GetProp(\"hello_world\") == hello_world\n</code></pre>"},{"location":"reference/testing/test_chemspace/#fegrow.testing.test_chemspace.test_evaluate_full_hijack","title":"test_evaluate_full_hijack","text":"<pre><code>test_evaluate_full_hijack(RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path)\n</code></pre> <p>Ensure that the passed functional form is used.</p> <p>:param RGroups: :param sars_scaffold_chunk_sdf: :param rec_7l10_final_path: :return:</p> Source code in <code>fegrow/testing/test_chemspace.py</code> <pre><code>def test_evaluate_full_hijack(RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path):\n    \"\"\"\n    Ensure that the passed functional form is used.\n\n    :param RGroups:\n    :param sars_scaffold_chunk_sdf:\n    :param rec_7l10_final_path:\n    :return:\n    \"\"\"\n\n    # check if two molecules were built with chemspace\n    chemspace = ChemSpace()\n\n    chemspace.add_scaffold(sars_scaffold_chunk_sdf, 8)\n    chemspace.add_smiles([\"[H]OC([H])([H])C([H])([H])c1c([H])nc([H])c([H])c1[H]\"])\n    chemspace.add_protein(rec_7l10_final_path)\n\n    def full_evaluation(scaffold, h, smiles, pdb_filename, *args, **kwargs):\n        # return: mol, data\n        mol = copy.deepcopy(scaffold)\n        return mol, {\"score\": 5}\n\n    chemspace.evaluate([0], full_evaluation=full_evaluation)\n\n    assert chemspace.df.iloc[0].score == 5\n</code></pre>"},{"location":"reference/testing/test_chemspace/#fegrow.testing.test_chemspace.test_al","title":"test_al","text":"<pre><code>test_al(RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path)\n</code></pre> <p>Ensure that the passed functional form is used.</p> <p>:param RGroups: :param sars_scaffold_chunk_sdf: :param rec_7l10_final_path: :return:</p> Source code in <code>fegrow/testing/test_chemspace.py</code> <pre><code>def test_al(RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path):\n    \"\"\"\n    Ensure that the passed functional form is used.\n\n    :param RGroups:\n    :param sars_scaffold_chunk_sdf:\n    :param rec_7l10_final_path:\n    :return:\n    \"\"\"\n\n    # check if two molecules were built with chemspace\n    chemspace = ChemSpace()\n\n    chemspace.add_scaffold(sars_scaffold_chunk_sdf, 8)\n\n    not_studied_smiles = [\n        \"[H]OC(=O)N([H])c1c([H])nc([H])c([H])c1[H]\",\n        \"[H]ON([H])c1c([H])nc([H])c([H])c1[H]\",\n    ]\n    studied_smiles = [\n        \"[H]OC([H])([H])c1c([H])nc([H])c([H])c1[H]\",\n        \"[H]ON([H])C(=O)c1c([H])nc([H])c([H])c1[H]\",\n    ]\n    chemspace.add_smiles(studied_smiles + not_studied_smiles)\n    chemspace.add_protein(rec_7l10_final_path)\n\n    # set the results for the studied smiles\n    df = chemspace.df\n    df.loc[df.index == 0, [\"score\", \"Training\"]] = [3.2475, True]\n    df.loc[df.index == 1, [\"score\", \"Training\"]] = [3.57196, True]\n\n    to_study = chemspace.active_learning(n=1)\n\n    assert to_study.iloc[0].Smiles in not_studied_smiles\n</code></pre>"},{"location":"reference/testing/test_chemspace/#fegrow.testing.test_chemspace.test_al_local","title":"test_al_local","text":"<pre><code>test_al_local(sars_scaffold_chunk_sdf, rec_7l10_final_path)\n</code></pre> <p>Run a small active learning test.</p> Source code in <code>fegrow/testing/test_chemspace.py</code> <pre><code>def test_al_local(sars_scaffold_chunk_sdf, rec_7l10_final_path):\n    \"\"\"\n    Run a small active learning test.\n    \"\"\"\n\n    # check if two molecules were built with chemspace\n    chemspace = ChemSpace()\n\n    scaffold = Chem.SDMolSupplier(str(root / \"data/5R83_core.sdf\"), removeHs=False)[0]\n    chemspace.add_scaffold(scaffold, 6)\n\n    oracle = pandas.read_csv(root / \"data/cs50k_scored49578_unique47710.csv.zip\")\n\n    # separate the Smiles to be scanned\n    smiles_list = oracle.Smiles.to_list()[:40]\n    chemspace.add_smiles(smiles_list, h=6)\n\n    # the protein here does not matter as we don't use it anyway\n    chemspace.add_protein(rec_7l10_final_path)\n\n    def oracle_look_up(scaffold, h, smiles, *args, **kwargs):\n        # mol, data\n        return None, {\"score\": oracle[oracle.Smiles == smiles].iloc[0].cnnaffinity}\n\n    # select random molecules\n    random_pics = chemspace.active_learning(n=5, first_random=True)\n    chemspace.evaluate(random_pics, full_evaluation=oracle_look_up)\n\n    # set the results for the studied smiles\n    for i in range(2):\n        picks = chemspace.active_learning(n=5)\n        res = chemspace.evaluate(picks, full_evaluation=oracle_look_up)\n        assert len(res) == 5\n\n        # filter out the penalties\n        res = res[res.score != 0]\n        print(\n            f\"AL cycle cnnaffinity. Mean: {res.score.mean():.2f}, Min: {res.score.min():.2f}, Max: {res.score.max():.2f}\"\n        )\n</code></pre>"},{"location":"reference/testing/test_chemspace/#fegrow.testing.test_chemspace.test_umap","title":"test_umap","text":"<pre><code>test_umap(sars_scaffold_chunk_sdf)\n</code></pre> <p>Make a map of chemistry</p> Source code in <code>fegrow/testing/test_chemspace.py</code> <pre><code>@pytest.mark.skip(reason=\"in dev. \")\ndef test_umap(sars_scaffold_chunk_sdf):\n    \"\"\"\n    Make a map of chemistry\n    \"\"\"\n    # check if two molecules were built with chemspace\n    chemspace = ChemSpace()\n\n    scaffold = Chem.SDMolSupplier(str(root / \"data/5R83_core.sdf\"), removeHs=False)[0]\n    chemspace.add_scaffold(scaffold, 6)\n\n    oracle = pandas.read_csv(root / \"data/cs50k_scored49578_unique47710.csv.zip\")\n    smiles_list = oracle.Smiles.to_list()[:20]\n    chemspace.add_smiles(smiles_list, h=6)\n\n    chemspace.umap()\n</code></pre>"},{"location":"reference/testing/test_chemspace/#fegrow.testing.test_chemspace.test_al_full","title":"test_al_full","text":"<pre><code>test_al_full(RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path)\n</code></pre> <p>Run a small active learning test.</p> Source code in <code>fegrow/testing/test_chemspace.py</code> <pre><code>def test_al_full(RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path):\n    \"\"\"\n    Run a small active learning test.\n    \"\"\"\n\n    # check if two molecules were built with chemspace\n    chemspace = ChemSpace()\n\n    scaffold = Chem.SDMolSupplier(str(root / \"data/5R83_core.sdf\"), removeHs=False)[0]\n    chemspace.add_scaffold(scaffold, 6)\n\n    oracle = pandas.read_csv(root / \"data/cs50k_scored49578_unique47710.csv.zip\")\n\n    # separate the Smiles to be scanned\n    chemspace.add_smiles(oracle.Smiles.to_list()[:10], h=6)\n\n    # the protein here does not matter as we don't use it anyway\n    chemspace.add_protein(rec_7l10_final_path)\n\n    def oracle_look_up(scaffold, h, smiles, *args, **kwargs):\n        # mol, data\n        return Chem.MolFromSmiles(smiles), {\n            \"score\": oracle[oracle.Smiles == smiles].iloc[0].cnnaffinity\n        }\n\n    # select random molecules\n    random_pics = chemspace.active_learning(n=3, first_random=True)\n    chemspace.evaluate(random_pics, full_evaluation=oracle_look_up)\n\n    assert chemspace.df.score.count() == 3\n    assert all(~chemspace.df.loc[random_pics.index].score.isna())\n\n    # compute all\n    chemspace.evaluate(full_evaluation=oracle_look_up)\n    assert chemspace.df.score[chemspace.df.score.isna()].count() == 0\n</code></pre>"},{"location":"reference/testing/test_chemspace/#fegrow.testing.test_chemspace.test_al_manual_gp","title":"test_al_manual_gp","text":"<pre><code>test_al_manual_gp(RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path)\n</code></pre> Source code in <code>fegrow/testing/test_chemspace.py</code> <pre><code>def test_al_manual_gp(RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path):\n    \"\"\" \"\"\"\n    # check if two molecules were built with chemspace\n    chemspace = ChemSpace()\n\n    scaffold = Chem.SDMolSupplier(str(root / \"data/5R83_core.sdf\"), removeHs=False)[0]\n    chemspace.add_scaffold(scaffold, 6)\n\n    oracle = pandas.read_csv(root / \"data/cs50k_scored49578_unique47710.csv.zip\")\n\n    # separate the Smiles to be scanned\n    smiles_list = oracle.Smiles.to_list()[:50]\n    chemspace.add_smiles(smiles_list, h=6)\n\n    # the protein here does not matter as we don't use it anyway\n    chemspace.add_protein(rec_7l10_final_path)\n\n    def oracle_look_up(scaffold, h, smiles, *args, **kwargs):\n        # mol, data\n        return None, {\"score\": oracle[oracle.Smiles == smiles].iloc[0].cnnaffinity}\n\n    # select random molecules\n    random_pics = chemspace.active_learning(n=5, first_random=True)\n    chemspace.evaluate(random_pics, full_evaluation=oracle_look_up)\n\n    # configure active learning\n    from fegrow.al import Model, Query\n\n    chemspace.model = Model.gaussian_process()\n\n    chemspace.query = Query.UCB(beta=10)\n    picks = chemspace.active_learning(n=5)\n    chemspace.evaluate(picks, full_evaluation=oracle_look_up)\n\n    # another go without changing any settings\n    picks = chemspace.active_learning(n=5)\n    chemspace.evaluate(picks, full_evaluation=oracle_look_up)\n\n    # use every querrying strategy\n    chemspace.query = Query.Greedy()\n    picks = chemspace.active_learning(n=5)\n    chemspace.evaluate(picks, full_evaluation=oracle_look_up)\n\n    chemspace.query = Query.EI(tradeoff=0.1)\n    picks = chemspace.active_learning(n=5)\n    chemspace.evaluate(picks, full_evaluation=oracle_look_up)\n\n    chemspace.query = Query.PI(tradeoff=0.1)\n    picks = chemspace.active_learning(n=5)\n    chemspace.evaluate(picks, full_evaluation=oracle_look_up)\n\n    chemspace.model = Model.linear()\n    chemspace.query = Query.Greedy()\n    picks = chemspace.active_learning(n=5)\n    chemspace.evaluate(picks, full_evaluation=oracle_look_up)\n</code></pre>"},{"location":"reference/testing/test_chemspace/#fegrow.testing.test_chemspace.test_adding_enamines","title":"test_adding_enamines","text":"<pre><code>test_adding_enamines(RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path)\n</code></pre> <p>Ensure that the passed functional form is used.</p> <p>:param RGroups: :param sars_scaffold_chunk_sdf: :param rec_7l10_final_path: :return:</p> Source code in <code>fegrow/testing/test_chemspace.py</code> <pre><code>@pytest.mark.skip(reason=\"requires the pydockingorg interface. \")\ndef test_adding_enamines(RGroups, sars_scaffold_chunk_sdf, rec_7l10_final_path):\n    \"\"\"\n    Ensure that the passed functional form is used.\n\n    :param RGroups:\n    :param sars_scaffold_chunk_sdf:\n    :param rec_7l10_final_path:\n    :return:\n    \"\"\"\n\n    # check if two molecules were built with chemspace\n    chemspace = ChemSpace()\n\n    chemspace.add_scaffold(sars_scaffold_chunk_sdf, 8)\n    chemspace.add_smiles([\"[H]OC([H])([H])C([H])([H])c1c([H])nc([H])c([H])c1[H]\"], h=8)\n    chemspace.add_protein(rec_7l10_final_path)\n\n    def scorer(rmol, pdb_filename, data):\n        return 5\n\n    chemspace.evaluate([0], scoring_function=scorer, skip_optimisation=True)\n    assert len(chemspace) == 1\n\n    chemspace.add_enamine_molecules(results_per_search=10)\n\n    # at least one extra one must have made it\n    assert len(chemspace) &gt; 1\n</code></pre>"},{"location":"reference/testing/test_general/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> test_general","text":""},{"location":"reference/testing/test_general/#fegrow.testing.test_general","title":"test_general","text":"<p>Functions:</p> <ul> <li> <code>test_growing_keep_larger_component</code>             \u2013              <p>When a growing vector is an internal atom that divides the molecule,</p> </li> <li> <code>test_growing_keep_larger_component_implicit_index</code>             \u2013              <p>When a growing vector is an internal atom that divides the molecule,</p> </li> <li> <code>test_growing_keep_cue_component</code>             \u2013              <p>When a growing vector is an atom that divides the molecule,</p> </li> <li> <code>test_replace_methyl</code>             \u2013              </li> <li> <code>test_replace_methyl_keep_h</code>             \u2013              </li> <li> <code>test_add_smiles_linker</code>             \u2013              <p>:return:</p> </li> <li> <code>test_add_linker_rgroup_first</code>             \u2013              <p>:return:</p> </li> <li> <code>test_linker_c_first</code>             \u2013              <p>Mark the C as the first connecting point in the linker</p> </li> <li> <code>test_linker_o_first</code>             \u2013              <p>Mark the O as the first connecting point in the linker</p> </li> <li> <code>test_add_a_linker_check_star</code>             \u2013              <ol> <li>load the core</li> </ol> </li> </ul>"},{"location":"reference/testing/test_general/#fegrow.testing.test_general.test_growing_keep_larger_component","title":"test_growing_keep_larger_component","text":"<pre><code>test_growing_keep_larger_component(RGroups)\n</code></pre> <p>When a growing vector is an internal atom that divides the molecule, the largest component becomes the scaffold.</p> Source code in <code>fegrow/testing/test_general.py</code> <pre><code>def test_growing_keep_larger_component(RGroups):\n    \"\"\"\n    When a growing vector is an internal atom that divides the molecule,\n    the largest component becomes the scaffold.\n    \"\"\"\n    scaffold = Chem.MolFromSmiles(\"O=c1c(-c2cccc(Cl)c2)cccn1-c1cccnc1\")\n\n    # use C on the chlorinated benzene\n    attachment_index = 3\n    ethanol_rgroup = RGroups[RGroups.Name == \"*CCO\"].Mol.values[0]\n    rmol = fegrow.build_molecule(scaffold, ethanol_rgroup, attachment_index)\n\n    assert Chem.MolToSmiles(Chem.RemoveHs(rmol)) == \"O=c1c(CCO)cccn1-c1cccnc1\"\n</code></pre>"},{"location":"reference/testing/test_general/#fegrow.testing.test_general.test_growing_keep_larger_component_implicit_index","title":"test_growing_keep_larger_component_implicit_index","text":"<pre><code>test_growing_keep_larger_component_implicit_index(RGroups)\n</code></pre> <p>When a growing vector is an internal atom that divides the molecule, the largest component becomes the scaffold.</p> Source code in <code>fegrow/testing/test_general.py</code> <pre><code>def test_growing_keep_larger_component_implicit_index(RGroups):\n    \"\"\"\n    When a growing vector is an internal atom that divides the molecule,\n    the largest component becomes the scaffold.\n    \"\"\"\n    scaffold = Chem.MolFromSmiles(\"O=c1c(-c2cccc(Cl)c2)cccn1-c1cccnc1\")\n    # use C on the chlorinated benzene\n    scaffold.GetAtomWithIdx(3).SetAtomicNum(0)\n\n    methanol = Chem.MolFromSmiles(\"*CO\")\n    rmol = fegrow.build_molecule(scaffold, methanol)\n\n    assert Chem.MolToSmiles(Chem.RemoveHs(rmol)) == \"O=c1c(CO)cccn1-c1cccnc1\"\n</code></pre>"},{"location":"reference/testing/test_general/#fegrow.testing.test_general.test_growing_keep_cue_component","title":"test_growing_keep_cue_component","text":"<pre><code>test_growing_keep_cue_component(RGroups)\n</code></pre> <p>When a growing vector is an atom that divides the molecule, the user can specify which side to keep.</p> <p>Keep the smaller chlorinated benzene ring for growing ethanol</p> Source code in <code>fegrow/testing/test_general.py</code> <pre><code>def test_growing_keep_cue_component(RGroups):\n    \"\"\"\n    When a growing vector is an atom that divides the molecule,\n    the user can specify which side to keep.\n\n    Keep the smaller chlorinated benzene ring for growing ethanol\n    \"\"\"\n    scaffold = Chem.MolFromSmiles(\"O=c1c(-c2cccc(Cl)c2)cccn1-c1cccnc1\")\n    Chem.AllChem.Compute2DCoords(scaffold)\n\n    # use C on the chlorinated benzene\n    attachment_index = 2\n    keep_smaller_ring = 3\n    ethanol_rgroup = RGroups[RGroups.Name == \"*CCO\"].Mol.values[0]\n    rmol = fegrow.build_molecule(\n        scaffold, ethanol_rgroup, attachment_index, keep=keep_smaller_ring\n    )\n\n    assert Chem.MolToSmiles(Chem.RemoveHs(rmol)) == \"OCCc1cccc(Cl)c1\"\n</code></pre>"},{"location":"reference/testing/test_general/#fegrow.testing.test_general.test_replace_methyl","title":"test_replace_methyl","text":"<pre><code>test_replace_methyl(RGroups, sars_core_scaffold)\n</code></pre> Source code in <code>fegrow/testing/test_general.py</code> <pre><code>def test_replace_methyl(RGroups, sars_core_scaffold):\n    \"\"\" \"\"\"\n    params = Chem.SmilesParserParams()\n    params.removeHs = False  # keep the hydrogens\n    mol = Chem.MolFromSmiles(\n        \"[H]c1nc(N([H])C(=O)C([H])([H])[H])c([H])c([H])c1[H]\", params=params\n    )\n    Chem.AllChem.Compute2DCoords(mol)\n\n    scaffold = fegrow.RMol(mol)\n\n    # replace the methyl group\n    attachment_index = 8\n    ethanol_rgroup = RGroups[RGroups.Name == \"*CCO\"].Mol.values[0]\n    rmol = fegrow.build_molecule(scaffold, ethanol_rgroup, attachment_index)\n\n    assert (\n        Chem.MolToSmiles(rmol)\n        == \"[H]OC([H])([H])C([H])([H])C(=O)N([H])c1nc([H])c([H])c([H])c1[H]\"\n    )\n</code></pre>"},{"location":"reference/testing/test_general/#fegrow.testing.test_general.test_replace_methyl_keep_h","title":"test_replace_methyl_keep_h","text":"<pre><code>test_replace_methyl_keep_h(RGroups)\n</code></pre> Source code in <code>fegrow/testing/test_general.py</code> <pre><code>def test_replace_methyl_keep_h(RGroups):\n    \"\"\" \"\"\"\n    params = Chem.SmilesParserParams()\n    params.removeHs = False  # keep the hydrogens\n    mol = Chem.MolFromSmiles(\n        \"[H]c1nc(N([H])C(=O)C([H])([H])[H])c([H])c([H])c1[H]\", params=params\n    )\n    Chem.AllChem.Compute2DCoords(mol)\n\n    scaffold = fegrow.RMol(mol)\n\n    # replace the methyl group\n    attachment_index = 8\n    keep_only_h = 10\n    ethanol_rgroup = RGroups[RGroups.Name == \"*CCO\"].Mol.values[0]\n    rmol = fegrow.build_molecule(\n        scaffold, ethanol_rgroup, attachment_index, keep=keep_only_h\n    )\n\n    assert Chem.MolToSmiles(Chem.RemoveHs(rmol)) == \"CCO\"\n</code></pre>"},{"location":"reference/testing/test_general/#fegrow.testing.test_general.test_add_smiles_linker","title":"test_add_smiles_linker","text":"<pre><code>test_add_smiles_linker(sars_scaffold_chunk_sdf)\n</code></pre> <p>:return:</p> Source code in <code>fegrow/testing/test_general.py</code> <pre><code>def test_add_smiles_linker(sars_scaffold_chunk_sdf):\n    \"\"\"\n    :return:\n    \"\"\"\n    # Check if conformers are generated correctly.\n    attachment_index = 7\n\n    linker_rccr = Chem.AddHs(Chem.MolFromSmiles(\"*CC*\"))\n    fegrow.build_molecule(sars_scaffold_chunk_sdf, linker_rccr, attachment_index)\n</code></pre>"},{"location":"reference/testing/test_general/#fegrow.testing.test_general.test_add_linker_rgroup_first","title":"test_add_linker_rgroup_first","text":"<pre><code>test_add_linker_rgroup_first()\n</code></pre> <p>:return:</p> Source code in <code>fegrow/testing/test_general.py</code> <pre><code>def test_add_linker_rgroup_first():\n    \"\"\"\n    :return:\n    \"\"\"\n    # we can also link the linker and the R-group first\n    # before merging them into the main structure\n    linker_rccr = Chem.MolFromSmiles(\"*CC*\")\n    methyl = Chem.MolFromSmiles(\"CO*\")\n    prep = fegrow.build_molecule(linker_rccr, methyl)\n    assert Chem.MolToSmiles(prep) == \"*CCOC\"\n</code></pre>"},{"location":"reference/testing/test_general/#fegrow.testing.test_general.test_linker_c_first","title":"test_linker_c_first","text":"<pre><code>test_linker_c_first()\n</code></pre> <p>Mark the C as the first connecting point in the linker</p> <p>:return:</p> Source code in <code>fegrow/testing/test_general.py</code> <pre><code>def test_linker_c_first():\n    \"\"\"\n    Mark the C as the first connecting point in the linker\n\n    :return:\n    \"\"\"\n    linker_rccr = Chem.MolFromSmiles(\"[*:0]CO[*:1]\")\n\n    carbon = Chem.MolFromSmiles(\"C*\")\n    cco = fegrow.build_molecule(linker_rccr, carbon)\n    assert Chem.MolToSmiles(cco) == \"CCO[*:1]\"\n</code></pre>"},{"location":"reference/testing/test_general/#fegrow.testing.test_general.test_linker_o_first","title":"test_linker_o_first","text":"<pre><code>test_linker_o_first()\n</code></pre> <p>Mark the O as the first connecting point in the linker</p> <p>:return:</p> Source code in <code>fegrow/testing/test_general.py</code> <pre><code>def test_linker_o_first():\n    \"\"\"\n    Mark the O as the first connecting point in the linker\n\n    :return:\n    \"\"\"\n    linker_rccr = Chem.MolFromSmiles(\"[*:1]CO[*:0]\")\n\n    carbon = Chem.MolFromSmiles(\"C*\")\n    cco = fegrow.build_molecule(linker_rccr, carbon)\n    assert Chem.MolToSmiles(cco) == \"COC[*:1]\"\n</code></pre>"},{"location":"reference/testing/test_general/#fegrow.testing.test_general.test_add_a_linker_check_star","title":"test_add_a_linker_check_star","text":"<pre><code>test_add_a_linker_check_star(RLinkers, sars_scaffold_sdf)\n</code></pre> <ol> <li>load the core</li> <li>load the linker</li> <li>add the linker to the core</li> <li>check if there is a danling R/ atom linker = R1 C R2, 1 C 2, Core-C-1,</li> </ol> <p>:return:</p> Source code in <code>fegrow/testing/test_general.py</code> <pre><code>def test_add_a_linker_check_star(RLinkers, sars_scaffold_sdf):\n    \"\"\"\n    1. load the core\n    2. load the linker\n    3. add the linker to the core\n    4. check if there is a danling R/* atom\n    linker = R1 C R2, *1 C *2, Core-C-*1,\n\n    :return:\n    \"\"\"\n    # Check if conformers are generated correctly.\n    attachment_index = 40\n    # Select a linker\n    linker = RLinkers[RLinkers.Name == \"R1NC(R2)=O\"].Mol.values[0]\n    template_with_linker = fegrow.build_molecule(\n        sars_scaffold_sdf, linker, attachment_index\n    )\n\n    for atom in template_with_linker.GetAtoms():\n        if atom.GetAtomicNum() == 0:\n            assert len(atom.GetBonds()) == 1\n</code></pre>"},{"location":"reference/testing/test_receptor/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> test_receptor","text":""},{"location":"reference/testing/test_receptor/#fegrow.testing.test_receptor","title":"test_receptor","text":""},{"location":"tutorials/0_basic/0_basic_tutorial_full/","title":"0: Basics","text":"<p>Authors: Mateusz K Bieniek, Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, Daniel J. Cole</p> <ul> <li>Add chemical functional group (R-groups) in user-defined positions</li> <li>Output ADMET properties</li> <li>Perform constrained optimisation</li> <li>Score poses</li> <li>Output structures for free energy calculations</li> </ul>"},{"location":"tutorials/0_basic/0_basic_tutorial_full/#overview","title":"Overview","text":"<p>This notebook demonstrates the simplified <code>FEgrow</code> workflow for generating a new molecule with a common core for a specific binding site, via the addition of a user-defined R-group. </p> <p>This notebook introduces FEgrow conceptually but better tools are introduced in the later notebooks. </p> <p>These de novo ligands are then subjected to ADMET analysis. Valid conformers of the added R-group are enumerated, and optimised in the context of the receptor binding pocket, optionally using hybrid machine learning / molecular mechanics potentials (ML/MM).</p> <p>An ensemble of low energy conformers is generated for each ligand, and scored using the <code>gnina</code> convolutional neural network (CNN). Output structures are saved as <code>pdb</code> files ready for use in free energy calculations.</p> <p>The target for this tutorial is the main protease (Mpro) of SARS-CoV-2, and the core and receptor structures are taken from a recent study by Jorgensen &amp; co-workers.</p> <pre><code>import prody\nfrom rdkit import Chem\n\nimport fegrow\n</code></pre>"},{"location":"tutorials/0_basic/0_basic_tutorial_full/#prepare-the-ligand-scaffold","title":"Prepare the ligand scaffold","text":"<pre><code>init_mol = Chem.SDMolSupplier(\"sarscov2/mini.sdf\", removeHs=False)[0]\n\n# get the FEgrow representation of the rdkit Mol\nscaffold = fegrow.RMol(init_mol)\n</code></pre> <p>Show the 2D (with indices) representation of the core. This is used to select the desired growth vector.</p> <pre><code>scaffold.rep2D(idx=True, size=(500, 500))\n</code></pre> <p></p> <p>Using the 2D drawing, select an index for the growth vector. In this case, we are selecting the hydrogen atom labelled H:8</p> <pre><code>attachment_index = 8\n</code></pre>"},{"location":"tutorials/0_basic/0_basic_tutorial_full/#add-rgroup-to-your-scaffold","title":"Add RGroup to your scaffold","text":"<p>In this tutorial, we show how one can create an R-group from Smiles</p> <pre><code>R_group_methanol = Chem.AddHs(Chem.MolFromSmiles(\"*CO\"))\nR_group_methanol\n</code></pre> <p></p>"},{"location":"tutorials/0_basic/0_basic_tutorial_full/#build-new-molecules","title":"Build new molecules","text":"<pre><code># we have to specify where the R-group should be attached using the attachment index\nrmol = fegrow.build_molecule(scaffold, R_group_methanol, attachment_index)\n</code></pre> <pre><code>The R-Group lacks initial coordinates. Defaulting to Chem.rdDistGeom.EmbedMolecule.\n[21:14:58] UFFTYPER: Unrecognized atom type: *_ (0)\n</code></pre> <pre><code>rmol\n</code></pre> Smiles Molecule ID None [H]OC([H])([H])c1c([H])nc([H])c([H])c1[H] <pre><code>rmol.rep2D()\n</code></pre> <pre><code>rmol.rep3D()\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x77d5b87e7290&gt;\n</code></pre> <p>Once the ligands have been generated, they can be assessed for various ADMET properties, including Lipinksi rule of 5 properties, the presence of unwanted substructures or problematic functional groups, and synthetic accessibility.</p> <pre><code>rmol.toxicity()\n</code></pre> MW HBA HBD LogP Pass_Ro5 has_pains has_unwanted_subs has_prob_fgs synthetic_accessibility Smiles ID None 109.128 2 1 0.574 True False False False 7.299 [H]OC([H])([H])c1c([H])nc([H])c([H])c1[H] <p>A specified number of conformers (<code>num_conf</code>) is generated by using the RDKit ETKDG algorithm. Conformers that are too similar to an existing structure are discarded. Empirically, we have found that <code>num_conf=200</code> gives an exhaustive search, and <code>num_conf=50</code> gives a reasonable, fast search, in most cases.</p> <p>If required, a third argument can be added <code>flexible=[0,1,...]</code>, which provides a list of additional atoms in the core that are allowed to be flexible. This is useful, for example, if growing from a methyl group and you would like the added R-group to freely rotate.</p> <pre><code>rmol.generate_conformers(\n    num_conf=50,\n    minimum_conf_rms=0.5,\n    # flexible=[3, 18, 20])\n)\n</code></pre> <pre><code>Generated 2 conformers.\n</code></pre>"},{"location":"tutorials/0_basic/0_basic_tutorial_full/#prepare-the-protein","title":"Prepare the protein","text":"<p>The protein-ligand complex structure is downloaded, and PDBFixer is used to protonate the protein, and perform other simple repair:</p> <pre><code># get the protein-ligand complex structure\n!wget -nc https://files.rcsb.org/download/7L10.pdb\n\n# load the complex with the ligand\nsys = prody.parsePDB(\"7L10.pdb\")\n\n# remove any unwanted molecules\nrec = sys.select(\"not (nucleic or hetatm or water)\")\n\n# save the processed protein\nprody.writePDB(\"rec.pdb\", rec)\n\n# fix the receptor file (missing residues, protonation, etc)\nfegrow.fix_receptor(\"rec.pdb\", \"rec_final.pdb\")\n\n# load back into prody\nrec_final = prody.parsePDB(\"rec_final.pdb\")\n</code></pre> <pre><code>File \u20187L10.pdb\u2019 already there; not retrieving.\n\n\n\n@&gt; 2609 atoms and 1 coordinate set(s) were parsed in 0.05s.\n@&gt; 4638 atoms and 1 coordinate set(s) were parsed in 0.03s.\n</code></pre> <p>View enumerated conformers in complex with protein:</p> <pre><code>rmol.rep3D(prody=rec_final)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x77d5b6b3f6d0&gt;\n</code></pre> <p>Any conformers that clash with the protein (any atom-atom distance less than 1 Angstrom), are removed.</p> <pre><code>rmol.remove_clashing_confs(rec_final)\n</code></pre> <pre><code>Removed 0 conformers.\n</code></pre> Smiles Molecule ID None [H]OC([H])([H])c1c([H])nc([H])c([H])c1[H] <pre><code>rmol.rep3D(prody=rec_final)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x77d5b873f790&gt;\n</code></pre>"},{"location":"tutorials/0_basic/0_basic_tutorial_full/#optimise-conformers-in-context-of-protein","title":"Optimise conformers in context of protein","text":"<p>The remaining conformers are optimised using hybrid machine learning / molecular mechanics (ML/MM), using the ANI2x neural nework potential for the ligand energetics (as long as it contains only the atoms H, C, N, O, F, S, Cl). Note that the Open Force Field Sage force field is used for intermolecular interactions with the receptor.</p> <p><code>sigma_scale_factor</code>: is used to scale the Lennard-Jones radii of the atoms.</p> <p><code>relative_permittivity</code>: is used to scale the electrostatic interactions with the protein.</p> <p><code>water_model</code>: can be used to set the force field for any water molecules present in the binding site.</p> <pre><code># opt_mol, energies\nenergies = rmol.optimise_in_receptor(\n    receptor_file=\"rec_final.pdb\",\n    ligand_force_field=\"openff\",\n    use_ani=True,\n    sigma_scale_factor=0.8,\n    relative_permittivity=4,\n    water_model=None,\n    platform_name=\"CPU\",  # or e.g. 'CUDA'\n)\n</code></pre> <pre><code>/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nusing ani2x\n\n\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:04&lt;00:00,  2.02s/it]\n</code></pre> <p>The rmol might have no available conformers due to unresolvable steric clashes with the protein. This can be checked using the RDKit's function:</p> <pre><code>rmol.GetNumConformers()\n</code></pre> <pre><code>2\n</code></pre> <p>Optionally, display the final optimised conformers. Note that, unlike classical force fields, ANI allows bond breaking. You may occasionally see ligands with distorted structures and very long bonds, but in our experience these are rarely amongst the low energy structures and can be ignored.</p> <p>Conformers are now sorted by energy, only retaining those within 5 kcal/mol of the lowest energy structure:</p> <pre><code>final_energies = rmol.sort_conformers(energy_range=5)\n</code></pre> <pre><code>rmol.rep3D()\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x77d5b58c7490&gt;\n</code></pre> <p>Save all of the lowest energy conformers to files and print the sorted energies in kcal/mol (shifted so that the lowest energy conformer is zero).</p> <pre><code>rmol.to_file(\"1_mini_rmol_best_conformers.pdb\")\n</code></pre> <pre><code>print(final_energies)\n</code></pre> <pre><code>     ID  Conformer  Energy\n0  None          0   0.000\n1  None          1   2.951\n</code></pre> <p>The conformers are scored using the Gnina molecular docking program and convolutional neural network scoring function. [Note that this step is not supported on macOS]. If unavailable, the Gnina executable is downloaded during the first time it is used. The CNNscores may also be converted to predicted Kd (nM) (see column \"Kd\").</p> <pre><code>affinities = rmol.gnina(receptor_file=\"rec_final.pdb\")\naffinities\n</code></pre> ID Conformer CNNaffinity Kd 0 0 0 2.999 1001866.8342948152 1 0 1 3.013 970733.4611535071 <p>Predicted binding affinities may be further refined using the structures output by <code>FEgrow</code>, using your favourite free energy calculation engine. See our paper for an example using SOMD to calculate the relative binding free energies of 13 Mpro inhibitors.</p> <pre><code># display units\naffinities.Kd\n</code></pre> <pre><code>0    1001866.8342948152\n1     970733.4611535071\nName: Kd, dtype: pint[nanomolar][Float64]\n</code></pre> <pre><code>\n</code></pre>"},{"location":"tutorials/1_chemspace/1_tutorial_introduce_chemspace/","title":"1: ChemSpace","text":"<p>Authors: Mateusz K Bieniek, Ben Cree, Rachael Pirie, Joshua T. Horton, Natalie J. Tatum, Daniel J. Cole</p>"},{"location":"tutorials/1_chemspace/1_tutorial_introduce_chemspace/#overview","title":"Overview","text":"<p>Here we introduce the ChemSpace class which:  - automates protocols and takes care of CPU/cluster processing with Dask  - stores data in a dataframe  - employs scikit for active learning</p> <pre><code>import prody\nfrom rdkit import Chem\n\nimport fegrow\nfrom fegrow import ChemSpace, Linkers, RGroups\n\n# initialise\nrgroups = RGroups()\nlinkers = Linkers()\n</code></pre> <pre><code>MolGridWidget(grid_id='m2')\n\n\n\nMolGridWidget(grid_id='m1')\n</code></pre> <pre><code>from dask.distributed import LocalCluster\n\nlc = LocalCluster(processes=True, n_workers=None, threads_per_worker=1)\n</code></pre> <pre><code>2025-03-15 15:12:49,588 - distributed.nanny - WARNING - Restarting worker\n</code></pre>"},{"location":"tutorials/1_chemspace/1_tutorial_introduce_chemspace/#prepare-the-ligand-template","title":"Prepare the ligand template","text":"<p>The provided core structure is adapted from a recent study by Jorgensen and co-workers binding pocket of SARS-CoV-2 Mpro. Load the protonated ligand into FEgrow:</p> <pre><code>!obabel -ipdb sarscov2/lig.pdb -osdf -O sarscov2/coreh.sdf -p 7\n</code></pre> <pre><code>1 molecule converted\n</code></pre> <pre><code>init_mol = Chem.SDMolSupplier(\"sarscov2/coreh.sdf\", removeHs=False)[0]\n\n# get the FEgrow representation of the rdkit Mol\nscaffold = fegrow.RMol(init_mol)\n</code></pre> <p>Show the 2D (with indices) representation of the core. This is used to select the desired growth vector.</p> <pre><code>scaffold.rep2D(idx=True, size=(500, 500))\n</code></pre> <p></p> <p>Using the 2D drawing, select an index for the growth vector. Note that it is currently only possible to grow from hydrogen atom positions. In this case, we are selecting the hydrogen atom labelled H:40 to enable growth.</p> <pre><code># specify the connecting point\nscaffold.GetAtomWithIdx(40).SetAtomicNum(0)\n</code></pre> <pre><code># create the chemical space\ncs = ChemSpace(dask_cluster=lc)\n</code></pre> <pre><code>Dask can be watched on http://127.0.0.1:8787/status\n</code></pre> <pre><code>cs.add_scaffold(scaffold)\n</code></pre> <pre><code># initially it is empty\ncs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D"},{"location":"tutorials/1_chemspace/1_tutorial_introduce_chemspace/#select-rgroups-for-your-template","title":"Select RGroups for your template","text":"<p>R-groups can be selected interactively or programmaticaly.</p> <p>We have provided a set of common R-groups (see <code>fegrow/data/rgroups/library</code>), which can be browsed and selected interactively below.</p> <p>Molecules from the library can alternatively be selected by name, as demonstrated below.</p> <p>Finally, user-defined R-groups may be provided as <code>.mol</code> files. In this case, the hydrogen atom selected for attachment should be replaced by the element symbol R. See the directory <code>manual_rgroups</code> for examples.</p> <pre><code>rgroups\n</code></pre> <pre><code># retrieve the interactively selected groups\ninteractive_rgroups = rgroups.get_selected()\n\n# you can also directly access the built-in dataframe programmatically\nR_group_ethanol = rgroups[rgroups.Name == \"*CCO\"].Mol.item()\n\n# select the R-group using the index\nR_group_cyclopropane = rgroups.Mol[69]\n\n# use SMILES\nR_group_methanol = Chem.AddHs(Chem.MolFromSmiles(\"*CO\"))\n\n# add your R-groups from files\n# R_group_propanol = Chem.MolFromMolFile('manual_rgroups/propan-1-ol-r.mol', removeHs=False)\n</code></pre>"},{"location":"tutorials/1_chemspace/1_tutorial_introduce_chemspace/#expand-your-chemical-space-by-building-on-top-off-your-scaffold","title":"Expand your chemical space by building on top off your scaffold.","text":"<pre><code># Adding R-groups implies that the scaffold should be used.\n# The previously scaffold will be attached automatically.\n\n# or we can use the template merged with the linker\n# in which case the attachement point is not needed (R* atom is used)\ncs.add_rgroups(interactive_rgroups)\ncs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D 0 [H]Oc1c([H])c(Cl)c([H])c(-c2c([H])c(-c3c([H])c... &lt;NA&gt; 40 False NaN False NaN 1 [H]c1nc([H])c(-n2c([H])c(-c3c([H])c([H])c([H])... &lt;NA&gt; 40 False NaN False NaN <pre><code>linkers\n</code></pre> <pre><code># get linkers programmatically from the library\nrcr_linker = linkers[linkers.Name == \"R1CR2\"].Mol.item()\nrocr_linker = (\n    linkers.Mol[6],\n)  # use the linker table index directly, e.g. index 6 is \"R2COR1\"\n\n# pick linkers from the grid\ngrid_linkers = linkers.get_selected()\n\n# use Smiles\nrcor_linker = Chem.AddHs(Chem.MolFromSmiles(\"[*:0]CO[*:1]\"))\n</code></pre>"},{"location":"tutorials/1_chemspace/1_tutorial_introduce_chemspace/#_1","title":"1: ChemSpace","text":""},{"location":"tutorials/1_chemspace/1_tutorial_introduce_chemspace/#add-linkers-to-build-more-structures","title":"Add linkers to build more structures","text":"<pre><code># Adding R-groups implies that the scaffold should be used.\n# The previously scaffold will be attached automatically.\n\n# join a linker with the rgroups\ncs.add_rgroups(grid_linkers, interactive_rgroups)\ncs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D 0 [H]Oc1c([H])c(Cl)c([H])c(-c2c([H])c(-c3c([H])c... &lt;NA&gt; 40 False NaN False NaN 1 [H]c1nc([H])c(-n2c([H])c(-c3c([H])c([H])c([H])... &lt;NA&gt; 40 False NaN False NaN 2 [H]OC([H])([H])c1c([H])c(Cl)c([H])c(-c2c([H])c... &lt;NA&gt; 40 False NaN False NaN 3 [H]c1nc([H])c(-n2c([H])c(-c3c([H])c([H])c([H])... &lt;NA&gt; 40 False NaN False NaN <p>The R-group library can also be viewed as a 2D grid, or individual molecules can be selected for 3D view (note that the conformation of the R-group has not yet been optimised):</p> <pre><code>mol = cs[0]\nmol.rep2D()\n</code></pre> <p></p> <pre><code>cs[0].rep3D()\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x7bc72449c850&gt;\n</code></pre> <p>Once the ligands have been generated, they can be assessed for various ADMET properties, including Lipinksi rule of 5 properties, the presence of unwanted substructures or problematic functional groups, and synthetic accessibility.</p> <pre><code>cs.toxicity()\n</code></pre> MW HBA HBD LogP Pass_Ro5 has_pains has_unwanted_subs has_prob_fgs synthetic_accessibility Smiles Molecule 0 399.837 5 1 4.797 True False False True 7.092 [H]Oc1c([H])c(Cl)c([H])c(-c2c([H])c(-c3c([H])c... 1 418.283 4 0 5.745 True False False True 6.883 [H]c1nc([H])c(-n2c([H])c(-c3c([H])c([H])c([H])... 2 413.864 5 1 4.584 True False False True 7.295 [H]OC([H])([H])c1c([H])c(Cl)c([H])c(-c2c([H])c... 3 447.325 5 1 5.700 True False True True 7.262 [H]c1nc([H])c(-n2c([H])c(-c3c([H])c([H])c([H])... <p>For each ligand, a specified number of conformers (<code>num_conf</code>) is generated by using the RDKit ETKDG algorithm. Conformers that are too similar to an existing structure are discarded. Empirically, we have found that <code>num_conf=200</code> gives an exhaustive search, and <code>num_conf=50</code> gives a reasonable, fast search, in most cases.</p> <p>If required, a third argument can be added <code>flexible=[0,1,...]</code>, which provides a list of additional atoms in the core that are allowed to be flexible. This is useful, for example, if growing from a methyl group and you would like the added R-group to freely rotate.</p> <pre><code>cs.generate_conformers(\n    num_conf=50,\n    minimum_conf_rms=0.5,\n    # flexible=[3, 18, 20])\n)\n</code></pre>"},{"location":"tutorials/1_chemspace/1_tutorial_introduce_chemspace/#prepare-the-protein","title":"Prepare the protein","text":"<p>The protein-ligand complex structure is downloaded, and PDBFixer is used to protonate the protein, and perform other simple repair:</p> <pre><code># get the protein-ligand complex structure\n!wget -nc https://files.rcsb.org/download/7L10.pdb\n\n# load the complex with the ligand\nsys = prody.parsePDB(\"7L10.pdb\")\n\n# remove any unwanted molecules\nrec = sys.select(\"not (nucleic or hetatm or water)\")\n\n# save the processed protein\nprody.writePDB(\"rec.pdb\", rec)\n\n# fix the receptor file (missing residues, protonation, etc)\nfegrow.fix_receptor(\"rec.pdb\", \"rec_final.pdb\")\n\n# load back into prody\nrec_final = prody.parsePDB(\"rec_final.pdb\")\n</code></pre> <pre><code>File \u20187L10.pdb\u2019 already there; not retrieving.\n\n\n\n@&gt; 2609 atoms and 1 coordinate set(s) were parsed in 0.05s.\n@&gt; 4638 atoms and 1 coordinate set(s) were parsed in 0.03s.\n</code></pre> <p>View enumerated conformers in complex with protein:</p> <pre><code>cs[0].rep3D(prody=rec_final)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x7bc6bc6a29d0&gt;\n</code></pre> <p>Any conformers that clash with the protein (any atom-atom distance less than 1 Angstrom), are removed.</p> <pre><code>cs.remove_clashing_confs(rec_final)\n</code></pre> <pre><code>cs[3].rep3D(prody=rec_final)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x7bc724797710&gt;\n</code></pre>"},{"location":"tutorials/1_chemspace/1_tutorial_introduce_chemspace/#optimise-conformers-in-context-of-protein","title":"Optimise conformers in context of protein","text":"<p>The remaining conformers are optimised using hybrid machine learning / molecular mechanics (ML/MM), using the ANI2x neural nework potential for the ligand energetics (as long as it contains only the atoms H, C, N, O, F, S, Cl). Note that the Open Force Field Sage force field is used for intermolecular interactions with the receptor.</p> <p><code>sigma_scale_factor</code>: is used to scale the Lennard-Jones radii of the atoms.</p> <p><code>relative_permittivity</code>: is used to scale the electrostatic interactions with the protein.</p> <p><code>water_model</code>: can be used to set the force field for any water molecules present in the binding site.</p> <pre><code># opt_mol, energies\nenergies = cs.optimise_in_receptor(\n    receptor_file=\"rec_final.pdb\",\n    ligand_force_field=\"openff\",\n    use_ani=True,\n    sigma_scale_factor=0.8,\n    relative_permittivity=4,\n    water_model=None,\n    platform_name=\"CPU\",  # or e.g. 'CUDA'\n)\n</code></pre> <pre><code>/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:02&lt;00:00,  2.54s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\nGenerated 1 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e     | 3/4 [00:06&lt;00:01,  1.98s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:07&lt;00:00,  1.93s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:02&lt;00:00,  2.38s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:02&lt;00:00,  2.18s/it]\n</code></pre> <p>Any of the rmols that have no available conformers (due to unresolvable steric clashes with the protein) can be discarded using the <code>.discard_missing()</code> function. This function also returns a list of the indices that were removed, which can be helpful when carrying out data analysis.</p> <pre><code>missing_ids = cs.discard_missing()\n</code></pre> <p>Optionally, display the final optimised conformers. Note that, unlike classical force fields, ANI allows bond breaking. You may occasionally see ligands with distorted structures and very long bonds, but in our experience these are rarely amongst the low energy structures and can be ignored.</p> <p>Conformers are now sorted by energy, only retaining those within 5 kcal/mol of the lowest energy structure:</p> <pre><code>final_energies = cs.sort_conformers(energy_range=5)\n</code></pre> <pre><code>RMol index 0\nRMol index 1\nRMol index 2\nRMol index 3\n</code></pre> <pre><code>cs[0].rep3D()\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>&lt;py3Dmol.view at 0x7bc6dc34b490&gt;\n</code></pre> <p>Save all of the lowest energy conformers to files and print the sorted energies in kcal/mol (shifted so that the lowest energy conformer is zero).</p> <pre><code>cs.to_sdf(\"optimised_molecules.sdf\")\ncs[0].to_file(\"best_conformers0.pdb\")\n</code></pre> <pre><code>print(final_energies)\n</code></pre> <pre><code>               Energy\nID  Conformer        \nNaN 0           0.000\n    0           0.000\n    0           0.000\n    0           0.000\n    1           1.076\n    2           2.425\n    3           4.316\n</code></pre> <p>The conformers are scored using the Gnina molecular docking program and convolutional neural network scoring function. [Note that this step is not supported on macOS]. If unavailable, the Gnina executable is downloaded during the first time it is used. The CNNscores may also be converted to predicted Kd (nM) (see column \"Kd\").</p> <pre><code>affinities = cs.gnina(receptor_file=\"rec_final.pdb\")\naffinities\n</code></pre> CNNaffinity Kd ID Conformer 0 0 6.552 280.64673883117337 1 0 6.947 112.87818041005565 2 0 6.462 345.30272050564054 3 0 6.361 435.22115784610503 1 7.031 93.19443935061061 2 6.887 129.76273782127248 3 6.567 271.1190287334798 <p>Predicted binding affinities may be further refined using the structures output by <code>FEgrow</code>, using your favourite free energy calculation engine. See our paper for an example using SOMD to calculate the relative binding free energies of 13 Mpro inhibitors.</p> <pre><code># display units\naffinities.Kd\n</code></pre> <pre><code>ID  Conformer\n0   0            280.64673883117337\n1   0            112.87818041005565\n2   0            345.30272050564054\n3   0            435.22115784610503\n    1             93.19443935061061\n    2            129.76273782127248\n    3             271.1190287334798\nName: Kd, dtype: pint[nanomolar][Float64]\n</code></pre> <pre><code>\n</code></pre>"},{"location":"tutorials/2_active_learning/2_tutorial_active_learning/","title":"2: Active Learning","text":"<p>This tutorial demonstrates how to use FEgrow in combination with active learning to optimise the predicted pK of designed compounds against the main protease of SARS-CoV-2. See our preprint for more details.</p> <pre><code>import prody\nfrom rdkit import Chem\n\nimport fegrow\nfrom fegrow import ChemSpace, Linkers, RGroups\nfrom fegrow.al import Model, Query\n\nrgroups = RGroups()\nlinkers = Linkers()\n</code></pre> <pre><code>MolGridWidget(grid_id='m2')\n\n\n\nMolGridWidget(grid_id='m1')\n</code></pre> <pre><code>from dask.distributed import LocalCluster\n\nlc = LocalCluster(processes=True, n_workers=None, threads_per_worker=1)\n</code></pre> <pre><code>/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/distributed/node.py:187: UserWarning: Port 8787 is already in use.\nPerhaps you already have a cluster running?\nHosting the HTTP server on port 34625 instead\n  warnings.warn(\n2025-03-14 21:18:29,667 - distributed.nanny - WARNING - Restarting worker\n2025-03-14 21:18:44,750 - distributed.nanny - WARNING - Restarting worker\n2025-03-14 21:19:01,168 - distributed.nanny - WARNING - Restarting worker\n2025-03-14 21:19:30,586 - distributed.nanny - WARNING - Restarting worker\n</code></pre> <pre><code># create the chemical space\ncs = ChemSpace(dask_cluster=lc)\ncs\n</code></pre> <pre><code>Dask can be watched on http://127.0.0.1:34625/status\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D <pre><code># turn on the caching in RAM (optional)\ncs.set_dask_caching()\n</code></pre> <p>Read in the protonated ligand core:</p> <pre><code>init_mol = Chem.SDMolSupplier(\"sarscov2/5R83_core.sdf\", removeHs=False)[0]\n\n# get the FEgrow representation of the rdkit Mol\nscaffold = fegrow.RMol(init_mol)\n</code></pre> <pre><code>scaffold.rep2D(idx=True, size=(500, 500))\n</code></pre> <p></p> <pre><code># specify the attachment point (in this case hydrogen atom number 6)\nattachmentid = 6\n\nscaffold.GetAtomWithIdx(attachmentid).SetAtomicNum(0)\ncs.add_scaffold(scaffold)\n</code></pre> <pre><code>cs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D <pre><code># load the receptor structure\nsys = prody.parsePDB(\"sarscov2/5R83_final.pdb\")\n\n# remove any unwanted molecules\nrec = sys.select(\"not (nucleic or hetatm or water)\")\n\n# save the processed protein\nprody.writePDB(\"rec.pdb\", rec)\n\n# fix the receptor file (missing residues, protonation, etc)\nfegrow.fix_receptor(\"rec.pdb\", \"rec_final.pdb\")\n\ncs.add_protein(\"rec_final.pdb\")\n</code></pre> <pre><code>@&gt; 4656 atoms and 1 coordinate set(s) were parsed in 0.04s.\n</code></pre> <p>Build a chemical space to explore with active learning (this will take a few minutes). Here, we pick 50 of each of the most common linkers and R-groups, giving us 2500 molecules in total, but these can be increased:</p> <pre><code>numlinkers = 50\nnumrgroups = 50\n\nfor i in range(numlinkers):\n    if i % 10 == 0:\n        print(i)\n    for j in range(numrgroups):\n        cs.add_rgroups(linkers.Mol[i], rgroups.Mol[j])\n</code></pre> <pre><code>0\n10\n20\n30\n40\n</code></pre> <pre><code># The chemical space now includes our 2500 small molecules:\ncs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id 2D 0 [H]OC([H])([H])c1c([H])nc([H])c([H])c1[H] &lt;NA&gt; 6 False NaN False NaN 1 [H]c1nc([H])c(C([H])([H])OC([H])([H])[H])c([H]... &lt;NA&gt; 6 False NaN False NaN 2 [H]c1nc([H])c(C([H])([H])N([H])[H])c([H])c1[H] &lt;NA&gt; 6 False NaN False NaN 3 [H]c1nc([H])c(C([H])([H])Cl)c([H])c1[H] &lt;NA&gt; 6 False NaN False NaN 4 [H]c1nc([H])c(C([H])([H])F)c([H])c1[H] &lt;NA&gt; 6 False NaN False NaN ... ... ... ... ... ... ... ... ... 2495 [H]c1nc([H])c(-c2c([H])c([H])c([H])c([H])c2N2C... &lt;NA&gt; 6 False NaN False NaN 2496 [H]c1nc([H])c(-c2c([H])c([H])c([H])c([H])c2N2C... &lt;NA&gt; 6 False NaN False NaN 2497 [H]c1nc([H])c(-c2c([H])c([H])c([H])c([H])c2-c2... &lt;NA&gt; 6 False NaN False NaN 2498 [H]Oc1c([H])c([H])c([H])c(-c2c([H])c([H])c([H]... &lt;NA&gt; 6 False NaN False NaN 2499 [H]c1nc([H])c(-c2c([H])c([H])c([H])c([H])c2C([... &lt;NA&gt; 6 False NaN False NaN <p>2500 rows \u00d7 8 columns</p> <pre><code>cs[0].rep2D()\n</code></pre> <p></p> <p>The active learning model initially has no data, so the first 50 molecules are selected at random:</p> <pre><code># Pick 50 random molecules\nrandom1 = cs.active_learning(50, first_random=True)\n</code></pre> <pre><code>/home/dresio/code/fegrow/fegrow/package.py:1376: UserWarning: Selecting randomly the first samples to be studied (no score data yet). \n  warnings.warn(\n</code></pre> <pre><code># now evaluate the first selection, note that dask is used to parallelise the calculation\n# molecules that cannot be built assigned a predicted affinity of 0\nrandom1_results = cs.evaluate(\n    random1, num_conf=50, gnina_gpu=True, penalty=0.0, al_ignore_penalty=False\n)\n</code></pre> <pre><code>/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n\n\nGenerated 4 conformers. \nRemoved 1 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nGenerated 6 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  33%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b               | 2/6 [00:04&lt;00:08,  2.23s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:14&lt;00:00,  2.35s/it]\n\n\nGenerated 36 conformers. \nRemoved 15 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/21 [00:00&lt;?, ?it/s] Optimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:19&lt;00:00,  6.65s/it] Optimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:19&lt;00:00,  6.64s/it]</p> <pre><code>Generated 13 conformers. \nRemoved 2 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/11 [00:00&lt;?, ?it/s]2025-03-14 21:18:02,602 - distributed.worker - ERROR - Compute Failed\nKey:       _evaluate_atomic-c7dc0479-f8a4-424d-868f-731ce545f28e\nState:     executing\nTask:  &lt;Task '_evaluate_atomic-c7dc0479-f8a4-424d-868f-731ce545f28e' apply(...)&gt;\nException: \"Exception('No Conformers')\"\nTraceback: '  File \"/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/dask/utils.py\", line 77, in apply\\n    return func(*args, **kwargs)\\n           ^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/dresio/code/fegrow/fegrow/package.py\", line 1830, in _evaluate_atomic\\n    raise Exception(\"No Conformers\")\\n'\n\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   9%|\u2588\u2588                    | 1/11 [00:04&lt;00:43,  4.32s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  14%|\u2588\u2588\u2588\u258f                  | 3/21 [00:08&lt;00:44,  2.49s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\nOptimising conformer:  45%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588            | 5/11 [00:14&lt;00:15,  2.60s/it]\n\nGenerated 36 conformers. \nRemoved 15 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/21 [00:00&lt;?, ?it/s]</p> <pre><code>Generated 4 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/34 [00:00&lt;?, ?it/s]\n\nGenerated 45 conformers. \nRemoved 11 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:12&lt;00:00,  3.18s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\nOptimising conformer:  91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 10/11 [00:32&lt;00:03,  3.51s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:37&lt;00:00,  3.42s/it]\n\n\nGenerated 22 conformers. \nRemoved 13 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  57%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         | 12/21 [00:38&lt;00:33,  3.75s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  15%|\u2588\u2588\u2588\u258f                  | 5/34 [00:20&lt;01:41,  3.51s/it]\n\nGenerated 25 conformers. \nRemoved 5 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nGenerated 13 conformers. \nRemoved 8 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  21%|\u2588\u2588\u2588\u2588\u258c                 | 7/34 [00:28&lt;01:46,  3.95s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  20%|\u2588\u2588\u2588\u2588\u258d                 | 4/20 [00:14&lt;00:56,  3.52s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  25%|\u2588\u2588\u2588\u2588\u2588\u258c                | 5/20 [00:17&lt;00:50,  3.38s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:21&lt;00:00,  4.25s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [01:04&lt;00:00,  3.08s/it]\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          | 10/20 [00:29&lt;00:25,  2.58s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589     | 7/9 [00:37&lt;00:08,  4.35s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  38%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588             | 13/34 [00:54&lt;01:15,  3.62s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9/9 [00:43&lt;00:00,  4.82s/it]\nOptimising conformer:  67%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       | 14/21 [01:07&lt;00:33,  4.75s/it]\n\nGenerated 22 conformers. \nRemoved 9 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  47%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589           | 16/34 [01:05&lt;01:03,  3.54s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 18/20 [00:47&lt;00:04,  2.35s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [00:52&lt;00:00,  2.61s/it]\nOptimising conformer:  59%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e        | 20/34 [01:17&lt;00:43,  3.12s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\nOptimising conformer:  46%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f           | 6/13 [00:18&lt;00:19,  2.77s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f      | 9/13 [00:24&lt;00:08,  2.19s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\nOptimising conformer:  92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 12/13 [00:31&lt;00:02,  2.26s/it]\n\nGenerated 34 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [00:33&lt;00:00,  2.55s/it]\nOptimising conformer:   5%|\u2588                     | 1/20 [00:04&lt;01:22,  4.32s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                               | 0/3 [00:00&lt;?, ?it/s]\n\nGenerated 4 conformers. \nRemoved 1 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  15%|\u2588\u2588\u2588\u258e                  | 3/20 [00:08&lt;00:42,  2.51s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [01:50&lt;00:00,  5.24s/it]\nOptimising conformer:  67%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e       | 2/3 [00:08&lt;00:04,  4.39s/it]\n\nGenerated 15 conformers. \nRemoved 7 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:13&lt;00:00,  4.35s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nWarning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\nOptimising conformer:   0%|                              | 0/16 [00:00&lt;?, ?it/s]\n\nGenerated 38 conformers. \nRemoved 22 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  30%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c               | 6/20 [00:25&lt;01:24,  6.07s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          | 10/20 [00:34&lt;00:30,  3.02s/it]\n\nGenerated 19 conformers. \nRemoved 6 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/1 [00:00&lt;?, ?it/s]\n\nGenerated 11 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:04&lt;00:00,  4.13s/it]\nOptimising conformer:  75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a     | 15/20 [00:44&lt;00:11,  2.27s/it]\n\nGenerated 21 conformers. \nRemoved 13 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  31%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589               | 5/16 [00:24&lt;00:47,  4.27s/it]\n\nGenerated 12 conformers. \nRemoved 7 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 34/34 [02:22&lt;00:00,  4.19s/it]\nOptimising conformer:  62%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c        | 8/13 [00:16&lt;00:09,  1.90s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [00:55&lt;00:00,  2.76s/it]\nOptimising conformer:  92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 12/13 [00:24&lt;00:01,  1.83s/it]\n\nGenerated 4 conformers. \nRemoved 2 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:44&lt;00:00,  5.53s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [00:26&lt;00:00,  2.06s/it]\nOptimising conformer:  25%|\u2588\u2588\u2588\u2588\u2588\u258a                 | 2/8 [00:18&lt;00:53,  8.97s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d    | 4/5 [00:21&lt;00:05,  5.10s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:12&lt;00:00,  6.40s/it]\n2025-03-14 21:21:10,726 - distributed.worker - ERROR - Compute Failed\nKey:       _evaluate_atomic-e8c4dd50-5235-46cc-85d3-3de91766df5c\nState:     executing\nTask:  &lt;Task '_evaluate_atomic-e8c4dd50-5235-46cc-85d3-3de91766df5c' apply(...)&gt;\nException: \"Exception('No Conformers')\"\nTraceback: '  File \"/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/dask/utils.py\", line 77, in apply\\n    return func(*args, **kwargs)\\n           ^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/dresio/code/fegrow/fegrow/package.py\", line 1830, in _evaluate_atomic\\n    raise Exception(\"No Conformers\")\\n'\n\n\n\nGenerated 10 conformers. \nRemoved 2 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/8 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:25&lt;00:00,  5.18s/it]\n2025-03-14 21:21:12,952 - distributed.worker - ERROR - Compute Failed\nKey:       _evaluate_atomic-8d556f51-effa-4a17-9d16-933ca3c13141\nState:     executing\nTask:  &lt;Task '_evaluate_atomic-8d556f51-effa-4a17-9d16-933ca3c13141' apply(...)&gt;\nException: \"Exception('No Conformers')\"\nTraceback: '  File \"/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/dask/utils.py\", line 77, in apply\\n    return func(*args, **kwargs)\\n           ^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/dresio/code/fegrow/fegrow/package.py\", line 1830, in _evaluate_atomic\\n    raise Exception(\"No Conformers\")\\n'\n\nOptimising conformer:   0%|                              | 0/10 [00:00&lt;?, ?it/s]\n\nGenerated 24 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  62%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d        | 5/8 [00:36&lt;00:19,  6.53s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 7/8 [00:19&lt;00:02,  2.59s/it]\n\nGenerated 2 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:21&lt;00:00,  2.65s/it]\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c           | 1/2 [00:04&lt;00:04,  4.59s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/__init__.py:59: UserWarning: Dependency not satisfied, torchani.ase will not be available\n  warnings.warn(\"Dependency not satisfied, torchani.ase will not be available\")\nOptimising conformer:  60%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f        | 6/10 [00:24&lt;00:14,  3.61s/it]Warning: importing 'simtk.openmm' is deprecated.  Import 'openmm' instead.\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:55&lt;00:00,  6.95s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:07&lt;00:00,  3.55s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:30&lt;00:00,  3.04s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [01:24&lt;00:00,  5.30s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                               | 0/5 [00:00&lt;?, ?it/s]\n\nGenerated 8 conformers. \nRemoved 3 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nGenerated 23 conformers. \nRemoved 13 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/10 [00:00&lt;?, ?it/s]</p> <pre><code>Generated 33 conformers. \nRemoved 11 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/22 [00:00&lt;?, ?it/s]</p> <pre><code>Generated 37 conformers. \nRemoved 22 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  10%|\u2588\u2588\u258f                   | 1/10 [00:04&lt;00:40,  4.47s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  20%|\u2588\u2588\u2588\u2588\u258d                 | 2/10 [00:06&lt;00:24,  3.04s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:13&lt;00:00,  2.67s/it]\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           | 5/10 [00:13&lt;00:11,  2.38s/it]\n\nGenerated 15 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  36%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588              | 8/22 [00:22&lt;00:44,  3.20s/it]\n\nGenerated 21 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/21 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:25&lt;00:00,  2.51s/it]\nOptimising conformer:   5%|\u2588                     | 1/21 [00:05&lt;01:45,  5.28s/it]\n\nGenerated 44 conformers. \nRemoved 29 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  40%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a             | 6/15 [00:31&lt;00:48,  5.38s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  33%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e              | 7/21 [00:21&lt;00:38,  2.73s/it]\n\nGenerated 24 conformers. \nRemoved 16 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:33&lt;00:00,  6.72s/it]\n2025-03-14 21:22:37,278 - distributed.worker - ERROR - Compute Failed\nKey:       _evaluate_atomic-7d4b0a9e-8e03-420c-99d5-e8d513049206\nState:     executing\nTask:  &lt;Task '_evaluate_atomic-7d4b0a9e-8e03-420c-99d5-e8d513049206' apply(...)&gt;\nException: \"Exception('No Conformers')\"\nTraceback: '  File \"/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/dask/utils.py\", line 77, in apply\\n    return func(*args, **kwargs)\\n           ^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/dresio/code/fegrow/fegrow/package.py\", line 1830, in _evaluate_atomic\\n    raise Exception(\"No Conformers\")\\n'\n\nOptimising conformer:  86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 19/22 [00:55&lt;00:11,  3.75s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  67%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       | 14/21 [00:39&lt;00:18,  2.71s/it]\n\nGenerated 25 conformers. \nRemoved 11 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22/22 [01:05&lt;00:00,  2.96s/it]\nOptimising conformer:  80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a    | 12/15 [00:43&lt;00:09,  3.33s/it]\n\nGenerated 11 conformers. \nRemoved 2 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     | 16/21 [00:50&lt;00:19,  3.89s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nGenerated 35 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:31&lt;00:00,  3.96s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [01:16&lt;00:00,  5.11s/it]\nOptimising conformer:   0%|                               | 0/6 [00:00&lt;?, ?it/s]\n\nGenerated 16 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [00:56&lt;00:00,  3.74s/it]\nOptimising conformer:  22%|\u2588\u2588\u2588\u2588\u2588                  | 2/9 [00:12&lt;00:42,  6.12s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  10%|\u2588\u2588                    | 2/21 [00:13&lt;02:07,  6.72s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [01:11&lt;00:00,  3.42s/it]\nOptimising conformer:  33%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b               | 2/6 [00:10&lt;00:19,  4.90s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  29%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e               | 6/21 [00:25&lt;00:51,  3.41s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 14/14 [00:40&lt;00:00,  2.93s/it]\nOptimising conformer:  43%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d            | 9/21 [00:31&lt;00:28,  2.36s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:25&lt;00:00,  4.30s/it]\nOptimising conformer:   0%|                              | 0/28 [00:00&lt;?, ?it/s]\n\nGenerated 31 conformers. \nRemoved 3 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9/9 [00:38&lt;00:00,  4.26s/it]\nOptimising conformer:  11%|\u2588\u2588\u258e                   | 3/28 [00:07&lt;00:56,  2.26s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nGenerated 14 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/19 [00:00&lt;?, ?it/s]\n\nGenerated 22 conformers. \nRemoved 3 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nGenerated 41 conformers. \nRemoved 20 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/4 [00:00&lt;?, ?it/s]\n\nGenerated 20 conformers. \nRemoved 16 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  16%|\u2588\u2588\u2588\u258d                  | 3/19 [00:11&lt;00:59,  3.75s/it]\n\nGenerated 22 conformers. \nRemoved 18 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [01:19&lt;00:00,  3.79s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 14/14 [00:39&lt;00:00,  2.85s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:24&lt;00:00,  6.22s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:17&lt;00:00,  4.33s/it]\n2025-03-14 21:24:32,726 - distributed.worker - ERROR - Compute Failed\nKey:       _evaluate_atomic-63bf20f8-e3eb-43f8-b5fe-c5b816674f3f\nState:     executing\nTask:  &lt;Task '_evaluate_atomic-63bf20f8-e3eb-43f8-b5fe-c5b816674f3f' apply(...)&gt;\nException: \"Exception('No Conformers')\"\nTraceback: '  File \"/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/dask/utils.py\", line 77, in apply\\n    return func(*args, **kwargs)\\n           ^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/dresio/code/fegrow/fegrow/package.py\", line 1830, in _evaluate_atomic\\n    raise Exception(\"No Conformers\")\\n'\n\n\n\nGenerated 19 conformers. \nRemoved 8 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/11 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  38%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d             | 8/21 [00:30&lt;00:44,  3.42s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  48%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           | 10/21 [00:35&lt;00:30,  2.76s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  58%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f        | 11/19 [00:37&lt;00:21,  2.73s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                               | 0/6 [00:00&lt;?, ?it/s]\n\nGenerated 18 conformers. \nRemoved 12 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nGenerated 17 conformers. \nRemoved 8 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  64%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        | 7/11 [00:25&lt;00:13,  3.49s/it]\n\nGenerated 28 conformers. \nRemoved 20 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 19/19 [01:01&lt;00:00,  3.21s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:38&lt;00:00,  3.48s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:32&lt;00:00,  5.44s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [01:15&lt;00:00,  3.58s/it]\nOptimising conformer:  67%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e       | 6/9 [00:39&lt;00:18,  6.13s/it]\n\nGenerated 6 conformers. \nRemoved 1 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:30&lt;00:00,  3.78s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9/9 [00:48&lt;00:00,  5.43s/it]\n2025-03-14 21:25:30,885 - distributed.worker - ERROR - Compute Failed\nKey:       _evaluate_atomic-19a5eda1-ae99-4707-908b-938c0181882e\nState:     executing\nTask:  &lt;Task '_evaluate_atomic-19a5eda1-ae99-4707-908b-938c0181882e' apply(...)&gt;\nException: \"Exception('No Conformers')\"\nTraceback: '  File \"/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/dask/utils.py\", line 77, in apply\\n    return func(*args, **kwargs)\\n           ^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/dresio/code/fegrow/fegrow/package.py\", line 1830, in _evaluate_atomic\\n    raise Exception(\"No Conformers\")\\n'\n\nOptimising conformer:  80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d    | 4/5 [00:09&lt;00:02,  2.03s/it]\n\nGenerated 43 conformers. \nRemoved 29 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:10&lt;00:00,  2.17s/it]\nOptimising conformer:  14%|\u2588\u2588\u2588\u258f                  | 2/14 [00:03&lt;00:20,  1.70s/it]\n\nGenerated 13 conformers. \nRemoved 6 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7/7 [00:22&lt;00:00,  3.26s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 14/14 [00:31&lt;00:00,  2.26s/it]\nOptimising conformer:  64%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c       | 18/28 [02:25&lt;01:06,  6.68s/it]\n\nGenerated 14 conformers. \nRemoved 12 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:07&lt;00:00,  3.55s/it]\n2025-03-14 21:26:19,735 - distributed.worker - ERROR - Compute Failed\nKey:       _evaluate_atomic-08e5b3e7-f8f6-4c50-85b3-6a7e5e04c351\nState:     executing\nTask:  &lt;Task '_evaluate_atomic-08e5b3e7-f8f6-4c50-85b3-6a7e5e04c351' apply(...)&gt;\nException: \"Exception('No Conformers')\"\nTraceback: '  File \"/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/dask/utils.py\", line 77, in apply\\n    return func(*args, **kwargs)\\n           ^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/dresio/code/fegrow/fegrow/package.py\", line 1830, in _evaluate_atomic\\n    raise Exception(\"No Conformers\")\\n'\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 28/28 [02:41&lt;00:00,  5.78s/it]\n\n\nGenerated 15 conformers. \nRemoved 8 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7/7 [00:07&lt;00:00,  1.05s/it]\n</code></pre> <p>Check the scores (in pK units), note that they were updated in the master dataframe too:</p> <pre><code>random1_results\n</code></pre> Smiles Mol score h Training Success enamine_searched enamine_id 2347 [H]c1nc([H])c(C([H])([H])S(=O)(=O)c2c([H])c([H... &lt;fegrow.package.RMol object at 0x7bdc601d3740&gt; 4.204 6 True True False NaN 2184 [H]c1nc([H])c(N(OC([H])([H])c2c([H])c([H])c([H... &lt;fegrow.package.RMol object at 0x7bdd80f25a30&gt; 4.312 6 True True False NaN 1693 [H]c1nc([H])c(N2C([H])([H])C([H])([H])N(N([H])... &lt;fegrow.package.RMol object at 0x7bdc9c6bb2e0&gt; 4.549 6 True True False NaN 1286 [H]c1nc([H])c(SC([H])([H])C([H])([H])c2c([H])c... &lt;fegrow.package.RMol object at 0x7bdd80f26520&gt; 4.408 6 True True False NaN 516 [H]c1nc([H])c(N([H])S(=O)(=O)OC([H])([H])C([H]... &lt;fegrow.package.RMol object at 0x7bdc6053cef0&gt; 0.0 6 True False False NaN 2132 [H]c1nc([H])c(-c2noc(-c3c([H])c([H])c(Cl)c([H]... &lt;fegrow.package.RMol object at 0x7bdc9c1ab560&gt; 0.0 6 True False False NaN 33 [H]c1nc([H])c(C([H])([H])N2C([H])([H])C([H])([... &lt;fegrow.package.RMol object at 0x7bdc60708db0&gt; 4.025 6 True True False NaN 1810 [H]c1nc([H])c(C2([H])C([H])([H])C([H])([H])N(C... &lt;fegrow.package.RMol object at 0x7bdd80f93f10&gt; 4.527 6 True True False NaN 629 [H]c1nc([H])c(C([H])([H])N([H])N([H])C(=O)C([H... &lt;fegrow.package.RMol object at 0x7bdd80faebb0&gt; 3.904 6 True True False NaN 1403 [H]c1nc([H])c(N([H])[C@]([H])(Cl)C([H])([H])[H... &lt;fegrow.package.RMol object at 0x7bdd80fad210&gt; 3.697 6 True True False NaN 493 [H]c1nc([H])c(S(=O)(=O)N([H])N([H])c2c([H])c([... &lt;fegrow.package.RMol object at 0x7bdd80fac3b0&gt; 4.108 6 True True False NaN 771 [H]c1nc([H])c(C([H])([H])C([H])([H])C(C([H])([... &lt;fegrow.package.RMol object at 0x7bdc605985e0&gt; 4.214 6 True True False NaN 1283 [H]c1nc([H])c(SN2C([H])([H])C([H])([H])N(C([H]... &lt;fegrow.package.RMol object at 0x7bdc60211cb0&gt; 3.966 6 True True False NaN 1707 [H]OC(=O)[C@]([H])(c1c([H])nc([H])c([H])c1[H])... &lt;fegrow.package.RMol object at 0x7bdd810f4db0&gt; 0.0 6 True False False NaN 519 [H]c1nc([H])c(N([H])S(=O)(=O)N2C([H])([H])C([H... &lt;fegrow.package.RMol object at 0x7bdc846e79c0&gt; 4.215 6 True True False NaN 2013 [H]C(=Nc1c([H])c([H])nc([H])c1[H])c1c([H])nc([... &lt;fegrow.package.RMol object at 0x7bdd80fafb50&gt; 3.912 6 True True False NaN 160 [H]c1nc([H])c(N([H])C([H])(C([H])([H])[H])C([H... &lt;fegrow.package.RMol object at 0x7bdc60211e40&gt; 3.572 6 True True False NaN 1511 [H]c1nc([H])c(OC(=O)C([H])([H])c2c([H])c([H])c... &lt;fegrow.package.RMol object at 0x7bdd810bc040&gt; 4.466 6 True True False NaN 1623 [H]c1nc([H])c(C([H])([H])OC(=O)c2c([H])c([H])c... &lt;fegrow.package.RMol object at 0x7bdd80f922f0&gt; 4.198 6 True True False NaN 1599 [H]c1nc([H])c(C(=O)OC([H])([H])C([H])([H])N2C(... &lt;fegrow.package.RMol object at 0x7bdc9c6724d0&gt; 4.061 6 True True False NaN 2143 [H]c1nc([H])c(-c2noc(N([H])c3c([H])c([H])c([H]... &lt;fegrow.package.RMol object at 0x7bdd80f628e0&gt; 4.771 6 True True False NaN 2313 [H]c1nc([H])c(C([H])([H])S(=O)(=O)c2c([H])c([H... &lt;fegrow.package.RMol object at 0x7bdd80fec720&gt; 4.107 6 True True False NaN 2141 [H]c1nc([H])c(-c2noc(Oc3c([H])c([H])c([H])c([H... &lt;fegrow.package.RMol object at 0x7bdc601baa70&gt; 4.649 6 True True False NaN 987 [H]c1nc([H])c(C(=O)C([H])([H])N2C([H])([H])C([... &lt;fegrow.package.RMol object at 0x7bdd80fad2b0&gt; 4.271 6 True True False NaN 1331 [H]C(C(=O)C([H])([H])[H])=C([H])c1c([H])nc([H]... &lt;fegrow.package.RMol object at 0x7bdc602138d0&gt; 3.539 6 True True False NaN 1794 [H]c1nc([H])c(N2C([H])([H])C([H])([H])C([H])(S... &lt;fegrow.package.RMol object at 0x7bdc9c5100e0&gt; 4.379 6 True True False NaN 1036 [H]c1nc([H])c(C([H])([H])C(=O)C([H])([H])C([H]... &lt;fegrow.package.RMol object at 0x7bdc2044ce50&gt; 4.195 6 True True False NaN 999 [H]c1nc([H])c(C(=O)C([H])([H])C([H])([H])N2C([... &lt;fegrow.package.RMol object at 0x7bdd80f24bd0&gt; 4.202 6 True True False NaN 1439 [H]c1nc([H])c(N([H])[C@@]([H])(C([H])([H])[H])... &lt;fegrow.package.RMol object at 0x7bdc2044d580&gt; 3.816 6 True True False NaN 1044 [H]c1nc([H])c(C([H])([H])C(=O)S(=O)(=O)C([H])(... &lt;fegrow.package.RMol object at 0x7bdd810ad990&gt; 3.847 6 True True False NaN 1254 [H]c1nc([H])c(SF)c([H])c1[H] &lt;fegrow.package.RMol object at 0x7bdc2044e070&gt; 3.752 6 True True False NaN 1387 [H]c1nc([H])c([C@@]([H])(N([H])N2C([H])([H])C(... &lt;fegrow.package.RMol object at 0x7bdc2044e3e0&gt; 4.476 6 True True False NaN 2379 [H]c1nc([H])c(C(=O)N(N([H])C(=O)C([H])([H])[H]... &lt;fegrow.package.RMol object at 0x7bdc2044e7a0&gt; 4.054 6 True True False NaN 2318 [H]OC([H])([H])S(=O)(=O)C([H])([H])c1c([H])nc(... &lt;fegrow.package.RMol object at 0x7bdd80fff510&gt; 0.0 6 True False False NaN 410 [H]c1nc([H])c(S(=O)(=O)C([H])(C([H])([H])[H])C... &lt;fegrow.package.RMol object at 0x7bdc843264d0&gt; 3.812 6 True True False NaN 877 [H]c1nc([H])c(C([H])([H])C(=O)N([H])C(=O)OC([H... &lt;fegrow.package.RMol object at 0x7bdc9c3ce890&gt; 4.185 6 True True False NaN 2084 [H]c1nc([H])c(-c2nc(OC([H])([H])c3c([H])c([H])... &lt;fegrow.package.RMol object at 0x7bdd80fefc40&gt; 0.0 6 True False False NaN 548 [H]Oc1c([H])c([H])c([H])c(S(=O)(=O)N([H])c2c([... &lt;fegrow.package.RMol object at 0x7bdc9c3cf1f0&gt; 0.0 6 True False False NaN 875 [H]OC(=O)C([H])([H])N([H])C(=O)C([H])([H])c1c(... &lt;fegrow.package.RMol object at 0x7bdc2044f8d0&gt; 3.226 6 True True False NaN 2345 [H]c1nc([H])c(C([H])([H])S(=O)(=O)N2C([H])([H]... &lt;fegrow.package.RMol object at 0x7bdc60120a40&gt; 4.236 6 True True False NaN 133 [H]c1nc([H])c(N([H])C(=O)N2C([H])([H])C([H])([... &lt;fegrow.package.RMol object at 0x7bdc2044ff10&gt; 4.202 6 True True False NaN 2016 [H]C(=NOC([H])([H])C([H])([H])[H])c1c([H])nc([... &lt;fegrow.package.RMol object at 0x7bdc2044f330&gt; 3.267 6 True True False NaN 627 [H]c1nc([H])c(C([H])([H])N([H])C(=O)OC([H])([H... &lt;fegrow.package.RMol object at 0x7bdc2044fe20&gt; 3.571 6 True True False NaN 2033 [H]C(=NN1C([H])([H])C([H])([H])N(C([H])([H])[H... &lt;fegrow.package.RMol object at 0x7bdc20458ae0&gt; 3.41 6 True True False NaN 1975 [H]OC(=O)C([H])([H])C([H])=Nc1c([H])nc([H])c([... &lt;fegrow.package.RMol object at 0x7bdc20458ea0&gt; 3.487 6 True True False NaN 2028 [H]C(=NC([H])([H])C([H])([H])C([H])([H])C([H])... &lt;fegrow.package.RMol object at 0x7bdd810a8bd0&gt; 3.363 6 True True False NaN 2130 [H]c1nc([H])c(-c2noc(N([H])C([H])([H])[H])n2)c... &lt;fegrow.package.RMol object at 0x7bdc2044f9c0&gt; 4.033 6 True True False NaN 1107 [H]OC(=O)C([H])([H])Sc1c([H])nc([H])c([H])c1[H] &lt;fegrow.package.RMol object at 0x7bdc84669c60&gt; 0.0 6 True False False NaN 490 [H]c1nc([H])c(S(=O)(=O)N([H])c2c([H])c([H])c(C... &lt;fegrow.package.RMol object at 0x7bdc2044d760&gt; 5.187 6 True True False NaN 1728 [H]c1nc([H])c([C@]([H])(C([H])([H])[H])C([H])(... &lt;fegrow.package.RMol object at 0x7bdc20459df0&gt; 3.503 6 True True False NaN <p>Note that molecules that have a steric clash with the receptor (and therefore cannot be built) are assigned a score of zero. Occasionally a molecule cannot be built with RDKit or assigned force field parameters, and in these cases the molecule is discarded completely.</p> <pre><code>computed = cs.df[~cs.df.score.isna()]\nprint(\"Computed cases in total: \", len(computed))\n</code></pre> <pre><code>Computed cases in total:  50\n</code></pre>"},{"location":"tutorials/2_active_learning/2_tutorial_active_learning/#active-learning-cycles","title":"Active learning cycles:","text":"<p>In this example we use a Gaussian process model, with a UCB acquisition function</p> <pre><code># The query methods available in modAL.acquisition are made available, these include\n# Query.greedy(),\n# Query.PI(tradeoff=0) - highest probability of improvement\n# Query.EI(tradeoff=0) - highest expected improvement\n# Query.UCB(beta=1) - highest upper confidence bound (employes modAL.models.BayesianOptimizer)\n\n# Models include the scikit:\n# Model.linear()\n# Model.elastic_net()\n# Model.random_forest()\n# Model.gradient_boosting_regressor()\n# Model.mlp_regressor()\n\n# Model.gaussian_process()  # uses a TanimotoKernel by default, meaning that it\n#                           # compares the fingerprints of all the training dataset\n#                           # with the cases not yet studied, which can be expensive\n#                           # computationally\n\ncs.model = Model.gaussian_process()\ncs.query = Query.UCB(beta=1)\n</code></pre> <p>Perform 3 cycles of active learning, with 50 picks per cycle:</p> <pre><code>for cycle in range(3):\n    picks = cs.active_learning(50)\n    picks_results = cs.evaluate(\n        picks, num_conf=50, gnina_gpu=True, penalty=0.0, al_ignore_penalty=False\n    )\n\n    # save the new results\n    picks_results.to_csv(f\"notebook_iteration{cycle}_results.csv\")\n</code></pre> <pre><code>/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/18 [00:00&lt;?, ?it/s]\n\nGenerated 18 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   6%|\u2588\u258f                    | 1/18 [00:03&lt;01:01,  3.62s/it]</p> <pre><code>Generated 38 conformers. \nRemoved 12 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   4%|\u258a                     | 1/26 [00:03&lt;01:28,  3.53s/it]\n\nGenerated 30 conformers. \nRemoved 7 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/23 [00:00&lt;?, ?it/s] Optimising conformer:  17%|\u2588\u2588\u2588\u258b                  | 3/18 [00:08&lt;00:38,  2.60s/it]</p> <pre><code>Generated 30 conformers. \nRemoved 8 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/23 [00:00&lt;?, ?it/s]\n\nGenerated 31 conformers. \nRemoved 8 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:  22%|\u2588\u2588\u2588\u2588\u2589                 | 4/18 [00:10&lt;00:33,  2.39s/it]</p> <pre><code>Generated 44 conformers. \nRemoved 29 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  28%|\u2588\u2588\u2588\u2588\u2588\u2588                | 5/18 [00:13&lt;00:34,  2.62s/it]\n\nGenerated 40 conformers. \nRemoved 13 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/7 [00:00&lt;?, ?it/s]\n\nGenerated 14 conformers. \nRemoved 7 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  23%|\u2588\u2588\u2588\u2588\u2588                 | 5/22 [00:13&lt;00:46,  2.72s/it]\n\nGenerated 19 conformers. \nRemoved 4 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e    | 14/18 [00:38&lt;00:10,  2.66s/it]\n\nGenerated 28 conformers. \nRemoved 17 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:51&lt;00:00,  2.84s/it]\nOptimising conformer:  86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 19/22 [00:47&lt;00:07,  2.46s/it]\n\nGenerated 26 conformers. \nRemoved 16 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7/7 [00:44&lt;00:00,  6.40s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22/22 [00:53&lt;00:00,  2.45s/it]\nOptimising conformer:  73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d     | 11/15 [00:55&lt;00:21,  5.32s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  30%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c               | 3/10 [00:13&lt;00:30,  4.41s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [00:53&lt;00:00,  3.54s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 23/23 [01:13&lt;00:00,  3.18s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [01:17&lt;00:00,  5.15s/it]\nOptimising conformer:  96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 25/26 [01:27&lt;00:02,  2.87s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:54&lt;00:00,  4.94s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 27/27 [01:20&lt;00:00,  2.99s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 23/23 [01:28&lt;00:00,  3.86s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 26/26 [01:36&lt;00:00,  3.72s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c    | 8/10 [00:48&lt;00:11,  5.59s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 9/10 [00:51&lt;00:04,  4.71s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:58&lt;00:00,  5.85s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nGenerated 25 conformers. \nRemoved 8 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  59%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e        | 10/17 [00:22&lt;00:13,  1.91s/it]\n\nGenerated 30 conformers. \nRemoved 5 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/9 [00:00&lt;?, ?it/s]\n\nGenerated 36 conformers. \nRemoved 25 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nGenerated 40 conformers. \nRemoved 31 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [00:34&lt;00:00,  2.03s/it]\nOptimising conformer:  28%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f               | 7/25 [00:15&lt;00:33,  1.89s/it]\n\nGenerated 11 conformers. \nRemoved 5 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  33%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b               | 3/9 [00:12&lt;00:23,  3.87s/it]\n\nGenerated 8 conformers. \nRemoved 6 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  17%|\u2588\u2588\u2588\u258a                   | 1/6 [00:03&lt;00:19,  3.96s/it]\n\nGenerated 32 conformers. \nRemoved 13 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   5%|\u2588\u258f                    | 1/19 [00:04&lt;01:15,  4.21s/it]\n\nGenerated 41 conformers. \nRemoved 27 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  36%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589              | 9/25 [00:25&lt;00:51,  3.20s/it]\n\nGenerated 49 conformers. \nRemoved 38 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:07&lt;00:00,  3.66s/it]\nOptimising conformer:  40%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d            | 10/25 [00:27&lt;00:42,  2.86s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:13&lt;00:00,  2.20s/it]\nOptimising conformer:  14%|\u2588\u2588\u2588\u258f                  | 2/14 [00:09&lt;00:52,  4.33s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 8/9 [00:32&lt;00:03,  3.97s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9/9 [00:36&lt;00:00,  4.04s/it]\nOptimising conformer:   0%|                              | 0/13 [00:00&lt;?, ?it/s]\n\nGenerated 47 conformers. \nRemoved 34 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a    | 20/25 [00:50&lt;00:11,  2.24s/it]\n\nGenerated 24 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/10 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:47&lt;00:00,  4.33s/it]\nOptimising conformer:  57%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c         | 8/14 [00:36&lt;00:27,  4.63s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 25/25 [01:05&lt;00:00,  2.62s/it]\nOptimising conformer:  91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 10/11 [00:50&lt;00:04,  4.35s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:53&lt;00:00,  4.83s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 14/14 [00:54&lt;00:00,  3.92s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 19/19 [01:09&lt;00:00,  3.64s/it]\n\n\nGenerated 22 conformers. \nRemoved 1 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/21 [00:00&lt;?, ?it/s]</p> <pre><code>Generated 10 conformers. \nRemoved 7 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 9/10 [00:41&lt;00:04,  4.49s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  33%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b               | 1/3 [00:04&lt;00:08,  4.31s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:08&lt;00:00,  2.70s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:46&lt;00:00,  4.69s/it]\nOptimising conformer:  14%|\u2588\u2588\u2588\u258f                  | 3/21 [00:08&lt;00:50,  2.81s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/26 [00:00&lt;?, ?it/s]\n\nGenerated 30 conformers. \nRemoved 4 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  33%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e              | 7/21 [00:18&lt;00:32,  2.33s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   4%|\u258a                     | 1/26 [00:04&lt;01:55,  4.62s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [01:06&lt;00:00,  5.08s/it]\nOptimising conformer:   0%|                              | 0/15 [00:00&lt;?, ?it/s]\n\nGenerated 19 conformers. \nRemoved 4 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   7%|\u2588\u258d                    | 1/15 [00:06&lt;01:31,  6.55s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/31 [00:00&lt;?, ?it/s]\n\nGenerated 34 conformers. \nRemoved 3 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  27%|\u2588\u2588\u2588\u2588\u2588\u258a                | 4/15 [00:12&lt;00:26,  2.43s/it]\n\nGenerated 38 conformers. \nRemoved 21 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          | 13/26 [00:32&lt;00:29,  2.26s/it]\n\nGenerated 45 conformers. \nRemoved 18 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [00:51&lt;00:00,  2.45s/it]\nOptimising conformer:   4%|\u258a                     | 1/27 [00:08&lt;03:28,  8.01s/it]\n\nGenerated 8 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f    | 20/26 [00:46&lt;00:11,  1.97s/it]\n\nGenerated 38 conformers. \nRemoved 19 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [00:43&lt;00:00,  2.87s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  22%|\u2588\u2588\u2588\u2588\u2589                 | 6/27 [00:25&lt;01:15,  3.60s/it]\n\nGenerated 29 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 25/26 [00:59&lt;00:02,  2.31s/it]\n\nGenerated 25 conformers. \nRemoved 4 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 26/26 [01:02&lt;00:00,  2.40s/it]\nOptimising conformer:  32%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589               | 6/19 [00:17&lt;00:39,  3.03s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:29&lt;00:00,  3.71s/it]\nOptimising conformer:  19%|\u2588\u2588\u2588\u2588\u258f                 | 4/21 [00:12&lt;00:48,  2.83s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  42%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e            | 8/19 [00:26&lt;00:34,  3.15s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                               | 0/4 [00:00&lt;?, ?it/s]\n\nGenerated 33 conformers. \nRemoved 29 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 19/19 [01:02&lt;00:00,  3.31s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [00:58&lt;00:00,  2.77s/it]\nOptimising conformer:  89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 24/27 [01:25&lt;00:09,  3.01s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 19/19 [01:00&lt;00:00,  3.18s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 31/31 [01:46&lt;00:00,  3.45s/it]\nOptimising conformer:  93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 25/27 [01:28&lt;00:06,  3.18s/it]\n\nGenerated 38 conformers. \nRemoved 32 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:30&lt;00:00,  7.52s/it]\nOptimising conformer:  96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 26/27 [01:38&lt;00:05,  5.04s/it]\n\nGenerated 29 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 27/27 [01:40&lt;00:00,  3.73s/it]\nOptimising conformer:  17%|\u2588\u2588\u2588\u258a                   | 1/6 [00:12&lt;01:01, 12.40s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   5%|\u2588\u258f                    | 1/19 [00:04&lt;01:18,  4.33s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/13 [00:00&lt;?, ?it/s]\n\nGenerated 41 conformers. \nRemoved 28 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c           | 3/6 [00:21&lt;00:19,  6.45s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   8%|\u2588\u258b                    | 1/13 [00:05&lt;01:11,  5.96s/it]\n\nGenerated 44 conformers. \nRemoved 39 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:19&lt;00:00,  3.82s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:46&lt;00:00,  7.74s/it]\nOptimising conformer:  79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c    | 15/19 [00:42&lt;00:10,  2.66s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f      | 9/13 [00:37&lt;00:16,  4.10s/it]\n\nGenerated 23 conformers. \nRemoved 16 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/7 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 16/19 [00:46&lt;00:09,  3.09s/it]\n\nGenerated 41 conformers. \nRemoved 7 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f    | 10/13 [00:41&lt;00:12,  4.03s/it]\n\nGenerated 43 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 19/19 [00:53&lt;00:00,  2.84s/it]\nOptimising conformer:  92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 12/13 [00:48&lt;00:03,  3.73s/it]\n\nGenerated 35 conformers. \nRemoved 15 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [00:51&lt;00:00,  3.94s/it]\nOptimising conformer:  18%|\u2588\u2588\u2588\u2589                  | 6/34 [00:17&lt;01:10,  2.50s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  24%|\u2588\u2588\u2588\u2588\u2588\u258f                | 8/34 [00:21&lt;00:59,  2.29s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 16/17 [03:06&lt;00:12, 12.87s/it]\n\nGenerated 47 conformers. \nRemoved 30 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [03:12&lt;00:00, 11.30s/it]\nOptimising conformer:   0%|                              | 0/18 [00:00&lt;?, ?it/s]\n\nGenerated 41 conformers. \nRemoved 23 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7/7 [00:42&lt;00:00,  6.05s/it]\nOptimising conformer:   0%|                              | 0/21 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nGenerated 35 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/15 [00:00&lt;?, ?it/s]\n\nGenerated 19 conformers. \nRemoved 4 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [00:48&lt;00:00,  2.45s/it]\nOptimising conformer:  39%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c             | 7/18 [00:26&lt;00:37,  3.37s/it]\n\nGenerated 30 conformers. \nRemoved 7 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   9%|\u2588\u2589                    | 2/23 [00:11&lt;02:12,  6.32s/it]\n\nGenerated 31 conformers. \nRemoved 13 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 34/34 [01:24&lt;00:00,  2.50s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [00:43&lt;00:00,  2.90s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [01:10&lt;00:00,  3.94s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [01:20&lt;00:00,  4.72s/it]\nOptimising conformer:  56%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b         | 10/18 [00:35&lt;00:23,  2.91s/it]\n\nGenerated 40 conformers. \nRemoved 16 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 23/23 [00:56&lt;00:00,  2.45s/it]\nOptimising conformer:  12%|\u2588\u2588\u258a                   | 3/24 [00:11&lt;01:13,  3.50s/it]\n\nGenerated 20 conformers. \nRemoved 11 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [01:20&lt;00:00,  3.81s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 33/33 [02:12&lt;00:00,  4.00s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9/9 [00:17&lt;00:00,  1.94s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [01:06&lt;00:00,  3.72s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 24/24 [00:53&lt;00:00,  2.24s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nGenerated 18 conformers. \nRemoved 1 conformers. \nUsing force field\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [00:12&lt;00:00,  1.37it/s]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nGenerated 19 conformers. \nRemoved 1 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/18 [00:00&lt;?, ?it/s]</p> <pre><code>Generated 18 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/18 [00:00&lt;?, ?it/s]</p> <pre><code>Generated 16 conformers. \nRemoved 1 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/25 [00:00&lt;?, ?it/s]\n\nGenerated 40 conformers. \nRemoved 15 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/20 [00:00&lt;?, ?it/s]\n\nGenerated 23 conformers. \nRemoved 3 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  47%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e           | 7/15 [00:16&lt;00:17,  2.19s/it]\n\nGenerated 16 conformers. \nRemoved 8 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/17 [00:00&lt;?, ?it/s]\n\nGenerated 40 conformers. \nRemoved 23 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/17 [00:00&lt;?, ?it/s]\n\nGenerated 27 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 13/15 [00:32&lt;00:05,  2.54s/it]\n\nGenerated 37 conformers. \nRemoved 36 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [00:36&lt;00:00,  2.45s/it]\nOptimising conformer:  61%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a        | 11/18 [00:43&lt;00:25,  3.71s/it]\n\nGenerated 15 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:11&lt;00:00, 11.35s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:49&lt;00:00,  2.74s/it]\nOptimising conformer:   0%|                               | 0/4 [00:00&lt;?, ?it/s]\n\nGenerated 38 conformers. \nRemoved 34 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 15/18 [00:58&lt;00:11,  3.67s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e     | 6/8 [00:42&lt;00:14,  7.25s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:56&lt;00:00,  7.06s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [01:18&lt;00:00,  4.37s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [01:14&lt;00:00,  3.71s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [00:55&lt;00:00,  3.29s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [00:46&lt;00:00,  3.07s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 25/25 [01:19&lt;00:00,  3.17s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:53&lt;00:00, 13.31s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  65%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c       | 11/17 [01:28&lt;00:38,  6.43s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a      | 12/17 [01:31&lt;00:26,  5.32s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     | 13/17 [01:33&lt;00:16,  4.19s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 15/17 [01:36&lt;00:05,  2.84s/it]\n\nGenerated 36 conformers. \nRemoved 24 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/12 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.       coords = np.asanyarray(value, dtype=np.float64)</p> <pre><code>Generated 16 conformers. \nRemoved 8 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 16/17 [01:39&lt;00:02,  2.80s/it]\n\nGenerated 46 conformers. \nRemoved 25 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/21 [00:00&lt;?, ?it/s]</p> <pre><code>Generated 46 conformers. \nRemoved 31 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [01:40&lt;00:00,  5.94s/it]\nOptimising conformer:  10%|\u2588\u2588                    | 2/21 [00:09&lt;01:26,  4.53s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 10/12 [00:31&lt;00:05,  2.52s/it]\n\nGenerated 27 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 12/12 [00:36&lt;00:00,  3.04s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:37&lt;00:00,  4.65s/it]\nOptimising conformer:  52%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          | 11/21 [00:44&lt;00:45,  4.53s/it]\n\nGenerated 29 conformers. \nRemoved 23 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/6 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  57%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         | 12/21 [00:48&lt;00:37,  4.15s/it]\n\nGenerated 50 conformers. \nRemoved 28 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  17%|\u2588\u2588\u2588\u258a                   | 1/6 [00:09&lt;00:48,  9.61s/it]\n\nGenerated 32 conformers. \nRemoved 25 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/17 [00:00&lt;?, ?it/s]\n\nGenerated 38 conformers. \nRemoved 21 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  14%|\u2588\u2588\u2588                   | 3/22 [00:18&lt;01:35,  5.02s/it]\n\nGenerated 24 conformers. \nRemoved 9 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [01:10&lt;00:00,  4.70s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [00:48&lt;00:00,  2.85s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [01:21&lt;00:00,  3.88s/it]\n\n\nGenerated 43 conformers. \nRemoved 18 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 6/7 [00:31&lt;00:04,  4.85s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/24 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nGenerated 36 conformers. \nRemoved 12 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7/7 [00:35&lt;00:00,  5.02s/it]\nOptimising conformer:  33%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e              | 5/15 [00:22&lt;00:47,  4.73s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  17%|\u2588\u2588\u2588\u258b                  | 4/24 [00:16&lt;01:23,  4.17s/it]\n\nGenerated 37 conformers. \nRemoved 16 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  53%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b          | 8/15 [00:36&lt;00:36,  5.16s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/16 [00:00&lt;?, ?it/s]\n\nGenerated 16 conformers. \nRemoved 0 conformers. \nUsing force field\n\n\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          | 11/22 [01:03&lt;00:54,  4.98s/it]\n\nGenerated 14 conformers. \nRemoved 0 conformers. \nUsing force field\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:13&lt;00:00,  1.22it/s]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 14/14 [00:10&lt;00:00,  1.39it/s]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [01:04&lt;00:00,  4.28s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          | 12/24 [00:50&lt;00:50,  4.20s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  68%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e      | 15/22 [01:36&lt;00:49,  7.12s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  64%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d       | 16/25 [01:18&lt;00:31,  3.50s/it]\n\nGenerated 28 conformers. \nRemoved 12 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/23 [00:00&lt;?, ?it/s]\n\nGenerated 41 conformers. \nRemoved 18 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [01:04&lt;00:00,  3.09s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 24/24 [01:24&lt;00:00,  3.52s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22/22 [02:04&lt;00:00,  5.68s/it]\nOptimising conformer:  26%|\u2588\u2588\u2588\u2588\u2588\u258b                | 6/23 [00:15&lt;00:38,  2.24s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  30%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b               | 7/23 [00:17&lt;00:34,  2.13s/it]2025-03-14 21:43:14,213 - distributed.worker - ERROR - Compute Failed\nKey:       _evaluate_atomic-755b3c3f-4940-4b87-a749-caf607e74788\nState:     executing\nTask:  &lt;Task '_evaluate_atomic-755b3c3f-4940-4b87-a749-caf607e74788' apply(...)&gt;\nException: \"Exception('No Conformers')\"\nTraceback: '  File \"/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/dask/utils.py\", line 77, in apply\\n    return func(*args, **kwargs)\\n           ^^^^^^^^^^^^^^^^^^^^^\\n  File \"/home/dresio/code/fegrow/fegrow/package.py\", line 1830, in _evaluate_atomic\\n    raise Exception(\"No Conformers\")\\n'\n\nOptimising conformer:  84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 21/25 [01:51&lt;00:29,  7.29s/it]\n\nGenerated 40 conformers. \nRemoved 30 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/10 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  57%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a         | 13/23 [00:45&lt;00:47,  4.71s/it]\n\nGenerated 41 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a     | 12/16 [00:55&lt;00:15,  3.89s/it]\n\nGenerated 33 conformers. \nRemoved 11 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 25/25 [02:21&lt;00:00,  5.64s/it]\nOptimising conformer:  94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 15/16 [01:09&lt;00:04,  4.08s/it]\n\nGenerated 33 conformers. \nRemoved 23 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [01:12&lt;00:00,  4.54s/it]\nOptimising conformer:  90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 9/10 [00:42&lt;00:04,  4.64s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nGenerated 35 conformers. \nRemoved 28 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:45&lt;00:00,  4.52s/it]\nOptimising conformer:  41%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c            | 11/27 [00:30&lt;00:41,  2.58s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  14%|\u2588\u2588\u2588\u258e                   | 1/7 [00:07&lt;00:46,  7.83s/it]\n\nGenerated 29 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/16 [00:00&lt;?, ?it/s]\n\nGenerated 36 conformers. \nRemoved 36 conformers. \nWarning: no conformers so cannot optimise_in_receptor. Ignoring.\nGenerated 25 conformers. \nRemoved 9 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 23/23 [01:27&lt;00:00,  3.82s/it]\nOptimising conformer:  63%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f       | 17/27 [00:42&lt;00:21,  2.11s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [03:33&lt;00:00, 35.58s/it]\nOptimising conformer:  21%|\u2588\u2588\u2588\u2588\u258b                 | 4/19 [00:17&lt;01:02,  4.18s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  31%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589               | 5/16 [00:19&lt;00:44,  4.07s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:44&lt;00:00,  4.48s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7/7 [00:39&lt;00:00,  5.60s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 27/27 [01:06&lt;00:00,  2.46s/it]\nOptimising conformer:  68%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e      | 13/19 [00:41&lt;00:14,  2.39s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d      | 11/16 [00:40&lt;00:16,  3.31s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c    | 15/19 [00:48&lt;00:11,  2.88s/it]\n\nGenerated 33 conformers. \nRemoved 13 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/20 [00:00&lt;?, ?it/s] Optimising conformer:  29%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d               | 5/17 [03:55&lt;04:24, 22.07s/it]</p> <pre><code>Generated 15 conformers. \nRemoved 9 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/6 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22/22 [01:21&lt;00:00,  3.70s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:51&lt;00:00,  3.24s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 19/19 [01:01&lt;00:00,  3.24s/it]\n\n\nGenerated 42 conformers. \nRemoved 3 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/39 [00:00&lt;?, ?it/s]</p> <pre><code>Generated 20 conformers. \nRemoved 1 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c           | 3/6 [00:14&lt;00:14,  4.79s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  15%|\u2588\u2588\u2588\u258e                  | 3/20 [00:17&lt;01:22,  4.86s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:24&lt;00:00,  4.13s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [04:28&lt;00:00, 15.81s/it]\nOptimising conformer:  35%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b              | 7/20 [00:33&lt;00:55,  4.29s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  53%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          | 10/19 [00:22&lt;00:18,  2.10s/it]\n\nGenerated 43 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  68%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e      | 13/19 [00:29&lt;00:13,  2.23s/it]\n\nGenerated 48 conformers. \nRemoved 26 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   9%|\u2588\u2588                    | 3/33 [00:10&lt;01:34,  3.14s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/25 [00:00&lt;?, ?it/s]\n\nGenerated 30 conformers. \nRemoved 5 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 19/19 [00:44&lt;00:00,  2.33s/it]\nOptimising conformer:   0%|                              | 0/15 [00:00&lt;?, ?it/s]\n\nGenerated 50 conformers. \nRemoved 35 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c     | 29/39 [01:12&lt;00:21,  2.13s/it]\n\nGenerated 45 conformers. \nRemoved 37 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          | 11/22 [00:46&lt;00:44,  4.00s/it]\n\nGenerated 28 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [01:32&lt;00:00,  4.64s/it]\nOptimising conformer:  64%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e       | 21/33 [00:59&lt;00:26,  2.18s/it]\n\nGenerated 31 conformers. \nRemoved 23 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/27 [00:00&lt;?, ?it/s]\n\nGenerated 30 conformers. \nRemoved 3 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 39/39 [01:39&lt;00:00,  2.55s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 25/25 [00:58&lt;00:00,  2.36s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22/22 [01:25&lt;00:00,  3.87s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 33/33 [01:31&lt;00:00,  2.76s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:44&lt;00:00,  5.56s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [01:04&lt;00:00,  4.28s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:46&lt;00:00,  5.83s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:56&lt;00:00,  3.16s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 27/27 [00:50&lt;00:00,  1.86s/it]\n\n\nGenerated 47 conformers. \nRemoved 31 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:33&lt;00:00,  2.11s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nGenerated 19 conformers. \nRemoved 6 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   8%|\u2588\u258b                    | 1/13 [00:03&lt;00:42,  3.52s/it]\n\nGenerated 25 conformers. \nRemoved 6 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/14 [00:00&lt;?, ?it/s]\n\nGenerated 20 conformers. \nRemoved 6 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nGenerated 18 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   5%|\u2588\u258f                    | 1/19 [00:07&lt;02:21,  7.88s/it]\n\nGenerated 47 conformers. \nRemoved 9 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  54%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a          | 7/13 [00:16&lt;00:15,  2.59s/it]\n\nGenerated 32 conformers. \nRemoved 2 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:15&lt;00:00,  3.79s/it]\nOptimising conformer:   0%|                              | 0/27 [00:00&lt;?, ?it/s]\n\nGenerated 40 conformers. \nRemoved 13 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                               | 0/6 [00:00&lt;?, ?it/s] Optimising conformer:  92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 12/13 [00:27&lt;00:02,  2.34s/it]</p> <pre><code>Generated 15 conformers. \nRemoved 9 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [00:31&lt;00:00,  2.43s/it]\nOptimising conformer:  10%|\u2588\u2588\u258f                   | 3/30 [00:15&lt;02:22,  5.27s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/13 [00:00&lt;?, ?it/s]\n\nGenerated 27 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      | 10/14 [00:31&lt;00:13,  3.36s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  15%|\u2588\u2588\u2588\u258d                  | 2/13 [00:08&lt;00:44,  4.07s/it]\n\nGenerated 22 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 14/14 [00:41&lt;00:00,  2.99s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:25&lt;00:00,  4.17s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 19/19 [00:50&lt;00:00,  2.66s/it]\nOptimising conformer:  62%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c        | 8/13 [00:25&lt;00:12,  2.47s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  40%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d            | 12/30 [00:44&lt;00:51,  2.87s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  39%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e            | 15/38 [00:49&lt;01:18,  3.39s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                               | 0/6 [00:00&lt;?, ?it/s]\n\nGenerated 6 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [00:40&lt;00:00,  3.08s/it]\nOptimising conformer:  63%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e       | 24/38 [01:09&lt;00:31,  2.25s/it]\n\nGenerated 25 conformers. \nRemoved 9 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:38&lt;00:00,  4.81s/it]\nOptimising conformer:  66%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a       | 25/38 [01:13&lt;00:35,  2.72s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:21&lt;00:00,  3.50s/it]\nOptimising conformer:  73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d     | 22/30 [01:16&lt;00:20,  2.57s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                               | 0/4 [00:00&lt;?, ?it/s]\n\nGenerated 4 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    | 22/27 [01:17&lt;00:16,  3.21s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:15&lt;00:00,  3.81s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 27/27 [01:27&lt;00:00,  3.26s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 30/30 [01:40&lt;00:00,  3.34s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 38/38 [01:46&lt;00:00,  2.82s/it]\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           | 8/16 [00:40&lt;00:34,  4.28s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  56%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d         | 9/16 [00:47&lt;00:35,  5.04s/it]\n\nGenerated 4 conformers. \nRemoved 1 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d      | 11/16 [00:58&lt;00:27,  5.53s/it]\n\nGenerated 29 conformers. \nRemoved 17 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:12&lt;00:00,  4.06s/it]\nOptimising conformer:  75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a     | 12/16 [01:08&lt;00:27,  6.86s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    | 13/16 [01:11&lt;00:16,  5.61s/it]\n\nGenerated 45 conformers. \nRemoved 28 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:  25%|\u2588\u2588\u2588\u2588\u2588\u258c                | 3/12 [00:12&lt;00:35,  3.99s/it]</p> <pre><code>Generated 4 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [01:23&lt;00:00,  5.24s/it]\nOptimising conformer:  75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e     | 3/4 [00:10&lt;00:03,  3.14s/it]\n\nGenerated 43 conformers. \nRemoved 31 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  58%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a         | 7/12 [00:27&lt;00:16,  3.35s/it]\n\nGenerated 15 conformers. \nRemoved 4 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:14&lt;00:00,  3.61s/it]\nOptimising conformer:  75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c     | 9/12 [00:31&lt;00:08,  2.74s/it]\n\nGenerated 16 conformers. \nRemoved 6 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/10 [00:00&lt;?, ?it/s]\n\nGenerated 24 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/22 [00:00&lt;?, ?it/s]\n\nGenerated 31 conformers. \nRemoved 9 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  18%|\u2588\u2588\u2588\u2588                  | 2/11 [00:10&lt;00:44,  4.96s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 12/12 [00:41&lt;00:00,  3.45s/it]\nOptimising conformer:  36%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588              | 4/11 [00:17&lt;00:29,  4.23s/it]\n\nGenerated 37 conformers. \nRemoved 25 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  18%|\u2588\u2588\u2588\u2588                  | 4/22 [00:15&lt;01:16,  4.26s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:32&lt;00:00,  3.27s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:36&lt;00:00,  3.70s/it]\nOptimising conformer:  42%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f            | 5/12 [00:27&lt;00:35,  5.00s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  55%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d         | 12/22 [00:41&lt;00:35,  3.58s/it]\n\nGenerated 20 conformers. \nRemoved 15 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           | 6/12 [00:31&lt;00:27,  4.62s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:51&lt;00:00,  4.72s/it]\nOptimising conformer:   0%|                              | 0/17 [00:00&lt;?, ?it/s]\n\nGenerated 24 conformers. \nRemoved 7 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  68%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e      | 15/22 [00:53&lt;00:26,  3.72s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/16 [00:00&lt;?, ?it/s]\n\nGenerated 38 conformers. \nRemoved 22 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 19/22 [01:09&lt;00:11,  3.87s/it]\n\nGenerated 8 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 10/12 [01:01&lt;00:13,  6.69s/it]\n\nGenerated 23 conformers. \nRemoved 12 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:38&lt;00:00,  7.62s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22/22 [01:22&lt;00:00,  3.76s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 12/12 [01:14&lt;00:00,  6.19s/it]\nOptimising conformer:  88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 7/8 [00:18&lt;00:02,  2.18s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:21&lt;00:00,  2.71s/it]\n\n\nGenerated 16 conformers. \nRemoved 13 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/3 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/11 [00:00&lt;?, ?it/s]\n\nGenerated 22 conformers. \nRemoved 11 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  31%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589               | 5/16 [00:37&lt;01:17,  7.00s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:10&lt;00:00,  3.63s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  45%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588            | 5/11 [00:15&lt;00:16,  2.80s/it]\n\nGenerated 17 conformers. \nRemoved 4 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  55%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          | 6/11 [00:17&lt;00:13,  2.63s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:43&lt;00:00,  3.94s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:29&lt;00:00,  2.69s/it]\nOptimising conformer:  88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 15/17 [02:32&lt;00:12,  6.15s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 16/17 [01:26&lt;00:05,  5.58s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [01:29&lt;00:00,  5.28s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [02:42&lt;00:00,  9.55s/it]\nOptimising conformer:  81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    | 13/16 [01:24&lt;00:16,  5.37s/it]\n\nGenerated 24 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f    | 10/13 [00:34&lt;00:07,  2.60s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  10%|\u2588\u2588\u258f                   | 1/10 [00:04&lt;00:39,  4.41s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 11/13 [00:40&lt;00:07,  3.77s/it]\n\nGenerated 25 conformers. \nRemoved 8 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 15/16 [01:32&lt;00:04,  4.67s/it]\n\nGenerated 42 conformers. \nRemoved 12 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [01:38&lt;00:00,  6.14s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [00:50&lt;00:00,  3.89s/it]\nOptimising conformer:  80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c    | 8/10 [00:24&lt;00:06,  3.04s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  20%|\u2588\u2588\u2588\u2588\u258d                 | 6/30 [00:17&lt;01:10,  2.93s/it]\n\nGenerated 25 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/15 [00:00&lt;?, ?it/s]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:34&lt;00:00,  3.43s/it]\n\n\nGenerated 39 conformers. \nRemoved 9 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/4 [00:00&lt;?, ?it/s]\n\nGenerated 18 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  37%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b             | 11/30 [00:32&lt;00:59,  3.15s/it]\n\nGenerated 4 conformers. \nRemoved 1 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  53%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b          | 9/17 [00:36&lt;00:30,  3.77s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/16 [00:00&lt;?, ?it/s]\n\nGenerated 20 conformers. \nRemoved 4 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:16&lt;00:00,  4.15s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:15&lt;00:00,  5.06s/it]\nOptimising conformer:  63%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e       | 19/30 [00:54&lt;00:29,  2.65s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b      | 21/30 [00:59&lt;00:22,  2.47s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  56%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d         | 9/16 [00:28&lt;00:19,  2.80s/it]\n\nGenerated 46 conformers. \nRemoved 26 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  40%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d            | 12/30 [00:40&lt;00:58,  3.25s/it]\n\nGenerated 30 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [01:18&lt;00:00,  4.60s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [01:03&lt;00:00,  4.25s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 30/30 [01:27&lt;00:00,  2.91s/it]\nOptimising conformer:  25%|\u2588\u2588\u2588\u2588\u2588\u258c                | 4/16 [00:18&lt;00:50,  4.24s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:50&lt;00:00,  3.13s/it]\nOptimising conformer:  67%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       | 20/30 [01:02&lt;00:22,  2.25s/it]\n\nGenerated 28 conformers. \nRemoved 22 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b      | 21/30 [01:04&lt;00:19,  2.21s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          | 10/20 [00:29&lt;00:31,  3.15s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a    | 24/30 [01:12&lt;00:14,  2.37s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 30/30 [01:26&lt;00:00,  2.89s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [00:55&lt;00:00,  2.80s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:33&lt;00:00,  5.53s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:56&lt;00:00,  3.53s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  58%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a         | 7/12 [04:55&lt;01:21, 16.28s/it]\n\nGenerated 23 conformers. \nRemoved 12 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/16 [00:00&lt;?, ?it/s]\n\nGenerated 30 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:  18%|\u2588\u2588\u2588\u2588                  | 2/11 [00:05&lt;00:22,  2.49s/it] Optimising conformer:   0%|                              | 0/13 [00:00&lt;?, ?it/s]</p> <pre><code>Generated 33 conformers. \nRemoved 20 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/12 [00:00&lt;?, ?it/s]\n\nGenerated 18 conformers. \nRemoved 6 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:26&lt;00:00,  2.44s/it]\nOptimising conformer:   0%|                              | 0/11 [00:00&lt;?, ?it/s]\n\nGenerated 22 conformers. \nRemoved 11 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nGenerated 29 conformers. \nRemoved 11 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/20 [00:00&lt;?, ?it/s]\n\nGenerated 46 conformers. \nRemoved 26 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [00:28&lt;00:00,  2.20s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 12/12 [05:34&lt;00:00, 27.90s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:20&lt;00:00,  1.82s/it]\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           | 6/12 [00:30&lt;00:28,  4.77s/it]\n\nGenerated 45 conformers. \nRemoved 18 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:51&lt;00:00,  3.24s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:41&lt;00:00,  2.30s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 12/12 [00:49&lt;00:00,  4.13s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [00:41&lt;00:00,  2.07s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 27/27 [00:56&lt;00:00,  2.09s/it]\n</code></pre> <p>The chemical space has been updated with the scores of the built molecules. Also shown are the latest predicted scores given by the regression model.</p> <pre><code># show chemical space\ncs\n</code></pre> Smiles score h Training Success enamine_searched enamine_id regression 2D 0 [H]OC([H])([H])c1c([H])nc([H])c([H])c1[H] &lt;NA&gt; 6 False NaN False NaN 3.040 1 [H]c1nc([H])c(C([H])([H])OC([H])([H])[H])c([H]... &lt;NA&gt; 6 False NaN False NaN 3.850 2 [H]c1nc([H])c(C([H])([H])N([H])[H])c([H])c1[H] &lt;NA&gt; 6 False NaN False NaN 3.426 3 [H]c1nc([H])c(C([H])([H])Cl)c([H])c1[H] &lt;NA&gt; 6 False NaN False NaN 3.378 4 [H]c1nc([H])c(C([H])([H])F)c([H])c1[H] &lt;NA&gt; 6 False NaN False NaN 3.723 ... ... ... ... ... ... ... ... ... ... 2495 [H]c1nc([H])c(-c2c([H])c([H])c([H])c([H])c2N2C... &lt;NA&gt; 6 False NaN False NaN 3.153 2496 [H]c1nc([H])c(-c2c([H])c([H])c([H])c([H])c2N2C... &lt;NA&gt; 6 False NaN False NaN 3.176 2497 [H]c1nc([H])c(-c2c([H])c([H])c([H])c([H])c2-c2... &lt;NA&gt; 6 False NaN False NaN 3.135 2498 [H]Oc1c([H])c([H])c([H])c(-c2c([H])c([H])c([H]... &lt;NA&gt; 6 False NaN False NaN 1.976 2499 [H]c1nc([H])c(-c2c([H])c([H])c([H])c([H])c2C([... &lt;NA&gt; 6 False NaN False NaN 3.096 <p>2500 rows \u00d7 9 columns</p> <p>If we like, we can finish with a greedy selection (ie picking the best binders as predicted by the regression model):</p> <pre><code>cs.model = Model.gaussian_process()\ncs.query = Query.Greedy()\n\npicks = cs.active_learning(50)\npicks_results = cs.evaluate(\n    picks, num_conf=50, gnina_gpu=True, penalty=0.0, al_ignore_penalty=False\n)\n\n# save the new results\npicks_results.to_csv(\"notebook_greedy_results.csv\")\n</code></pre> <pre><code>/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n\n\nGenerated 18 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   6%|\u2588\u258f                    | 1/18 [00:03&lt;01:07,  3.96s/it]\n\nGenerated 23 conformers. \nRemoved 7 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  22%|\u2588\u2588\u2588\u2588\u2589                 | 4/18 [00:11&lt;00:40,  2.87s/it]\n\nGenerated 15 conformers. \nRemoved 11 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c           | 2/4 [00:08&lt;00:08,  4.04s/it]\n\nGenerated 28 conformers. \nRemoved 12 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  44%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a            | 8/18 [00:22&lt;00:27,  2.80s/it]\n\nGenerated 29 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  19%|\u2588\u2588\u2588\u2588\u258f                 | 3/16 [00:19&lt;01:20,  6.22s/it]\n\nGenerated 41 conformers. \nRemoved 22 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nGenerated 22 conformers. \nRemoved 18 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:14&lt;00:00,  3.72s/it]\nOptimising conformer:  25%|\u2588\u2588\u2588\u2588\u2588\u258c                | 4/16 [00:29&lt;01:31,  7.62s/it]\n\nGenerated 33 conformers. \nRemoved 20 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  16%|\u2588\u2588\u2588\u258d                  | 3/19 [00:11&lt;00:58,  3.65s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  15%|\u2588\u2588\u2588\u258d                  | 2/13 [00:13&lt;01:15,  6.90s/it]\n\nGenerated 40 conformers. \nRemoved 18 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:23&lt;00:00,  5.81s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [00:51&lt;00:00,  2.86s/it]\nOptimising conformer:  63%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e       | 12/19 [00:36&lt;00:22,  3.18s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  53%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          | 10/19 [00:37&lt;00:31,  3.46s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           | 8/16 [01:02&lt;01:03,  7.92s/it]\n\nGenerated 48 conformers. \nRemoved 39 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [01:01&lt;00:00,  3.82s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 19/19 [01:00&lt;00:00,  3.17s/it]\nOptimising conformer:  85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 11/13 [00:51&lt;00:07,  3.77s/it]\n\nGenerated 42 conformers. \nRemoved 21 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  55%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d         | 12/22 [00:43&lt;00:41,  4.20s/it]\n\nGenerated 24 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 12/13 [00:58&lt;00:04,  4.70s/it]\n\nGenerated 38 conformers. \nRemoved 29 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 19/19 [01:08&lt;00:00,  3.59s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  59%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d        | 13/22 [00:46&lt;00:34,  3.79s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [01:02&lt;00:00,  4.77s/it]\nOptimising conformer:  89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 8/9 [00:36&lt;00:03,  3.97s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9/9 [00:40&lt;00:00,  4.54s/it]\nOptimising conformer:  19%|\u2588\u2588\u2588\u2588\u258f                 | 4/21 [00:27&lt;01:40,  5.93s/it]\n\nGenerated 19 conformers. \nRemoved 6 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  44%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f            | 4/9 [00:23&lt;00:25,  5.15s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22/22 [01:17&lt;00:00,  3.54s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [02:00&lt;00:00,  7.56s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:34&lt;00:00,  3.44s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9/9 [00:39&lt;00:00,  4.44s/it]\n\n\nGenerated 45 conformers. \nRemoved 28 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  52%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          | 11/21 [00:48&lt;00:36,  3.69s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  57%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         | 12/21 [00:50&lt;00:30,  3.37s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  62%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        | 13/21 [00:53&lt;00:24,  3.07s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  54%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a          | 7/13 [00:28&lt;00:21,  3.58s/it]\n\nGenerated 26 conformers. \nRemoved 6 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  18%|\u2588\u2588\u2588\u2589                  | 3/17 [00:10&lt;00:45,  3.22s/it]\n\nGenerated 16 conformers. \nRemoved 2 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  62%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c        | 8/13 [00:32&lt;00:18,  3.67s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/16 [00:00&lt;?, ?it/s]\n\nGenerated 18 conformers. \nRemoved 2 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13/13 [00:49&lt;00:00,  3.83s/it]\nOptimising conformer:  53%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b          | 9/17 [00:34&lt;00:27,  3.46s/it]\n\nGenerated 19 conformers. \nRemoved 3 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [01:26&lt;00:00,  4.13s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 14/14 [00:34&lt;00:00,  2.43s/it]\nOptimising conformer:  55%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c         | 11/20 [00:36&lt;00:28,  3.15s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  31%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589               | 5/16 [00:15&lt;00:33,  3.01s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/10 [00:00&lt;?, ?it/s]\n\nGenerated 14 conformers. \nRemoved 4 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a     | 15/20 [00:47&lt;00:14,  2.81s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/16 [00:00&lt;?, ?it/s]\n\nGenerated 24 conformers. \nRemoved 8 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:50&lt;00:00,  3.15s/it]\nOptimising conformer:  75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a     | 12/16 [00:34&lt;00:12,  3.12s/it]\n\nGenerated 34 conformers. \nRemoved 22 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [01:10&lt;00:00,  4.17s/it]\nOptimising conformer:  81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    | 13/16 [00:37&lt;00:09,  3.17s/it]\n\nGenerated 43 conformers. \nRemoved 29 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [01:06&lt;00:00,  3.30s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 15/16 [00:46&lt;00:03,  3.82s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   7%|\u2588\u258c                    | 1/14 [00:11&lt;02:25, 11.18s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:50&lt;00:00,  3.13s/it]\nOptimising conformer:  56%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d         | 9/16 [00:39&lt;00:26,  3.83s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d      | 11/16 [00:44&lt;00:16,  3.32s/it]\n\nGenerated 18 conformers. \nRemoved 12 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    | 13/16 [00:53&lt;00:11,  3.87s/it]\n\nGenerated 29 conformers. \nRemoved 18 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c           | 3/6 [00:12&lt;00:12,  4.00s/it]\n\nGenerated 22 conformers. \nRemoved 11 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [01:03&lt;00:00,  3.98s/it]\nOptimising conformer:   0%|                              | 0/22 [00:00&lt;?, ?it/s]\n\nGenerated 29 conformers. \nRemoved 7 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:  71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      | 10/14 [00:51&lt;00:19,  4.92s/it]</p> <pre><code>Generated 48 conformers. \nRemoved 27 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 12/12 [00:55&lt;00:00,  4.59s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:24&lt;00:00,  4.10s/it]\nOptimising conformer:   5%|\u2588                     | 1/22 [00:04&lt;01:38,  4.67s/it]\n\nGenerated 19 conformers. \nRemoved 9 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 9/10 [01:16&lt;00:07,  7.63s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [01:20&lt;00:00,  8.08s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 14/14 [01:04&lt;00:00,  4.59s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  19%|\u2588\u2588\u2588\u2588\u258f                 | 4/21 [00:21&lt;01:23,  4.94s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 10/11 [00:37&lt;00:03,  3.88s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:42&lt;00:00,  3.88s/it]\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          | 11/22 [00:30&lt;00:31,  2.84s/it]\n\nGenerated 19 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:40&lt;00:00,  3.71s/it]\nOptimising conformer:  11%|\u2588\u2588\u258c                    | 1/9 [00:07&lt;01:00,  7.53s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  38%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d             | 8/21 [00:39&lt;00:59,  4.55s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:41&lt;00:00,  4.10s/it]\nOptimising conformer:  62%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        | 13/21 [00:52&lt;00:23,  2.90s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/19 [00:00&lt;?, ?it/s]\n\nGenerated 29 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                               | 0/4 [00:00&lt;?, ?it/s]\n\nGenerated 13 conformers. \nRemoved 9 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  11%|\u2588\u2588\u258e                   | 2/19 [00:06&lt;00:48,  2.87s/it]\n\nGenerated 23 conformers. \nRemoved 5 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 8/9 [00:37&lt;00:03,  3.98s/it]\n\nGenerated 17 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22/22 [01:13&lt;00:00,  3.34s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9/9 [00:42&lt;00:00,  4.74s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:14&lt;00:00,  3.74s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [01:18&lt;00:00,  3.74s/it]\nOptimising conformer:  24%|\u2588\u2588\u2588\u2588\u2588\u258f                | 4/17 [00:14&lt;00:42,  3.31s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  63%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e       | 12/19 [00:33&lt;00:19,  2.84s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  41%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588             | 7/17 [00:23&lt;00:30,  3.08s/it]\n\nGenerated 39 conformers. \nRemoved 15 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   0%|                              | 0/24 [00:00&lt;?, ?it/s]</p> <pre><code>Generated 31 conformers. \nRemoved 9 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:  47%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e           | 8/17 [00:26&lt;00:27,  3.11s/it]\n\nGenerated 16 conformers. \nRemoved 0 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   8%|\u2588\u258a                    | 2/24 [00:10&lt;02:00,  5.47s/it]\n\nGenerated 21 conformers. \nRemoved 6 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 19/19 [00:51&lt;00:00,  2.70s/it]\nOptimising conformer:  27%|\u2588\u2588\u2588\u2588\u2588\u2588                | 6/22 [00:23&lt;00:58,  3.67s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  25%|\u2588\u2588\u2588\u2588\u2588\u258c                | 6/24 [00:30&lt;01:22,  4.60s/it]\n\nGenerated 27 conformers. \nRemoved 3 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/21 [00:00&lt;?, ?it/s]\n\nGenerated 33 conformers. \nRemoved 13 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\nGenerated 27 conformers. \nRemoved 6 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 17/17 [01:04&lt;00:00,  3.77s/it]\nOptimising conformer:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c          | 11/22 [00:40&lt;00:44,  4.06s/it]\n\nGenerated 23 conformers. \nRemoved 8 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:52&lt;00:00,  3.27s/it]\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/43 [00:00&lt;?, ?it/s]\n\nGenerated 44 conformers. \nRemoved 1 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 18/22 [01:11&lt;00:19,  4.99s/it]\n\nGenerated 34 conformers. \nRemoved 14 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [01:06&lt;00:00,  4.46s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22/22 [01:26&lt;00:00,  3.91s/it]\nOptimising conformer:  20%|\u2588\u2588\u2588\u2588\u258d                 | 4/20 [00:15&lt;01:00,  3.75s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:  25%|\u2588\u2588\u2588\u2588\u2588\u258c                | 5/20 [00:24&lt;01:24,  5.62s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer:   0%|                              | 0/24 [00:00&lt;?, ?it/s]\n\nGenerated 27 conformers. \nRemoved 3 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 24/24 [01:53&lt;00:00,  4.74s/it]\nOptimising conformer:  90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 19/21 [01:18&lt;00:06,  3.17s/it]\n\nGenerated 44 conformers. \nRemoved 33 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 21/21 [01:26&lt;00:00,  4.11s/it]\nOptimising conformer:  78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e    | 14/18 [02:36&lt;00:42, 10.54s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [01:26&lt;00:00,  5.79s/it]\nOptimising conformer:   8%|\u2588\u258a                    | 2/24 [00:21&lt;03:39,  9.99s/it]/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/parmed/structure.py:1799: UnitStrippedWarning: The unit of the quantity is stripped when downcasting to ndarray.\n  coords = np.asanyarray(value, dtype=np.float64)\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [01:40&lt;00:00,  5.01s/it]\nOptimising conformer:  83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 20/24 [01:56&lt;00:09,  2.26s/it]\n\nGenerated 34 conformers. \nRemoved 18 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18/18 [03:00&lt;00:00, 10.01s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 20/20 [01:17&lt;00:00,  3.89s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 24/24 [02:03&lt;00:00,  5.14s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:44&lt;00:00,  4.02s/it]\nOptimising conformer:   0%|                              | 0/22 [00:00&lt;?, ?it/s]\n\nGenerated 32 conformers. \nRemoved 10 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer:   0%|                              | 0/23 [00:00&lt;?, ?it/s]\n\nGenerated 40 conformers. \nRemoved 17 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n</code></pre> <p>Optimising conformer:   5%|\u2588                     | 1/22 [00:03&lt;01:06,  3.19s/it]</p> <pre><code>Generated 34 conformers. \nRemoved 11 conformers. \nusing ani2x\n/home/dresio/software/mambaforge/envs/fegrow/lib/python3.11/site-packages/torchani/resources/\nfailed to equip `nnpops` with error: No module named 'NNPOps'\n\n\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 43/43 [01:52&lt;00:00,  2.61s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 24/24 [01:14&lt;00:00,  3.12s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16/16 [00:41&lt;00:00,  2.58s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 23/23 [00:36&lt;00:00,  1.60s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22/22 [00:46&lt;00:00,  2.09s/it]\nOptimising conformer: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 23/23 [00:48&lt;00:00,  2.12s/it]\n</code></pre> <pre><code>\n</code></pre> <p>Write out the chemical space and top scoring structures:</p> <pre><code># save the chemical space of built molecules:\n\nfailed = False\nunbuilt = False\n\nwith Chem.SDWriter(\"notebook_chemspace.sdf\") as SD:\n    columns = cs.df.columns.to_list()\n    columns.remove(\"Mol\")\n\n    for i, row in cs.df.iterrows():\n        # ignore this molecule because it failed during the build\n        if failed is False and row.Success is False:\n            continue\n\n        # ignore this molecule because it was not built yet\n        if unbuilt is False and not row.Success:\n            continue\n\n        mol = row.Mol\n        mol.SetIntProp(\"index\", i)\n        for column in columns:\n            value = getattr(row, column)\n            mol.SetProp(column, str(value))\n\n        mol.ClearProp(\"attachement_point\")\n        SD.write(mol)\n</code></pre> <pre><code># save the structures of the top 10 molecules in ranked order as a sdf file:\nmolecules = []\ninput_sdf = \"notebook_chemspace.sdf\"\nbest_n = 10\n\nwith Chem.SDMolSupplier(input_sdf) as SDF:\n    # for each mol\n    for mol in SDF:\n        if mol is None:\n            continue\n        if mol.GetPropsAsDict()[\"Success\"] == \"True\":\n            molecules.append(mol)\n\n# sort by the key\nsorted_molecules = sorted(\n    molecules, key=lambda m: m.GetPropsAsDict()[\"score\"], reverse=True\n)\n\nwith Chem.SDWriter(f\"top_{best_n:d}_{input_sdf}\") as SDF_OUT:\n    for i, mol in enumerate(sorted_molecules):\n        if i == best_n:\n            break\n\n        SDF_OUT.write(mol)\n\nprint(\"Done\")\n</code></pre> <pre><code>Done\n</code></pre> <p>Note that the options in this tutorial are set to give a fast run time. For full scale simulations, the number of active learning cycles, the size of the chemical space and number of compounds picked per cycle can all be increased.</p> <pre><code>\n</code></pre>"}]}